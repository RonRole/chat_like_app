{"version":3,"sources":["modules/currentRoomStatusModule/CurrentRoomStatusActions.js","modules/logModule/LogActions.js","modules/currentRoomStatusModule/CurrentRoomStatusReducer.js","modules/currentRoomStatusModule/CurrentRoomStatusModule.js","modules/userModule/UserActions.js","modules/userModule/UserReducer.js","modules/userModule/UserModule.js","modules/talkRoomModule/TalkRoomActions.js","modules/talkRoomModule/TalkRoomReducer.js","modules/talkRoomModule/TalkRoomModule.js","containers/MessagesContainer.js","components/MessageSendButton.js","containers/MessageFormContainer.js","components/Transparent.js","containers/CurrentUsersContainer.js","containers/MessagesPage.js","components/Navigation.js","containers/LoginRequiredRoute.js","modules/logModule/LogReducer.js","modules/logModule/LogModule.js","components/UserFormGroups.js","modules/FormErrorModule/FormErrorActions.js","modules/FormErrorModule/FormErrorReducer.js","modules/FormErrorModule/FormErrorModule.js","containers/LoginForm.js","components/LoginPage.js","modules/ModalModule/ModalActions.js","modules/ModalModule/ModalReducer.js","modules/ModalModule/ModalModule.js","components/ModalForm.js","components/TalkRoomFormGroups.js","containers/UpdateTalkRoomForm.js","components/UserProfile.js","containers/UserInviteButton.js","containers/UserInviteForm.js","containers/OwnerDropdown.js","containers/TalkRoomCard.js","components/TalkRoomsArea.js","containers/CreateTalkRoomForm.js","containers/TalkRoomPage.js","containers/Loading.js","containers/UpdateUserForm.js","containers/HomePage.js","containers/SignUpForm.js","components/SignUpPage.js","containers/App.js","serviceWorker.js","modules/loadingModule/LoadingActions.js","modules/loadingModule/LoadingModule.js","modules/loadingModule/LoadingReducer.js","modules/loadingModule/LoadingSaga.js","modules/DataAccessor.js","modules/ErrorHandler.js","modules/logModule/LogSaga.js","modules/talkRoomModule/TalkRoomSaga.js","modules/socketClient.js","modules/currentRoomStatusModule/CurrentRoomStatusSaga.js","modules/userModule/UserSaga.js","modules/RootSaga.js","store.js","modules/HistoryModule.js","index.js"],"names":["ActionTypes","JOIN_ROOM","LEAVE_ROOM","DISCONNECTED_FROM_SERVER","ADD_MESSAGE","RECEIVE_MESSAGE","SET_CURRENT_USER_IDS","CLEAR_MESSAGE","REFRESH_CURRENT_ROOM_USERS","CHANGE_CURRENT_USER_STATUS","RECEIVE_CURRENT_USER_STATUS","joinRoom","user","roomId","type","leaveRoom","addMessage","className","text","receiveMessage","setCurrentUserIds","users","clearMessage","refreshCurrentRoomUsers","talkRoomId","userIds","changeCurrentUserStatus","userId","status","receiveCurrentUserStatus","LogActionTypes","EXEC_LOG_IN","DEF_LOG_IN","LOG_IN","LOG_OUT","execLogin","session","name","password","history","then","console","log","cookieLogin","login","loginUser","logout","initialState","0","currentUserIds","currentUserStatus","messages","actions","TalkRoomMessageActoins","reducer","getMessagesByRoomId","state","getCurrentStatusOfRoom","createMessageReducer","action","id","room","UserActionTypes","execGetSelf","execCreateUser","userParams","execUpdateUser","execSearchUser","userName","setCreateFormErrors","errors","clearCreateFormErrors","setSearchedUsers","clearSearchedUsers","setUser","defaultUser","searchedUserIds","UserActions","getUserById","createReducer","forEach","map","TalkRoomActionTypes","execGetOwnRooms","execGetJoinedRooms","execAddTalkRoom","title","description","authorId","execUpdateTalkRoom","execDeleteTalkRoom","execAddUserToTalkRoom","execGetTalkRoomUser","setOwnRooms","talkRooms","setJoinedRooms","addTalkRoom","talkRoom","updateTalkRoom","deleteTalkRoom","addUsersToTalkRoom","ownRooms","joinRooms","TalkRoomActions","getOwnRoomIds","Object","keys","getJoinRoomIds","getTalkRoomById","beforeUserIds","Set","MessagesContainer","classNameToVariant","this","props","match","params","window","onbeforeunload","document","getElementById","scrollTo","scrollHeight","Container","style","TransitionGroup","message","index","CSSTransition","key","timeout","classNames","Row","Col","md","Image","src","image","thumb","url","Alert","variant","overflow","React","Component","connect","logStatus","isLoggedIn","TalkRoomModule","CurrentRoomStatusModule","UserModule","dispatch","MessageSendButton","Button","MessageFormContainer","startInputting","changeUserStatus","finishInputting","Form","onSubmit","formEvent","preventDefault","sendMessage","currentTarget","inputMessage","value","xs","sm","Control","placeholder","onFocus","onChange","onBlur","TalkRoomMessageModule","Transparent","frontComponent","backComponent","transParent","alignItems","zIndex","opacity","transition","position","textAlign","CurrentUsersContainer","getCurrentUserIds","getCurrentRoomStatusById","getCurrentUserStatus","width","height","fluid","fontWeight","allState","MessagePage","border","Navigation","Navbar","collapseOnSelect","expand","bg","sticky","Brand","Toggle","Collapse","Nav","children","LoginRequiredRoute","exact","path","render","to","pathname","flash","LogActions","creatReducer","TRY_LOG_IN","loginErrorMessages","IdFormGroup","defaultValue","errorMessages","Group","controlId","Label","isInvalid","length","Feedback","find","e","NameFormGroup","PasswordFormGroup","PasswordConfirmationFormGroup","ProfileImageFormGroup","uploadFileImage","transParentProfile","display","fileReader","FileReader","input","files","onload","setState","target","result","readAsDataURL","backgroundColor","onClick","click","onMouseOver","onMouseLeave","color","FormErrorActionTypes","setError","formName","errorJson","clearErrorByName","FormErrorActions","getErrorsOf","formCategory","LoginForm","clearLoginError","FormErrorModule","LogModule","LoginPage","location","ModalActionTypes","showModalOf","modalName","closeModalOf","getModalStateOf","ModalForm","Modal","show","size","centered","Header","header","Body","body","Footer","footer","TitleFormGroup","DescriptionFormGroup","UpdateTalkRoomForm","onCancel","UserProfile","profile","borderBottom","self_id","objectFit","addUserToTalkRoom","some","disabled","UserInviteForm","flatMap","userInviteErrorMessages","filter","clearSearchedUserIds","clearErrorMessages","searchUser","OwnerDropdown","userInvideModalShow","updateModalShow","getTalkRoom","Dropdown","Menu","Item","confirm","destroyTalkRoom","TalkRoomCard","getUser","Card","Title","Text","author_id","roundedCircle","readOnly","getMembers","TalkRoomsArea","talkRoomIds","span","CreateTalkRoomFormComp","TalkRoomAreaLabel","TalkRoomPage","createModalShow","getOwnRooms","getJoinRooms","ownRoomIds","joinRoomIds","CreateTalkRoomForm","ModalModule","Loading","loading","textShadow","Spinner","animation","UpdateUserForm","currentUser","changedParams","param","notBlankParams","getErrorMessagesFromFormName","inputParams","newUserParams","filterNotBlankParams","filterChangedParams","updateUser","HomePage","updateUserModalShow","SignUpForm","signUp","password_confirmation","SignUpPage","App","defaultLoaded","defaultLogin","component","MessagesPage","Boolean","hostname","LoadingActionTypes","startLoading","finishLoading","LoadingActions","Math","max","wrapSagaWithLoading","saga","put","fork","argSaga","join","Axios","defaults","withCredentials","createNormalResponse","response","isSuccess","data","isFail","createErrorResponse","error","isError","get","catch","post","parameter","headers","delete","handleError","push","alert","handleGetDefLoginStart","handleGetExecLoginStart","handleGetLogoutStart","call","DataAccessor","process","REACT_APP_BACKEND_ADDRESS","accessResult","loginAction","handleGetOwnRooms","handleGetJoinedTalkRooms","handleAddTalkRoom","handleUpdateTalkRoom","handleDeleteTalkRoom","handleGetTalkRoomMembers","handleAddTalkRoomMember","createTalkRoom","talkroom","getTalkRoomMembers","addMemberToTalkRoom","talkRoomResult","addTalkRoomResult","updateTalkRoomResult","deleteTalkRoomResult","REACT_APP_SOCKET_ADDRESS","socketClient","io","REACT_APP_SOCKET_PATH","createMessegeReceiveChannel","handleReceiveMessage","createCurrentUsersRecieveChannel","handleGetCurrentUsers","createCurrentUserStatusChannel","handleGetCurrentUserStatus","handleJoinRoom","handleLeaveRoom","handleAddMessage","handleChangeStatus","eventChannel","emit","on","close","channel","take","Actions","CurrentRoomStatusActions","disconnect","handleCreateUser","handleUpdateUser","createCurrentUserReceiveChannel","handleGetCurrentRoomUsers","handleExecSearchUser","createUser","formData","FormData","paramName","append","searchResult","initialize","rootSaga","logSaga","talkRoomSaga","logSagas","takeEvery","loadingSaga","talkRoomSagas","talkRoomMessageSagas","talkRoomMessageSaga","userSagas","userSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","currentRoomStatus","LoadingModule","formErrors","modalStates","applyMiddleware","run","RootSaga","require","createBrowserHistory","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4bb05e86.chunk.js","sourcesContent":["//actionTypes\nexport const ActionTypes = {\n    JOIN_ROOM       : \"JOIN_ROOM\",\n    LEAVE_ROOM      : \"LEAVE_ROOM\",\n    DISCONNECTED_FROM_SERVER : \"DISCONNECTED_FROM_SERVER\",\n    ADD_MESSAGE     : \"ADD_MESSAGE\",\n    RECEIVE_MESSAGE : \"RECEIVE_MESSAGE\",\n    SET_CURRENT_USER_IDS : \"SET_CURRENT_USER_IDS\",\n    CLEAR_MESSAGE : \"CLEAR_MESSAGE\",\n    REFRESH_CURRENT_ROOM_USERS  : \"REFRESH_CURRENT_ROOM_USERS\",\n    CHANGE_CURRENT_USER_STATUS : \"CHANGE_CURRENT_USER_STATUS\",\n    RECEIVE_CURRENT_USER_STATUS : 'RECEIVE_CURRENT_USER_STATUS'\n}\n\n//actionCreators\nconst joinRoom = ({user, roomId}) => {\n    return {\n        type   : ActionTypes.JOIN_ROOM,\n        user,\n        roomId\n    }\n}\n\nconst leaveRoom = ({user, roomId}) => {\n    return {\n        type : ActionTypes.LEAVE_ROOM,\n        user,\n        roomId,\n    }\n}\n\nconst addMessage = ({\n    roomId,\n    className,\n    user,\n    text,\n}) => {\n    return {\n        type     : ActionTypes.ADD_MESSAGE,\n        roomId,\n        className,\n        user,\n        text\n    }\n}\n\nconst receiveMessage = ({\n    roomId,\n    className,\n    user,\n    text\n}) => {\n    return {\n        type     : ActionTypes.RECEIVE_MESSAGE,\n        roomId,\n        className,\n        user,\n        text\n    }\n}\n\nconst setCurrentUsers = (...users) => {\n    return {\n        type : ActionTypes.SET_CURRENT_USER_IDS,\n        users\n    }\n} \n\nconst clearMessage = (roomId) => {\n    return {\n        type : ActionTypes.CLEAR_MESSAGE,\n        roomId\n    }\n}\n\nconst refreshCurrentRoomUsers = ({\n    talkRoomId,\n    userIds\n}) => {\n    return {\n        type : ActionTypes.REFRESH_CURRENT_ROOM_USERS,\n        talkRoomId,\n        userIds\n    }\n}\n\nconst changeCurrentUserStatus = ({\n    talkRoomId,\n    userId,\n    status\n}) => {\n    return {\n        type: ActionTypes.CHANGE_CURRENT_USER_STATUS,\n        talkRoomId,\n        userId,\n        status\n    }\n}\n\nconst receiveCurrentUserStatus = ({\n    talkRoomId,\n    userId,\n    status\n}) => {\n    return {\n        type: ActionTypes.RECEIVE_CURRENT_USER_STATUS,\n        talkRoomId,\n        userId,\n        status\n    }\n}\n\nexport default {\n    joinRoom,\n    leaveRoom,\n    addMessage,\n    receiveMessage,\n    setCurrentUserIds: setCurrentUsers,\n    clearMessage,\n    refreshCurrentRoomUsers,\n    changeCurrentUserStatus,\n    receiveCurrentUserStatus\n}","export const LogActionTypes = {\n    EXEC_LOG_IN:\"EXEC_LOG_IN\",\n    DEF_LOG_IN:\"DEF_LOG_IN\",\n    LOG_IN:\"LOG_IN\",\n    LOG_OUT:\"LOG_OUT\",\n}\n\nexport default {\n    execLogin:({\n        session  ={name:\"\",password:\"\"},\n        history  ={},\n        then     =()=>console.log(\"tryed to login\")\n    }) => {\n        return {\n            type     :LogActionTypes.EXEC_LOG_IN,\n            session,\n            history,\n            then\n        }\n    },\n    cookieLogin:({\n        history,\n        then\n    }) => {\n        return {\n            type    : LogActionTypes.DEF_LOG_IN,\n            history,\n            then\n        }\n    },\n    login: (loginUser) => {\n        return {\n            type     :LogActionTypes.LOG_IN,\n            loginUser\n        }\n    },\n    logout: () => {\n        return {\n            type:LogActionTypes.LOG_OUT\n        }\n    },\n}\n","import {ActionTypes} from \"./CurrentRoomStatusActions\"\nimport { LogActionTypes } from \"../logModule/LogActions\"\n\n\n/**\n * トークルームのid : メッセージ一覧\n */\nconst initialState = {\n    0:{\n        currentUserIds:[],\n        currentUserStatus: {\n            0:''\n        },\n        messages:[{\n            \"roomID\" : 0,\n            \"className\" : \"\",\n            \"text\" : \"\",\n            \"user\" : \"\",\n        }]\n    }  \n}\n\nconst getMessagesByRoomId = state => {\n    return (roomId) => {\n        const room = state['currentRoomStatus'][roomId] || initialState[0]\n        return room['messages']\n    }\n}\n\nconst getCurrentStatusOfRoom = state => {\n    return (roomId) => {\n        const room = state['currentRoomStatus'][roomId] || initialState[0]\n        return room\n    }\n}\n\nconst createReducer = (state = initialState, action) => {\n    switch(action.type){\n        case LogActionTypes.LOG_IN : {\n            return {\n                ...initialState\n            }\n        }\n        case ActionTypes.ADD_MESSAGE:\n        case ActionTypes.RECEIVE_MESSAGE: {\n            state[action.roomId] = state[action.roomId] || {messages:[]}\n            state[action.roomId]['messages'] = [\n                ...state[action.roomId]['messages'],\n                {\n                    className : action.className,\n                    user      : action.user.id,\n                    text      : action.text\n                }\n            ]\n            return {\n                ...state\n            }\n        }\n        case ActionTypes.CLEAR_MESSAGE : {\n            state[action.roomId]['messages'] = []\n            return {\n                ...state\n            }\n        }\n\n        case ActionTypes.REFRESH_CURRENT_ROOM_USERS : {\n            const room = state[action.talkRoomId] || {userIds:[]}\n            room['currentUserIds'] = [...action.userIds]\n            return {\n                ...state\n            }\n        }\n\n        case ActionTypes.CHANGE_CURRENT_USER_STATUS :\n        case ActionTypes.RECEIVE_CURRENT_USER_STATUS : {\n            const room = state[action.talkRoomId] || {userIds:[]}\n            room['currentUserStatus'] = room['currentUserStatus'] || {}\n            room['currentUserStatus'][action.userId] = action.status\n            return {\n                ...state\n            }\n        }\n\n        default: {\n            return state;\n        }\n    }\n}\n\nexport default {\n    getMessagesByRoomId,\n    getCurrentStatusOfRoom,\n    createMessageReducer: createReducer\n}\n\n","import TalkRoomMessageActoins from \"./CurrentRoomStatusActions\";\nimport TalkRoomMessageReducer from \"./CurrentRoomStatusReducer\";\n\nexport default {\n    actions:TalkRoomMessageActoins,\n    reducer:TalkRoomMessageReducer,\n}","export const UserActionTypes = {\n    EXEC_GET_SELF : \"EXEC_GET_SELF\",\n    EXEC_CREATE_USER : \"EXEC_CREATE_USER\",\n    EXEC_UPDATE_USER : \"EXEC_UPDATE_USER\",\n    EXEC_SEARCH_USER : \"EXEC_SEARCH_USER\",\n    SET_CREATE_FORM_ERRORS : \"SET_CREATE_FORM_ERRORS\",\n    CLEAR_CREATE_FORM_ERRORS : \"CLEAR_CREATE_FORM_ERRORS\",\n    SET_SEARCHED_USER_IDS : \"SET_SEARCHED_USER\",\n    ADD_USER : \"ADD_USER\"\n}\n\nexport default {\n    execGetSelf : () => {\n        return {\n            type: UserActionTypes.EXEC_GET_SELF\n        }\n    },\n    execCreateUser : ({\n        history,\n        userParams\n    }) => {\n        return {\n            type : UserActionTypes.EXEC_CREATE_USER,\n            history,\n            userParams,\n        }\n    },\n    execUpdateUser : (\n        userParams\n    ) => {\n        return {\n            type: UserActionTypes.EXEC_UPDATE_USER,\n            userParams\n        }\n    },\n    execSearchUser : ({\n        userId,\n        userName\n    }) => {\n        return {\n            type : UserActionTypes.EXEC_SEARCH_USER,\n            userId,\n            userName\n        }\n    },\n    //errorsはJSON\n    setCreateFormErrors : (errors) => {\n        return {\n            type : UserActionTypes.SET_CREATE_FORM_ERRORS,\n            errors\n        }\n    },\n\n    clearCreateFormErrors : () => {\n        return {\n            type : UserActionTypes.CLEAR_CREATE_FORM_ERRORS,\n            errors : {}\n        }\n    },\n\n    setSearchedUsers : (...users) => {\n        return {\n            type : UserActionTypes.SET_SEARCHED_USER_IDS,\n            users\n        }\n    },\n\n    clearSearchedUsers : () => {\n        return {\n            type : UserActionTypes.SET_SEARCHED_USER_IDS,\n            users : []\n        }\n    },\n\n    setUser : (...users) => {\n        return {\n            type : UserActionTypes.ADD_USER,\n            users\n        }\n    }\n}","import { UserActionTypes } from \"./UserActions\"\nimport { LogActionTypes } from \"../logModule/LogActions\"\n\nconst defaultUser = {\n    \"id\" : 0,\n    \"name\" : \"\",\n    \"image\" : {\n        \"url\" : \"\",\n        \"profile\" : {\n            \"url\" : \"\"\n        },\n        \"thumb\" : {\n            \"url\" : \"\"\n        }\n    }\n}\n\nconst initialState = {\n    //ユーザー検索時、見つけたユーザーのIDを入れる\n    searchedUserIds : [],\n    //ID:ユーザー\n    0            : defaultUser,\n}\n\nconst createGetUserById = (state) => (id) => {\n    return state[\"users\"][id] || defaultUser\n}\n\nconst createReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case LogActionTypes.LOG_IN : {\n            return initialState\n        }\n        case UserActionTypes.ADD_USER : {\n            action.users.forEach(user => {\n                state[user.id] = user\n            })\n            return {\n                ...state\n            }\n        }\n        case UserActionTypes.SET_SEARCHED_USER_IDS : {\n            action.users.forEach(user => {\n                state[user.id] = user\n            })\n            return {\n                ...state,\n                searchedUserIds : action.users.map(user => user.id),\n            }\n        }\n        default : {\n            return state\n        }\n    }\n}\n\nexport default {\n    getUserById: createGetUserById,\n    createReducer\n}","import UserActions from \"./UserActions\";\nimport UserReducer from \"./UserReducer\";\n\nexport default {\n    actions : UserActions,\n    reducer : UserReducer\n}","export const TalkRoomActionTypes = {\n    EXEC_GET_OWN_ROOMS        : \"GET_OWN_ROOMS\",\n    EXEC_GET_JOINED_ROOMS     : \"GET_JOINED_ROOMS\",\n    EXEC_ADD_ROOM             : \"EXEC_ADD_ROOM\",\n    EXEC_DELETE_ROOM          : \"EXEC_DELETE_ROOM\",\n    EXEC_UPDATE_ROOM          : \"EXEC_UPDATE_ROOM\",\n    EXEC_ADD_USER_TO_TALKROOM : \"EXEC_ADD_USER_TO_TALKROOM\",\n    EXEC_GET_TALKROOM_MEMBERS : \"EXEC_GET_TALKROOM_MEMBER\",\n\n    SET_OWN_ROOMS          : \"SET_OWN_ROOMS\",\n    SET_JOINED_ROOMS       : \"SET_JOINED_ROOMS\",\n    ADD_TALK_ROOM          : \"ADD_TALK_ROOM\",\n    DELETE_TALK_ROOM       : \"DELETE_TALK_ROOM\",\n    UPDATE_TALK_ROOM       : \"UPDATE_TALK_ROOM\",\n    ADD_USERS_TO_TALK_ROOM : \"ADD_USERS_TO_TALK_ROOM\",\n}\n\nexport default {\n    execGetOwnRooms   :(history) => {\n        return {\n            type    : TalkRoomActionTypes.EXEC_GET_OWN_ROOMS,\n            history : history \n        }\n    },\n    execGetJoinedRooms:(history) => {\n        return {\n            type    : TalkRoomActionTypes.EXEC_GET_JOINED_ROOMS,\n            history : history\n        }\n    },\n    execAddTalkRoom:({\n        history,\n        title=\"New Room\",\n        description=\"This is a new talk room\",\n        authorId\n    }) => {\n        return {\n            type       :TalkRoomActionTypes.EXEC_ADD_ROOM,\n            history,\n            title,\n            description,\n            authorId,\n        }\n    },\n    execUpdateTalkRoom:({\n        talkRoomId,\n        title,\n        description\n    }) => {\n        return {\n            type : TalkRoomActionTypes.EXEC_UPDATE_ROOM,\n            talkRoomId,\n            title,\n            description,\n        }\n    },\n    execDeleteTalkRoom:(\n        talkRoomId\n    ) => {\n        return {\n            type      : TalkRoomActionTypes.EXEC_DELETE_ROOM,\n            talkRoomId,\n        }\n    },\n\n    execAddUserToTalkRoom:({\n        userId,\n        talkRoomId\n    }) => {\n        return {\n            type : TalkRoomActionTypes.EXEC_ADD_USER_TO_TALKROOM,\n            userId,\n            talkRoomId,\n        }\n    },\n\n    execGetTalkRoomUser:(\n        talkRoomId\n    ) => {\n        return {\n            type : TalkRoomActionTypes.EXEC_GET_TALKROOM_MEMBERS,\n            talkRoomId,\n        }\n    },\n\n    setOwnRooms   :(talkRooms) => {\n        return {\n            type:TalkRoomActionTypes.SET_OWN_ROOMS,\n            talkRooms,\n        }\n    },\n    setJoinedRooms:(talkRooms) => {\n        return {\n            type:TalkRoomActionTypes.SET_JOINED_ROOMS,\n            talkRooms,\n        }\n    },\n    addTalkRoom:(talkRoom) => {\n        return {\n            type:TalkRoomActionTypes.ADD_TALK_ROOM,\n            talkRoom,\n        }\n    },\n    updateTalkRoom:({\n        talkRoomId,\n        talkRoom\n    })  => {\n        return {\n            type : TalkRoomActionTypes.UPDATE_TALK_ROOM,\n            talkRoomId,\n            talkRoom\n        }\n    },\n    deleteTalkRoom:({\n        talkRoomId\n    }) => {\n        return {\n            type:TalkRoomActionTypes.DELETE_TALK_ROOM,\n            talkRoomId,\n        }\n    },\n\n    addUsersToTalkRoom : ({\n        talkRoomId,\n        userIds\n    }) => {\n        return {\n            type : TalkRoomActionTypes.ADD_USERS_TO_TALK_ROOM,\n            talkRoomId,\n            userIds,\n        }\n    },\n}","import { TalkRoomActionTypes } from \"./TalkRoomActions\";\nimport { LogActionTypes } from \"../logModule/LogActions\";\n\n//reducer\nconst initialState = {\n    ownRooms : {},\n    joinRooms: {},\n}\n\nconst getOwnRoomIds = (state) => Object.keys(state.talkRooms.ownRooms)\n\nconst getJoinRoomIds = (state) => Object.keys(state.talkRooms.joinRooms)\n\nconst getTalkRoomById = (state) => (id) => state.talkRooms.ownRooms[id] || state.talkRooms.joinRooms[id] || {}\n\nconst createReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case LogActionTypes.LOG_IN : {\n            return initialState\n        }\n        case TalkRoomActionTypes.SET_OWN_ROOMS: {\n            state.ownRooms = {}\n            action.talkRooms.forEach(room => {\n                state.ownRooms[room.id] = room\n            })\n            return {\n                ...state,\n            }\n        }\n        case TalkRoomActionTypes.SET_JOINED_ROOMS: {\n            state.joinRooms = {}\n            action.talkRooms.forEach(room => {\n                state.joinRooms[room.id] = room\n            });\n            return {\n                ...state,\n           }\n        }\n        case TalkRoomActionTypes.ADD_TALK_ROOM: {\n            state.ownRooms[action.talkRoom.id] = action.talkRoom\n            return {\n                ...state\n            }\n        }\n        case TalkRoomActionTypes.DELETE_TALK_ROOM: {\n            delete state.ownRooms[action.talkRoomId]\n            return {\n                ...state\n            }\n        }\n        case TalkRoomActionTypes.ADD_USERS_TO_TALK_ROOM: {\n            const room = state.ownRooms[action.talkRoomId] || state.joinRooms[action.talkRoomId] || {userIds:[]}\n            const beforeUserIds = (room['userIds'] || [])\n            room['userIds'] = [...new Set([...beforeUserIds,...action.userIds])]\n            return {\n                ...state\n            }\n        }\n\n        case TalkRoomActionTypes.UPDATE_TALK_ROOM : {\n            state.ownRooms[action.talkRoomId]　= {\n                ...state.ownRooms[action.talkRoomId],\n                ...action.talkRoom\n            }\n            return {\n                ...state,\n            }\n        }\n        \n        default: {\n            return state\n        }\n    }\n}\n\nexport default {\n    getOwnRoomIds,\n    getJoinRoomIds,\n    getTalkRoomById,\n    createReducer\n}\n","import TalkRoomActions from './TalkRoomActions'\nimport TalkRoomReducer from './TalkRoomReducer'\n\nexport default {\n    actions : TalkRoomActions,\n    reducer : TalkRoomReducer,\n}","import React from 'react'\nimport {connect} from 'react-redux'\nimport { Container, Alert, Row, Col, Image } from 'react-bootstrap'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport CurrentRoomStatusModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\nimport UserModule from '../modules/userModule/UserModule'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\n\nexport class MessagesContainer extends React.Component {\n\n    classNameToVariant = {\n        \"joinRoom\" : \"primary\",\n        \"leaveRoom\" : \"danger\",\n        \"myMessage\" : \"success\",\n        \"receiveMessage\" : \"secondary\"\n    }\n\n    componentDidMount(){\n        this.props.joinRoom({\n            user : this.props.loginUser,\n            roomId: this.props.match.params.id\n        })\n        window.onbeforeunload = () => {\n            this.props.leaveRoom({\n                user : this.props.loginUser,\n                roomId : this.props.match.params.id\n            })\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.leaveRoom({\n            user : this.props.loginUser,\n            roomId : this.props.match.params.id\n        })\n\n    }   \n\n    componentDidUpdate(){\n        const messageArea = document.getElementById(\"messageArea\")\n        messageArea.scrollTo(0, document.getElementById(\"messageArea\").scrollHeight)\n    }\n\n    render() {\n        return (\n            <Container id = \"messageArea\" className={this.props.className} style={this.props.style}>\n                <TransitionGroup>\n                    {this.props.getMessagesByRoomId(this.props.match.params.id).map((message,index) => {\n                        return (\n                            <CSSTransition key={index} timeout= {100} classNames=\"fade\">\n                                <Row>\n                                    <Col className md={message.md}>\n                                        <Image src={this.props.getUserById(message.user).image.thumb.url}/>\n                                        <strong className=\"ml-2\">{this.props.getUserById(message.user).name}</strong>\n                                        <Alert variant={this.classNameToVariant[message.className]} key={index} style={{overflow:\"auto\"}}>\n                                            {message.text}\n                                        </Alert>\n                                    </Col>\n                                </Row>\n                            </CSSTransition>\n                        )\n                    })}\n                </TransitionGroup>\n            </Container>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        state,\n        loginUser : state.logStatus.isLoggedIn,\n        getTalkRoomById : (roomId) => TalkRoomModule.reducer.getTalkRoomById(state)(roomId),\n        getMessagesByRoomId:(roomId) => CurrentRoomStatusModule.reducer.getMessagesByRoomId(state)(roomId),\n        getUserById : (id) => UserModule.reducer.getUserById(state)(id)\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        joinRoom:({\n            user, \n            roomId\n        }) => dispatch(CurrentRoomStatusModule.actions.joinRoom({user, roomId})),\n        leaveRoom:({\n            user,\n            roomId\n        }) => dispatch(CurrentRoomStatusModule.actions.leaveRoom({user, roomId})),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesContainer);\n\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\n\nclass MessageSendButton extends React.Component {\n    render() {\n        return (\n            <Button variant=\"warning\" type=\"submit\">▶</Button>\n        )\n\n    }\n}\n\nexport default MessageSendButton","import React from 'react'\n//import { Actions, Variants } from '../modules/TalkRoomMessageModule'\nimport TalkRoomMessageModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\n\nimport { connect } from 'react-redux'\nimport { Container, Form, Row, Col } from 'react-bootstrap'\nimport MessageSendButton from '../components/MessageSendButton'\n\nexport class MessageFormContainer extends React.Component {\n\n    startInputting = () => this.props.changeUserStatus({\n        talkRoomId : this.props.match.params.id,\n        userId : this.props.loginUser.id,\n        status: '入力中'                                    \n    })\n\n    finishInputting = () => this.props.changeUserStatus({\n        talkRoomId : this.props.match.params.id,\n        userId : this.props.loginUser.id,\n        status : ''\n    })\n\n    render() {\n        return (\n            <Container {...this.props}>\n                <Form onSubmit={(formEvent) => {\n                        formEvent.preventDefault()\n                        this.props.sendMessage({\n                            roomId    : this.props.match.params.id,\n                            className : \"myMessage\",\n                            text      : formEvent.currentTarget.inputMessage.value,\n                            user      : this.props.loginUser\n                        })\n                        formEvent.currentTarget.inputMessage.value = \"\"\n                        this.finishInputting()\n                    }}>\n                    <Row>\n                        <Col xs={10} sm={10} md={11}>\n                            <Form.Control \n                                name=\"inputMessage\" \n                                type=\"text\" \n                                placeholder=\"メッセージを入力してね\" \n                                onFocus={this.startInputting}\n                                onChange={this.startInputting}\n                                onBlur={this.finishInputting}\n                            /> \n                        </Col>\n                        <Col xs={2} sm={2} md={1}>\n                            <MessageSendButton />\n                        </Col>\n                    </Row>\n                </Form>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loginUser : state.logStatus.isLoggedIn\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeUserStatus : ({\n            talkRoomId,\n            userId,\n            status\n        }) => {\n            dispatch(TalkRoomMessageModule.actions.changeCurrentUserStatus({\n                talkRoomId,\n                userId,\n                status\n            }))\n        },\n        sendMessage:({\n            roomId,\n            className,\n            text,\n            user\n        }) => {\n            dispatch(TalkRoomMessageModule.actions.addMessage({\n                roomId,\n                className,\n                text,\n                user\n            }))\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(MessageFormContainer)\n","import React from 'react'\n/**\n * マウスホバーされた時に、前面に配置されたコンポーネントを透過し、\n * 後ろに配置されたコンポーネントを表示するコンポーネントです。\n * topComponent:前面に配置するコンポーネント\n * behindComponent:背面に配置するコンポーネント\n */\nconst Transparent = ({\n    frontComponent,\n    backComponent,\n    transParent=false\n}) => {\n    return (\n        <div className='d-flex' style={{alignItems:'center'}}>\n            <div style={{\n                zIndex:1, \n                opacity:transParent ? 0.1 : 1.0,\n                transition:'all 0.2s ease-out'\n            }}>\n                {frontComponent}\n            </div>\n            <div style={{zIndex:0, position:'absolute', textAlign:'center'}}>\n                {backComponent}\n            </div>\n        </div>                \n    )\n}\n\nexport default Transparent","import React from 'react'\nimport { Container, Image } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport UserModule from '../modules/userModule/UserModule'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport Transparent from '../components/Transparent'\nimport CurrentRoomStatusModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\n\nclass CurrentUsersContainer extends React.Component {\n\n    getCurrentUserIds = () => this.props.getCurrentRoomStatusById(this.props.match.params.id)[\"currentUserIds\"] || []\n    getCurrentUserStatus = () => this.props.getCurrentRoomStatusById(this.props.match.params.id)[\"currentUserStatus\"] || []\n\n    render() {\n        return (\n            <Container {...this.props}>\n                <h6><strong>今いる人たち</strong></h6>\n                <TransitionGroup className='d-flex'>\n                    {this.getCurrentUserIds().map(id => this.props.getUserById(id)).map((user,index) => {\n                        return (\n                            <CSSTransition key={index} timeout={100} classNames=\"fade\">\n                                <Transparent \n                                    frontComponent = {<Image className=\"mr-2 mb-2\" id='set_image' src={user.image.thumb.url} style={{width:'50px', height:'50px', zIndex:'1'}} fluid/>}\n                                    backComponent = {\n                                        <div style={{\n                                            fontWeight:'bold',\n                                            textAlign:'center',\n                                            width:'50px'\n                                        }}>\n                                            {this.getCurrentUserStatus()[user.id]}\n                                    </div>}\n                                    transParent = {this.getCurrentUserStatus()[user.id]}\n                                />           \n                            </CSSTransition>\n                        )\n                    })}\n                </TransitionGroup>\n            </Container>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        allState : state,\n        getCurrentRoomStatusById : (id) => CurrentRoomStatusModule.reducer.getCurrentStatusOfRoom(state)(id),\n        getUserById : (userId) => UserModule.reducer.getUserById(state)(userId)\n    }\n}\n\nexport default connect(mapStateToProps)(CurrentUsersContainer)","import React from 'react'\nimport MessagesContainer from './MessagesContainer'\nimport MessageFormContainer from './MessageFormContainer'\nimport { Container, Image } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\nimport UserModule from '../modules/userModule/UserModule'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport CurrentUsersContainer from './CurrentUsersContainer'\n\nclass MessagePage extends React.Component {\n\n    render(){\n        return (\n            <Container className=\"justify-content-center\">\n                <strong>{this.props.getTalkRoomById(this.props.match.params.id).title}</strong>\n                <CurrentUsersContainer {...this.props} className='mb-2' style={{height:'auto', width:'100%', border:\"1px solid gray\"}}/>\n                <MessagesContainer {...this.props} className=\"mb-2\" style={{height:\"65vh\", width:\"100%\", overflow:\"scroll\", border:\"1px solid gray\"}}/>\n                <MessageFormContainer {...this.props} />\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state,\n        getTalkRoomById : (id) => TalkRoomModule.reducer.getTalkRoomById(state)(id),\n        getUserById : (userId) => UserModule.reducer.getUserById(state)(userId)\n    }\n}\n\nexport default connect(mapStateToProps)(MessagePage)\n","import React from 'react'\nimport { Navbar, Nav } from 'react-bootstrap';\n\nclass Navigation extends React.Component {\n    render() {\n        return (\n            <Navbar collapseOnSelect expand=\"sm\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\n                <Navbar.Brand>CHAT LIKE APP</Navbar.Brand>\n                <Navbar.Toggle />\n                <Navbar.Collapse>\n                    <Nav>\n                        {this.props.children}\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        )\n    }\n}\n\nexport default Navigation;","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nexport class LoginRequiredRoute extends React.Component {\n\n    render(){\n        if(!this.props.isLoggedIn){\n            return  <Route exact={this.props.exact} path={this.props.path} render={()=><Redirect to={{\n                pathname:\"/signin\",\n                flash:\"ログインしろよ\",\n            }}/>}/>\n        }\n        return <Route {...this.props}/>\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isLoggedIn:state.logStatus.isLoggedIn\n    }\n}\n\nexport default connect(mapStateToProps, null)(LoginRequiredRoute)\n","import { LogActionTypes } from \"./LogActions\"\n\n//Reducers\nconst initialState = {\n    //ログイン状態\n    isLoggedIn  : false,\n}\n\nconst creatReducer = (state = initialState, action) => {\n    switch(action.type){\n        case LogActionTypes.TRY_LOG_IN: {\n            return {\n                ...state\n            }\n        }\n        case LogActionTypes.LOG_IN: {\n            return {\n                ...state,\n                isLoggedIn:action.loginUser,\n                loginErrorMessages : []\n            }\n        }\n        case LogActionTypes.LOG_OUT: {\n            return {\n                ...state,\n                isLoggedIn:false,\n                loginErrorMessages : []\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport default {\n    creatReducer\n}","import LogReducer from \"./LogReducer\";\nimport LogActions from \"./LogActions\";\n\nexport default {\n    actions: LogActions,\n    reducer: LogReducer,\n}","import React from 'react'\nimport { Form, NavItem } from 'react-bootstrap'\nimport Transparent from './Transparent'\n\nexport const IdFormGroup = ({\n    className = \"\",\n    style = \"\",\n    defaultValue = \"\",\n    errorMessages = []\n}) => {\n    return (\n        <Form.Group controlId=\"idForm\" className={className} style = {{...style}}>\n            <Form.Label>ユーザーID</Form.Label>\n            <Form.Control type=\"text\" name=\"id\" placeholder=\"ID\" isInvalid={errorMessages.length > 0} defaultValue={defaultValue}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nexport const NameFormGroup = ({\n    className = \"\",\n    style = \"\",\n    defaultValue = \"\",\n    errorMessages = []\n}) => {\n    return (\n        <Form.Group controlId=\"nameForm\" className={className} style={{...style}}>\n            <Form.Label>名前</Form.Label>\n            <Form.Control type=\"text\" name=\"name\" placeholder=\"名前\" isInvalid={errorMessages.length > 0} defaultValue={defaultValue}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nexport const PasswordFormGroup = ({\n    className = \"\",\n    style = \"\",\n    defaultValue = \"\",\n    errorMessages = []\n}) => {\n    return (\n        <Form.Group controlId=\"passwordForm\" className={className} style={{...style}}>\n            <Form.Label>パスワード</Form.Label>\n            <Form.Control type=\"password\" name=\"password\" placeholder=\"パスワード\" isInvalid={errorMessages.length > 0}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nexport const PasswordConfirmationFormGroup = ({\n    className = \"\",\n    style = \"\",\n    defaultValue = \"\",\n    errorMessages = []\n}) => {\n    return (\n        <Form.Group controlId=\"passwordConfirmationForm\" className={className} style={{...style}}>\n            <Form.Label>パスワード確認</Form.Label>\n            <Form.Control type=\"password\" name=\"password_confirmation\" placeholder=\"もう一度パスワードを入力してください\" isInvalid={errorMessages.length > 0}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\n\nexport class ProfileImageFormGroup extends React.Component {\n    \n    state = {\n        uploadFileImage : this.props.defaultValue,\n        transParentProfile : false\n    }\n    \n    render() {\n        return(\n            <Form.Group controlId=\"signUpImageForm\">\n                <Form.Control style={{display:'none'}} type=\"file\" name=\"image\"   isInvalid={this.props.errorMessages.length > 0} onChange={(e) => {\n                    const fileReader = new FileReader()\n                    const input = e.currentTarget.files[0]\n                    fileReader.onload = e => {\n                        this.setState({\n                            uploadFileImage: e.target.result\n                        })\n                    }\n                    input ? fileReader.readAsDataURL(input) : this.setState({uploadFileImage:null})\n                }}/>\n                <Transparent\n                    frontComponent = {\n                        <img\n                            style={{\n                                backgroundColor:this.state.uploadFileImage ? \"white\" : \"\",\n                            }}　 \n                            onClick={()=>document.getElementById(\"signUpImageForm\").click()}\n                            onMouseOver={() => this.setState({transParentProfile : true})}\n                            onMouseLeave={() => this.setState({transParentProfile: false})}\n                            className=\"mb-2\" \n                            src={this.state.uploadFileImage} \n                            width=\"200px\" \n                            height=\"200px\"\n                        />\n                    }\n                    backComponent = {\n                        <div style={{\n                                fontWeight:\"bold\", \n                                color:\"gray\",\n                                width:'200px'\n                        }}>\n                            プロフィール画像変更\n                        </div>\n                    }\n                    transParent = {this.state.transParentProfile}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                    {this.props.errorMessages.find(e=>e)}\n                </Form.Control.Feedback>\n            </Form.Group>\n        )\n    }\n}","export const FormErrorActionTypes = {\n    SET_ERROR : \"SET_ERROR\",\n    CLEAR_ERROR_BY_NAME : \"CLEAR_ERROR_BY_NAME\"\n}\n\nexport default {\n    setError : ({\n        formName,\n        errorJson\n    }) => {\n        return {\n            type:FormErrorActionTypes.SET_ERROR,\n            formName,\n            errorJson\n        }\n    },\n\n    clearErrorByName : (formName) => {\n        return {\n            type:FormErrorActionTypes.CLEAR_ERROR_BY_NAME,\n            formName,\n            errorJson : {}\n        }\n    }\n}","import { FormErrorActionTypes } from \"./FormErrorActions\"\nimport { LogActionTypes } from \"../logModule/LogActions\"\n\n\nconst initialState = {}\n\nconst getErrorsOf = (state) => (formCategory) => (formName) => {\n    return (state[\"formErrors\"][formCategory] || [])[formName] || []\n}\n\nconst createReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case LogActionTypes.LOG_IN: {\n            return initialState\n        }\n        case FormErrorActionTypes.SET_ERROR :\n        case FormErrorActionTypes.CLEAR_ERROR_BY_NAME : {\n            state[action.formName] = action.errorJson\n            return {\n                ...state\n            }\n        }\n        default : {\n            return state\n        }\n    }\n}\n\nexport default {\n    getErrorsOf,\n    createReducer\n}","import FormErrorReducer from \"./FormErrorReducer\";\nimport FormErrorActions from \"./FormErrorActions\";\n\nexport default {\n    actions : FormErrorActions,\n    reducer : FormErrorReducer\n}","import React from 'react'\nimport {connect} from 'react-redux'\n\nimport { Form, Button } from 'react-bootstrap'\nimport LogModule from '../modules/logModule/LogModule'\nimport { NameFormGroup, PasswordFormGroup } from '../components/UserFormGroups'\nimport FormErrorModule from '../modules/FormErrorModule/FormErrorModule'\n\nexport class LoginForm　extends React.Component {\n\n    componentWillUnmount() {\n        this.props.clearLoginError()\n    }\n\n    render(){\n        return(\n            <Form onSubmit={(formEvent) => {\n                                formEvent.preventDefault()\n                                const input = formEvent.currentTarget\n                                this.props.login({\n                                    input   : input,\n                                    history : this.props.history\n                                })\n                            }}>\n                <NameFormGroup errorMessages={this.props.loginErrorMessages} />\n                <PasswordFormGroup errorMessages={this.props.loginErrorMessages} />\n                <Button variant=\"primary\" type=\"submit\">送信</Button>\n            </Form>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state,\n        loginErrorMessages : FormErrorModule.reducer.getErrorsOf(state)(\"loginForm\")(\"messages\")\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        login:({\n            input,\n            history\n        }) => {\n            dispatch(LogModule.actions.execLogin(\n                {\n                    session:{\n                        name    : input.name.value,\n                        password: input.password.value\n                    },\n                    history               \n                }\n            ))\n        },\n        logout:()=> dispatch(LogModule.actions.logout()),\n        clearLoginError : () => {\n            dispatch(FormErrorModule.actions.clearErrorByName(\"loginForm\"))\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(LoginForm)\n","import React from 'react'\nimport { Container, Alert } from 'react-bootstrap'\nimport LoginForm from '../containers/LoginForm'\n\nclass LoginPage extends React.Component {\n    render() {\n        return (\n            <Container>\n                {this.props.location.flash ? \n                    <Alert variant=\"danger\">{this.props.location.flash}</Alert> : \"\"}\n                <strong>ログインページ</strong>\n                <LoginForm history={this.props.history}/>\n            </Container>\n        )\n    }\n}\n\nexport default LoginPage","export const ModalActionTypes = {\n    SHOW_MODAL_OF : \"SHOW_MODAL_OF\",\n    CLOSE_MODAL_OF : \"CLOSE_MODAL_OF\"\n}\n\nexport default {\n    showModalOf : (modalName) => {\n        return {\n            type : ModalActionTypes.SHOW_MODAL_OF,\n            modalName\n        }\n    },\n    closeModalOf : (modalName) => {\n        return {\n            type : ModalActionTypes.CLOSE_MODAL_OF,\n            modalName\n        }\n    }\n}","import { ModalActionTypes } from \"./ModalActions\"\n\nconst initialState = {}\n\nconst getModalStateOf = (state) => (modalName) => {\n    return (state[\"modalStates\"] || {})[modalName]\n}\n\nconst createReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case ModalActionTypes.SHOW_MODAL_OF : {\n            state[action.modalName] = true\n            return {\n                ...state\n            }\n        }\n        case ModalActionTypes.CLOSE_MODAL_OF : {\n            state[action.modalName] = false\n            return {\n                ...state\n            }\n        }\n        default : {\n            return state;\n        }\n    }\n}\n\nexport default {\n    getModalStateOf,\n    createReducer\n}","import ModalActions from \"./ModalActions\";\nimport ModalReducer from \"./ModalReducer\";\n\nexport default {\n    actions : ModalActions,\n    reducer : ModalReducer\n}","import React from 'react'\nimport { Modal, Button, Form, Row, Col } from 'react-bootstrap'\n\n/**\n * Modalで表示するフォーム\n * props {\n *  onsubmit(formEvent),\n *  Header Component,\n *  Body Component,\n *  Footer Component\n * }\n */\nclass ModalForm extends React.Component {\n    render() {\n        return (\n            <Modal show={this.props.show} size=\"md\" centered>\n                <Form onSubmit={(formEvent) => this.props.onSubmit(formEvent)}>\n                    <Modal.Header>\n                        <strong>{this.props.header}</strong>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        {this.props.body}\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        {this.props.footer}\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nexport default ModalForm","import React from 'react'\nimport { Form, NavItem } from 'react-bootstrap'\n\nexport const TitleFormGroup = ({\n    className = \"\",\n    style = \"\",\n    errorMessages = [],\n    defaultValue=\"\"\n}) => {\n    return  (       \n        <Form.Group controlId=\"titleForm\" className={className} style={{...style}}>\n            <Form.Label>タイトル</Form.Label>\n            <Form.Control type=\"text\" name=\"title\" placeholder=\"タイトル\" isInvalid={errorMessages.length > 0} defaultValue={defaultValue}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nexport const DescriptionFormGroup = ({\n    className = \"\",\n    style = \"\",\n    errorMessages = [],\n    defaultValue=\"\"\n\n}) => {\n    return (\n        <Form.Group controlId=\"descriptionForm\" className={className} style={{...style}}>\n            <Form.Label>説明</Form.Label>\n            <Form.Control type=\"text\" name=\"description\" placeholder=\"説明\" isInvalid={errorMessages.length > 0} defaultValue={defaultValue}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}","import React from \"react\"\nimport ModalForm from \"../components/ModalForm\"\nimport { TitleFormGroup, DescriptionFormGroup } from \"../components/TalkRoomFormGroups\"\nimport TalkRoomModule from \"../modules/talkRoomModule/TalkRoomModule\"\nimport { connect } from \"react-redux\"\nimport { Button } from \"react-bootstrap\"\n\nclass UpdateTalkRoomForm extends React.Component {\n    render() {\n        const talkRoom = this.props.getTalkRoomById(this.props.talkRoomId)\n        return (\n            <ModalForm \n                {...this.props}\n                header = {<strong>トークルームをかえる</strong>}\n                body = {<div><TitleFormGroup defaultValue={talkRoom.title}/><DescriptionFormGroup defaultValue={talkRoom.description}/></div>}\n                footer = {\n                    <div>\n                        <Button className=\"mr-2\" type=\"submit\">かえる</Button>\n                        <Button variant=\"secondary\" onClick={this.props.onCancel}>やめる</Button>\n                    </div>\n                }\n                onSubmit = {(e) => {\n                    e.preventDefault()\n                    this.props.updateTalkRoom({\n                        talkRoomId : this.props.talkRoomId,\n                        title : e.currentTarget.title.value,\n                        description : e.currentTarget.description.value\n                    })\n                    this.props.onCancel()\n                }}        \n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getTalkRoomById : (talkRoomId) => TalkRoomModule.reducer.getTalkRoomById(state)(talkRoomId)\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateTalkRoom : ({\n            talkRoomId,\n            title,\n            description\n        }) => {\n            dispatch(TalkRoomModule.actions.execUpdateTalkRoom({\n                talkRoomId,\n                title,\n                description\n            }))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTalkRoomForm)\n\n","import React from \"react\"\nimport { Image, Container } from \"react-bootstrap\"\n\nconst UserProfile = ({\n    className = \"\",\n    style = {},\n    user = {\n        id:0,\n        name:\"\",\n        image: {\n            profile : {\n                url:\"\"\n            }\n        }\n    }\n}) => {\n    return (\n        <Container　className={`${className} d-flex justify-content-center`}>\n            <section id=\"info\">\n                <div id=\"loginUserID\">\n                    <strong style={{borderBottom:\"1px solid gray\"}}>ユーザーID</strong>\n                    <div>{user.self_id}</div>\n                </div>\n                <div id=\"loginUserName\">\n                    <strong style={{borderBottom:\"1px solid gray\"}}>お名前</strong>\n                    <div>{user.name}</div>\n                </div>\n            </section>\n            <Image style={{objectFit:'contain'}} src={user.image.profile.url} />\n        </Container>\n    )\n}\n\nexport default UserProfile","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\nimport { connect } from 'react-redux'\n\n\nconst UserInviteButton = ({\n    userId,\n    talkRoomId,\n    getTalkRoomById,\n    addUserToTalkRoom\n}) => {\n    const userIsAlreadyExist = [...getTalkRoomById(talkRoomId).userIds].some(id => id===userId)\n    if(userIsAlreadyExist) {\n        return <Button variant=\"success\" disabled>すでに参加しています</Button>\n    }\n    return <Button variant=\"success\" onClick={() => {\n        addUserToTalkRoom({\n            userId,\n            talkRoomId\n        })\n    }}>誘う</Button>\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getTalkRoomById : talkRoomId => TalkRoomModule.reducer.getTalkRoomById(state)(talkRoomId),\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addUserToTalkRoom : ({\n            userId,\n            talkRoomId\n        }) => {\n            dispatch(TalkRoomModule.actions.execAddUserToTalkRoom({\n                userId,\n                talkRoomId\n            }))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserInviteButton)","import React from \"react\"\nimport ModalForm from \"../components/ModalForm\"\nimport { IdFormGroup, NameFormGroup } from \"../components/UserFormGroups\"\nimport { Button, Image } from \"react-bootstrap\"\nimport { connect } from \"react-redux\"\nimport TalkRoomModule from \"../modules/talkRoomModule/TalkRoomModule\"\nimport FormErrorModule from \"../modules/FormErrorModule/FormErrorModule\"\nimport UserModule from \"../modules/userModule/UserModule\"\nimport UserProfile from \"../components/UserProfile\"\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\nimport UserInviteButton from \"./UserInviteButton\"\n\n\nclass UserInviteForm extends React.Component {\n\n    checkAlreadyJoined(user) {\n        const alreadyInvited = [this.props.getTalkRoomById(this.props.talkRoomId)].flatMap(room => room.userIds).some(userId => userId === user.id)\n        return alreadyInvited\n    }\n\n    render() {\n        return (\n            <ModalForm\n                {...this.props}\n                header = {<strong>ユーザーを誘う</strong>}\n                body = {\n                    <div>\n                        <IdFormGroup　errorMessages={this.props.userInviteErrorMessages}/>\n                        <NameFormGroup errorMessages={this.props.userInviteErrorMessages}/>\n                        <TransitionGroup>\n                        {[...this.props.searchedUserIds].map(id => this.props.getUserById(id)).filter(e=>e).map((user,index) => {\n                            return (\n                                <CSSTransition key={user.id} classNames=\"fade\" timeout={100}>\n                                    <div>\n                                        <h6 style={{textAlign:\"center\"}}><strong>この人を誘いますか?</strong></h6>\n                                        <UserProfile className=\"mb-2\" user={user} />\n                                        <div className=\"d-flex justify-content-end\">\n                                            <UserInviteButton userId={user.id} talkRoomId={this.props.talkRoomId}/>\n                                        </div>                                    \n                                    </div>\n                                </CSSTransition>\n                            )\n                        })}\n                        </TransitionGroup>\n                    </div>\n                }\n                footer = {\n                    <div>\n                        <Button className=\"mr-2\" type=\"submit\">さがす</Button>\n                        <Button variant=\"secondary\" onClick={()=>{\n                            this.props.onCancel()\n                            this.props.clearSearchedUserIds()\n                            this.props.clearErrorMessages()\n                        }}>やめる</Button>\n                    </div>\n                }\n                onSubmit = {(e) => {\n                    e.preventDefault()\n                    this.props.clearErrorMessages()\n                    this.props.searchUser({\n                        userId : e.currentTarget.id.value,\n                        userName:e.currentTarget.name.value\n                    })\n                }}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state,\n        loginUser : state.logStatus.isLoggedIn,\n        getUserById : userId => UserModule.reducer.getUserById(state)(userId),\n        searchedUserIds : state.users.searchedUserIds,\n        userInviteErrorMessages : FormErrorModule.reducer.getErrorsOf(state)(\"userInviteForm\")(\"messages\")\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        searchUser : ({\n            userId,\n            userName\n        }) => {\n            dispatch(UserModule.actions.execSearchUser({\n                userId,\n                userName\n            }))\n        },\n        clearSearchedUserIds : () => {\n            dispatch(UserModule.actions.clearSearchedUsers())\n        },\n        clearErrorMessages : () => {\n            dispatch(FormErrorModule.actions.clearErrorByName(\"userInviteForm\"))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserInviteForm)","import React from \"react\"\nimport { Dropdown } from \"react-bootstrap\"\nimport TalkRoomModule from \"../modules/talkRoomModule/TalkRoomModule\"\nimport UpdateTalkRoomForm from \"./UpdateTalkRoomForm\"\nimport { connect } from \"react-redux\"\nimport UserInviteForm from \"./UserInviteForm\"\n\n/**\n * オーナー専用のドロップダウンメニューでやんす\n * container componentでやんす\n */\nclass OwnerDropdown extends React.Component {\n\n    state = {\n        userInvideModalShow : false,\n        updateModalShow : false\n    }\n\n    getTalkRoom = (id) => this.props.getTalkRoomById(id)\n\n    render() {\n        return (\n            <Dropdown>\n                <Dropdown.Toggle variant=\"success\">\n                    管理者の特権\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    <Dropdown.Item style={{color:\"blue\"}} onClick={() => this.setState({userInvideModalShow : true})}>誘う</Dropdown.Item>\n                    <Dropdown.Item style={{color:\"orange\"}} onClick={()=>this.setState({updateModalShow : true})}>作り直す</Dropdown.Item>\n                    <Dropdown.Item style={{color:\"red\"}} onClick={()=> {\n                        if(!window.confirm(`${this.getTalkRoom(this.props.talkRoomId).title}を削除しますか?`)){\n                            return\n                        }\n                        this.props.destroyTalkRoom(this.props.talkRoomId)\n                    }}>消す</Dropdown.Item>\n                </Dropdown.Menu>\n                <UserInviteForm talkRoomId={this.props.talkRoomId}\n                                show = {this.state.userInvideModalShow} \n                                onCancel = {() => {\n                                    this.setState({userInvideModalShow:false})\n                                }}/>\n                <UpdateTalkRoomForm talkRoomId={this.props.talkRoomId}\n                                    show = {this.state.updateModalShow}\n                                    onCancel = {() => {\n                                        this.setState({updateModalShow:false})\n                                    }}\n                />\n            </Dropdown>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getTalkRoomById : (id) => TalkRoomModule.reducer.getTalkRoomById(state)(id)\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        destroyTalkRoom : (talkRoomId) => {\n            dispatch(TalkRoomModule.actions.execDeleteTalkRoom(talkRoomId))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OwnerDropdown)","import React from \"react\"\nimport { Card, Button, Row, Dropdown, Image } from \"react-bootstrap\"\nimport { Link } from \"react-router-dom\"\nimport TalkRoomModule from \"../modules/talkRoomModule/TalkRoomModule\"\nimport { connect } from \"react-redux\"\nimport UserModule from \"../modules/userModule/UserModule\"\nimport ModalModule from \"../modules/ModalModule/ModalModule\"\nimport UpdateTalkRoomForm from \"./UpdateTalkRoomForm\"\nimport OwnerDropdown from \"./OwnerDropdown\"\n\nclass TalkRoomCard extends React.Component {\n\n    getTalkRoom = (id) => this.props.getTalkRoomById(id)\n    getUser = (id) => this.props.getUserById(id)\n\n    render() {\n        return (\n            <Card>\n                <Card.Body>\n                    <div className=\"d-flex\" style={{width:\"100%\"}}>\n                        <div className=\"mr-2\" style={{width:\"100%\", overflow:\"auto\"}}>\n                            <Card.Title><strong>{this.getTalkRoom(this.props.id).title}</strong></Card.Title>\n                            <Card.Text>{this.getTalkRoom(this.props.id).description}</Card.Text>\n                        </div>\n                        <Image style={{width:'50px', height:'50px'}} src={this.getUser(this.getTalkRoom(this.props.id).author_id).image.thumb.url}  roundedCircle/>\n                    </div>\n                    <div className=\"d-flex justify-content-end mb-2\">\n                        <Link className=\"btn btn-primary\" to={`/talk_rooms/${this.props.id}`}>入る</Link>\n                    </div>\n                    <div className=\"d-flex justify-content-end\">\n                        {[this.props.readOnly].filter(readOnly => !readOnly).map((readOnly,index) => {\n                            return (\n                               <OwnerDropdown key={index} talkRoomId={this.props.id}/>\n                            )    \n                        })}\n                    </div>\n                </Card.Body>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state : state,\n        getTalkRoomById : (id) => TalkRoomModule.reducer.getTalkRoomById(state)(id),\n        getUserById : (id) => UserModule.reducer.getUserById(state)(id)\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getMembers : (talkRoomId) => {\n            dispatch(TalkRoomModule.actions.execGetTalkRoomUser(talkRoomId))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TalkRoomCard)\n","import React from \"react\"\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\nimport { Col } from \"react-bootstrap\"\nimport TalkRoomCard from \"../containers/TalkRoomCard\"\n\nclass TalkRoomsArea extends React.Component {\n\n    render() {\n        return (\n            <TransitionGroup className=\"row\">\n                {this.props.talkRoomIds.map((talkRoomId,index) => {\n                    return(\n                        <CSSTransition key = {index} timeout={100} classNames=\"fade\">\n                            <Col key={index} md={{span:4}} className=\"mt-2 inline-block\">\n                                <TalkRoomCard   className  =\"col-md-4\"\n                                                id         ={talkRoomId}\n                                                key        ={talkRoomId} \n                                                readOnly   ={this.props.readOnly}\n                                />  \n                            </Col>\n                        </CSSTransition>\n                    )\n                })}\n            </TransitionGroup>\n        )\n    }\n}\n\nexport default TalkRoomsArea","import React from 'react'\nimport ModalForm from '../components/ModalForm'\nimport { connect } from 'react-redux'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\nimport { Button } from \"react-bootstrap\"\nimport { TitleFormGroup, DescriptionFormGroup } from '../components/TalkRoomFormGroups'\n\n\n/**\n * TalkRoomFormGroup + ModalForm\n */\nclass CreateTalkRoomFormComp extends React.Component {\n    render() {\n        return (\n            <ModalForm\n                {...this.props}\n                header = {<strong>トークルームをつくる</strong>}\n                body = {<div><TitleFormGroup/><DescriptionFormGroup/></div>}\n                footer = {\n                    <div>\n                        <Button className=\"mr-2\" type=\"submit\">つくる</Button>\n                        <Button variant=\"secondary\" onClick={this.props.onCancel}>やめる</Button>    \n                    </div>  \n                }\n                onSubmit = {(e) => {\n                    e.preventDefault()\n                    this.props.addTalkRoom({\n                        title : e.currentTarget.title.value,\n                        description : e.currentTarget.description.value,\n                        authorId : this.props.loginUser.id\n                    })\n                    this.props.onCancel()\n                }}\n            />\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        loginUser : state.logStatus.isLoggedIn,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTalkRoom : ({\n            title,\n            description,\n            authorId\n        }) => {\n            dispatch(TalkRoomModule.actions.execAddTalkRoom({\n                title,\n                description,\n                authorId\n            }))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateTalkRoomFormComp)","import React from 'react'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\nimport { connect } from 'react-redux'\nimport { Container, Button } from 'react-bootstrap'\nimport TalkRoomsArea from '../components/TalkRoomsArea'\nimport CreateTalkRoomForm from './CreateTalkRoomForm'\nimport ModalModule from '../modules/ModalModule/ModalModule'\n\n\n\n\nconst TalkRoomAreaLabel = ({\n    userName,\n    text\n}) => {\n    return (\n        <div>\n            <h6 style={{borderBottom:\"1px solid gray\"}}>\n                <strong>{userName}</strong>{text}\n            </h6>\n        </div>\n    )\n}\n\nclass TalkRoomPage extends React.Component {\n\n    state = {\n        createModalShow : false\n    }\n\n    componentDidMount() {\n        this.props.getOwnRooms()\n        this.props.getJoinRooms()\n    }\n    \n    render() {\n        return (\n            <Container>\n                <TalkRoomAreaLabel userName={this.props.loginUser.name} text=\"さんが作成したトークルーム\" />\n                <Button variant=\"primary\" onClick={() => this.setState({createModalShow:true})}>トークルームを追加</Button>\n                <TalkRoomsArea talkRoomIds={this.props.ownRoomIds} />\n                <TalkRoomAreaLabel userName={this.props.loginUser.name} text=\"さんが参加しているトークルーム\" />\n                <TalkRoomsArea talkRoomIds={this.props.joinRoomIds} readOnly/>\n                <CreateTalkRoomForm show={this.state.createModalShow} onCancel={()=> {\n                    this.setState({\n                        createModalShow : false\n                    })\n                }}/>\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state,\n        loginUser : state.logStatus.isLoggedIn,\n        ownRoomIds : TalkRoomModule.reducer.getOwnRoomIds(state),\n        joinRoomIds : TalkRoomModule.reducer.getJoinRoomIds(state),\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getOwnRooms : () => dispatch(TalkRoomModule.actions.execGetOwnRooms()),\n        getJoinRooms : () => dispatch(TalkRoomModule.actions.execGetJoinedRooms()),\n        showModalOf : (modalName) => dispatch(ModalModule.actions.showModalOf(modalName))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TalkRoomPage)\n","import React from 'react'\nimport { Spinner } from 'react-bootstrap';\nimport { connect } from 'react-redux';\n\nexport class Loading extends React.Component {\n    render() {\n        if(!this.props.loading) {\n            return <div></div>\n        }\n        return (\n            <div style={{zIndex:9998,position:\"fixed\"}} id=\"loading\" className=\"d-flex justify-content-center align-items-center h-100 w-100\">\n                <div style={{position:\"absolute\", height:\"100%\", width:\"100%\", backgroundColor:\"gray\", opacity:\"0.5\"}}></div>\n                <div style={{position:\"absolute\", fontWeight:\"bold\", textShadow:\"1px 1px 0 black\", color:\"white\"}} className=\"d-flex flex-column justify-content-center align-items-center\">\n                    <Spinner variant=\"primary\" animation=\"border\"/> \n                    今日もいい天気\n                </div>  \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading : state.loading\n    }\n}\n\nexport default connect(mapStateToProps)(Loading);\n","import React from 'react'\nimport ModalForm from '../components/ModalForm'\nimport { IdFormGroup, NameFormGroup, ProfileImageFormGroup } from '../components/UserFormGroups'\nimport UserModule from '../modules/userModule/UserModule'\nimport { connect } from 'react-redux'\nimport FormErrorModule from '../modules/FormErrorModule/FormErrorModule'\nimport { Button } from 'react-bootstrap'\n\n\nclass UpdateUserForm extends React.Component {\n\n\n    filterChangedParams(currentUser, userParams) {\n        const changedParams = {}\n        Object.keys(userParams).filter((param) => {\n            return currentUser[param] !== userParams[param]\n        }).forEach((param) => {\n            changedParams[param] = userParams[param]\n        })\n        return changedParams\n    }\n\n    filterNotBlankParams(userParams) {\n        const notBlankParams = {}\n        Object.keys(userParams)\n                .filter((param) => userParams[param])\n                .forEach((param) => {\n                    notBlankParams[param] = userParams[param]\n                })\n        return notBlankParams\n    }\n\n    render() {\n        const currentUser = this.props.user\n        return (\n            <ModalForm\n                {...this.props}\n                header={<strong>プロフィール更新</strong>}\n                body={\n                    <div>\n                        <IdFormGroup defaultValue={currentUser.self_id} errorMessages={this.props.getErrorMessagesFromFormName('self_id')}/>\n                        <NameFormGroup defaultValue={currentUser.name} errorMessages={this.props.getErrorMessagesFromFormName('name')}/>\n                        <ProfileImageFormGroup defaultValue={currentUser.image.profile.url} errorMessages={this.props.getErrorMessagesFromFormName('image')}/>\n                    </div>\n                }\n                footer={\n                    <div className='d-flex justify-content-end'>\n                        <Button type='submit' className='mr-2'>更新</Button>\n                        <Button variant='secondary' onClick={() => {\n                            this.props.clearErrorMessages()\n                            this.props.onCancel()\n                        }}>やめる</Button>\n                    </div>\n                }\n                onSubmit={(e) => {\n                    e.preventDefault()\n                    const inputParams = {\n                        self_id: e.currentTarget.id.value,\n                        name: e.currentTarget.name.value,\n                        image: e.currentTarget.image.files[0]\n                    }\n                    const newUserParams = this.filterNotBlankParams(this.filterChangedParams(currentUser, inputParams))\n                    this.props.updateUser({\n                        id: currentUser.id,\n                        ...newUserParams\n                    })\n                }}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        getErrorMessagesFromFormName : (name) => FormErrorModule.reducer.getErrorsOf(state)(\"updateUserForm\")(name)\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateUser : (userParams) => {\n            dispatch(UserModule.actions.execUpdateUser(userParams))\n        },\n        clearErrorMessages : () => {\n            dispatch(FormErrorModule.actions.clearErrorByName(\"updateUserForm\"))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateUserForm)","import React from 'react'\nimport { connect } from 'react-redux'\nimport UserProfile from '../components/UserProfile'\nimport { Button, Container } from 'react-bootstrap'\nimport UpdateUserForm from './UpdateUserForm'\n\nexport class HomePage extends React.Component {\n\n    state = {\n        updateUserModalShow:false\n    }\n\n    render() {\n        return (\n            <Container className=\"justify-content-end\">\n                <UserProfile user={this.props.loginUser} className=\"mb-2\"/>\n                <div className=\"d-flex justify-content-center\">\n                    <Button onClick={() => this.setState({updateUserModalShow:true})}>プロフィールを更新する</Button>\n                </div>\n                <UpdateUserForm user={this.props.loginUser} show={this.state.updateUserModalShow} onCancel={() => this.setState({updateUserModalShow:false})} />\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state,\n        loginUser : state.logStatus.isLoggedIn\n    }\n}\n\nexport default connect(mapStateToProps)(HomePage)\n","import React from 'react'\nimport { Form, Button, Container } from 'react-bootstrap'\nimport UserModule from '../modules/userModule/UserModule'\nimport { connect } from 'react-redux'\nimport { NameFormGroup, PasswordFormGroup, PasswordConfirmationFormGroup, ProfileImageFormGroup } from '../components/UserFormGroups'\nimport FormErrorModule from '../modules/FormErrorModule/FormErrorModule'\n\nclass SignUpForm extends React.Component {\n\n    componentWillUnmount(){\n        this.props.clearErrorMessages()\n    }\n\n    render() {\n        return (\n            <Form onSubmit={(e) => {\n                e.preventDefault()\n                const input=e.currentTarget\n                this.props.signUp({\n                    input,\n                    history : this.props.history\n                })\n            }}>\n                <NameFormGroup errorMessages = {this.props.getErrorMessagesFromFormName(\"name\")}/>\n                <PasswordFormGroup errorMessages = {this.props.getErrorMessagesFromFormName(\"password\")} />\n                <PasswordConfirmationFormGroup errorMessages = {this.props.getErrorMessagesFromFormName(\"password_confirmation\")} />\n                <ProfileImageFormGroup errorMessages = {this.props.getErrorMessagesFromFormName(\"image\")}/>\n                <Button variant=\"primary\" type=\"submit\">送信</Button>\n            </Form>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state : state,\n        getErrorMessagesFromFormName : (name) => FormErrorModule.reducer.getErrorsOf(state)(\"signUpForm\")(name)\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signUp : ({\n            input,\n            history\n        }) => {\n            dispatch(UserModule.actions.execCreateUser({\n                userParams: {\n                    name: input.name.value,\n                    password: input.password.value,\n                    password_confirmation:　input.password_confirmation.value,\n                    image: input.image.files[0]\n                },\n                history\n            }))\n        },\n        clearErrorMessages : () => {\n            dispatch(FormErrorModule.actions.clearErrorByName(\"signUpForm\"))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpForm)","import React from 'react'\nimport { Container} from 'react-bootstrap'\nimport SignUpForm from '../containers/SignUpForm'\n\nclass SignUpPage extends React.Component {\n    render() {\n        return (\n            <Container>\n                <strong>新規登録</strong>\n                <SignUpForm history={this.props.history}/>\n            </Container>\n        )\n    }\n}\n\nexport default SignUpPage","import React, { Component, createContext } from 'react';\n//redux\nimport MessagesPage from './MessagesPage'\n//bootstrap\nimport { Route, Switch, Redirect, BrowserRouter as Router, Link} from 'react-router-dom';\n\nimport Navigation from '../components/Navigation'\nimport LoginRequiredRoute from './LoginRequiredRoute';\nimport LoginPage from '../components/LoginPage';\nimport TalkRoomPage from './TalkRoomPage'\nimport { connect } from 'react-redux';\nimport Loading from './Loading';\nimport LogModule from '../modules/logModule/LogModule';\nimport HomePage from './HomePage';\nimport SignUpPage from '../components/SignUpPage';\n\n\nexport class App extends Component {\n\n  state = {\n    defaultLoaded : false\n  }\n\n  componentDidMount(){\n    this.props.defaultLogin({\n      history : this.props.history,\n      then : () => this.setState({\n        defaultLoaded : true\n      })\n    })\n  }\n\n  render() {\n    if(!this.state.defaultLoaded) {\n        return (\n          <Loading />\n        )\n    }   \n    return (\n      <Router>\n        <Loading />\n        <Navigation>\n          <Link className = \"nav-link\" to=\"/home\">Home</Link>\n          <Link className = \"nav-link\" to=\"/signup\">Sign Up</Link>\n          <Link className = \"nav-link\" to=\"/signin\">Sign In</Link>\n          <Link className = \"nav-link\" to=\"/talk_rooms\">Talk Rooms</Link>\n        </Navigation>\n        <Switch>\n          <Route path=\"/signin\" component={LoginPage}/>\n          <Route path=\"/signup\" component={SignUpPage} />\n          <LoginRequiredRoute exact path=\"/home\" component={HomePage}/>\n          <LoginRequiredRoute exact path=\"/talk_rooms\" component={TalkRoomPage} />\n          <LoginRequiredRoute path=\"/talk_rooms/:id\" component={MessagesPage}/>\n          <Redirect to=\"/home\" />\n        </Switch>\n      </Router>  \n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    defaultLogin:({\n      history,\n      then\n    }) => {\n      dispatch(LogModule.actions.cookieLogin({\n        history,\n        then\n      }))\n    }\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n *　ロード画面の表示などで使う想定。\n *  画面からは呼び出さない想定\n */\nexport const LoadingActionTypes = {\n    START_LOADING:\"START_LOADING\",\n    FINISH_LOADING:\"FINISH_LOADING\"\n}\n\nexport default {\n    startLoading : () => {\n        return {\n            type: LoadingActionTypes.START_LOADING\n        }\n    },\n\n    finishLoading : () => {\n        return {\n            type: LoadingActionTypes.FINISH_LOADING\n        }\n    }\n}","import LoadingActions from \"./LoadingActions\";\nimport LoadingReducer from \"./LoadingReducer\";\n\nexport default {\n    actions : LoadingActions,\n    reducer : LoadingReducer,\n}","import { LoadingActionTypes } from \"./LoadingActions\"\n\n/**\n * loadingStateの数字はロード中プロセスの数を表す\n * 新しく読みこむ場合、loadingState+1\n * 読み込みが終了した場合、loadingState-1\n * START_LOADINGとFINISH_LOADINGは同じ回数だけ呼ばれないといけない\n */\nconst initialState = 0\n\nconst createReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case LoadingActionTypes.START_LOADING : {\n            return state+1\n        }\n        //読み込み中プロセスの数がマイナスにならないように\n        case LoadingActionTypes.FINISH_LOADING : {\n            return Math.max(state-1,0)\n        }\n        default : {\n            return state\n        }\n    }\n}\n\nexport default {\n    createReducer\n}","import LoadingActions from \"./LoadingActions\";\nimport { put, join, fork } from \"redux-saga/effects\";\n\n//saga\nexport function* lockView(){\n    yield put(LoadingActions.startLoading());\n}\n\nexport function* unlockView() {\n    yield put(LoadingActions.finishLoading())\n}\n\n/**\n * 引数のsagaの実行が完了するまで、stateのloadingをtrueにします。\n * @param {*} saga \n */\nexport function wrapSagaWithLoading(saga){\n    return function*(action) {\n        yield put(LoadingActions.startLoading());\n        const argSaga = yield fork(saga, action)\n        yield join(argSaga)\n        yield put(LoadingActions.finishLoading())\n    }\n}","import Axios from \"axios\"\n\n//cookieを使用するための設定\nAxios.defaults.withCredentials = true\n//Axios.defaults.headers.post['Content-Type'] = 'multipart/form-data'\n\nconst createNormalResponse = (response) => {\n    return {\n        isSuccess : !response.data.isFail,\n        isFail    : response.data.isFail,\n        data      : response.data\n    }\n}\n\nconst createErrorResponse = (error) => {\n    return {\n        isError : true,\n        data    : error\n    }\n}\n\nexport default {\n    get : ({\n        url\n    }) => {\n        return Axios.get(url)\n            .then(response => {\n                return createNormalResponse(response)\n            })\n            .catch(error => {\n                return createErrorResponse(error)\n            })\n    },\n    post : ({\n        url,\n        parameter,\n        headers={}\n    }) => {\n        return Axios.post(url, parameter, headers)\n                    .then(response => {\n                        return createNormalResponse(response)\n                    })\n                    .catch(error => {\n                        return createErrorResponse(error)\n                    })\n    },\n\n    put : ({\n        url,\n        parameter,\n    }) => {\n        return Axios.put(url, parameter)\n                    .then(response => {\n                        return createNormalResponse(response)\n                    })\n                    .catch(error => {\n                        return createErrorResponse(error)\n                    })\n    },\n    delete : ({\n        url\n    }) => {\n        return Axios.delete(url)\n                    .then(response => {\n                        return createNormalResponse(response)\n                    })\n                    .catch(error => {\n                        return createErrorResponse(error)\n                    })\n    }\n}","/**\n * APIアクセス時のエラーを処理する\n */\n\nconst handleError = ({\n    error,\n    history\n}) => {\n    if(!error){\n        return \n    }\n    //ネットワークエラー\n    if(!error.response) {\n        alert(\"ネットワークエラーです\")\n        return {\n            message : 'ネットワークエラーです'\n        }\n    }\n    //anauthorizeの時、リダイレクト\n    //今のままだとurlが変わるだけでレンダリングされない\n    //historyモジュールを追加し、BrowserRouterから普通のRouterに修正してみる\n    if(error.response.status === 401) {\n        history.push('/login')\n        return {\n            message : 'ログインしろよ'\n        }\n    }\n    return {\n        message : 'エラーが発生しました'\n    }\n}\n\nexport default handleError\n\n","import LogActions, { LogActionTypes } from \"./LogActions\"\nimport { put, call} from \"redux-saga/effects\"\nimport DataAccessor from \"../DataAccessor\"\nimport handleError from \"../ErrorHandler\"\nimport FormErrorActions from \"../FormErrorModule/FormErrorActions\"\nimport UserActions from \"../userModule/UserActions\"\n\n//saga\nexport function* handleGetDefLoginStart(action) {\n    const accessResult = yield call(DataAccessor.get, {\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/login`\n    })\n\n    if(accessResult.isSuccess) {\n        yield put(UserActions.setUser(accessResult.data))\n        yield put(LogActions.login(accessResult.data))\n    }\n    else {\n        handleError({\n            error   : accessResult.data,\n            history : action.history\n        })   \n    }\n}\n\nexport function* handleGetExecLoginStart(loginAction) {\n    //初期処理\n    const accessResult = yield call(DataAccessor.post,{\n        url       :`${process.env.REACT_APP_BACKEND_ADDRESS}/login`,\n        parameter :loginAction.session,\n    })\n    if(accessResult.isSuccess){\n        alert(`ようこそ${accessResult.data.name}さん!`)\n        yield put(UserActions.setUser(accessResult.data))\n        yield put(LogActions.login(accessResult.data))\n        loginAction.history.push('/home')\n    }\n    if(accessResult.isFail){\n        alert(\"ログインに失敗しました\")\n        yield put(FormErrorActions.setError({\n            formName:\"loginForm\",\n            errorJson: accessResult.data\n        }))\n    }\n    if(accessResult.isError) {\n        handleError({\n            error   : accessResult.data,\n            history : loginAction.history\n        })\n    }\n    loginAction.then();\n}\n\nexport function* handleGetLogoutStart(action) {\n    yield put(LogActions.logout());\n}\n","import DataAccessor from \"../DataAccessor\"\nimport TalkRoomActions from \"./TalkRoomActions\"\nimport { put, call, fork} from \"redux-saga/effects\"\nimport handleError from \"../ErrorHandler\"\nimport UserActions from \"../userModule/UserActions\"\nimport FormErrorActions from \"../FormErrorModule/FormErrorActions\"\n\nconst getOwnRooms = () => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/own`\n    })\n}\n\nconst getJoinRooms = () => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/join`\n    })\n}\n\nconst getAllRooms = () => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms` \n    })\n}\n\n\nconst createTalkRoom = ({\n    title,\n    description,\n    authorId\n}) => {\n    return DataAccessor.post({\n        url       : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms`,\n        parameter : {\n            talkroom : {\n                title,\n                description,\n                author_id   :authorId\n            }\n        } \n    })\n}\n\nconst updateTalkRoom = talkRoom => {\n    return DataAccessor.put({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/${talkRoom.id}`,\n        parameter : {\n            talkroom : talkRoom\n        }\n    })\n}\n\nconst deleteTalkRoom = (talkRoomId) => {\n    return DataAccessor.delete({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/${talkRoomId}`\n    })\n}\n\n//トークルームのメンバー取得\nconst getTalkRoomMembers = (\n    talkRoomId,\n) => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/${talkRoomId}/users`\n    })\n}\n\n//メンバー追加\nconst addMemberToTalkRoom = ({\n    talkRoomId,\n    userId\n}) => {\n    return DataAccessor.post({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/${talkRoomId}/users`,\n        parameter : {\n            user : {\n                id : userId\n            }\n        }\n    })\n}\n\n//saga\nexport function* handleGetOwnRooms(action) {\n    const result = yield call(getOwnRooms)\n    if(result.isSuccess) {\n        yield put(TalkRoomActions.setOwnRooms(result.data))\n        //取得したトークルームのユーザーを設定する\n        for(let room of result.data) {\n            yield fork(handleGetTalkRoomMembers, TalkRoomActions.execGetTalkRoomUser(room.id))\n        }\n    }\n    if(result.isError) {\n        handleError({\n            error   : result.data,\n            history : action.history\n        })\n    }\n}\n\nexport function* handleGetJoinedTalkRooms(action) {\n    const talkRoomResult = yield call(getJoinRooms)\n    if(talkRoomResult.isSuccess) {\n        yield put(TalkRoomActions.setJoinedRooms(talkRoomResult.data))\n        //取得したトークルームのユーザーを設定する\n        for(let room of talkRoomResult.data) {\n            yield fork(handleGetTalkRoomMembers, TalkRoomActions.execGetTalkRoomUser(room.id))\n        }\n    }\n    if(talkRoomResult.isFail) {\n        alert('トークルームを取得できませんでした')\n    }\n    if(talkRoomResult.isError) {\n        handleError({\n            error   : talkRoomResult.data,\n            history : action.history\n        })\n    }\n}\n\nexport function* handleAddTalkRoom(action) {\n    const addTalkRoomResult = yield call(createTalkRoom, {\n        title       : action.title,\n        description : action.description,\n        authorId    : action.authorId\n    })\n    if(addTalkRoomResult.isSuccess) {\n        yield put(TalkRoomActions.addTalkRoom(addTalkRoomResult.data))\n    }\n    if(addTalkRoomResult.isFail) {\n        alert('トークルームを追加できませんでした')\n    }\n    if(addTalkRoomResult.isError) {\n        handleError({\n            error   : addTalkRoomResult.data,\n            history : action.history\n        })\n    }\n}\n\nexport function* handleUpdateTalkRoom(action) {\n    const updateTalkRoomResult = yield call(updateTalkRoom, {\n        id : action.talkRoomId,\n        title : action.title,\n        description : action.description,\n    })\n    if(updateTalkRoomResult.isSuccess) {\n        yield put(TalkRoomActions.updateTalkRoom({\n            talkRoomId : action.talkRoomId,\n            talkRoom : updateTalkRoomResult.data\n        }))\n    }\n    if(updateTalkRoomResult.isFail) {\n        alert(`${action.talkRoom.title}の更新ができませんでした`)\n    }\n    if(updateTalkRoomResult.isError) {\n        handleError({\n            error : updateTalkRoomResult.error,\n        })\n    }\n}\n\nexport function* handleDeleteTalkRoom(action) {\n    const deleteTalkRoomResult = yield call(deleteTalkRoom, action.talkRoomId)\n    if(deleteTalkRoomResult.isSuccess) {\n        yield put(TalkRoomActions.deleteTalkRoom({\n            talkRoomId : action.talkRoomId\n        }))\n    }\n    if(deleteTalkRoomResult.isFail) {\n        alert(`トークルームを削除できませんでした`)\n    }\n    if(deleteTalkRoomResult.isError) {\n        handleError({\n            error : deleteTalkRoomResult.error,\n            history : action.history\n        })\n    }\n}\n\nexport function* handleGetTalkRoomMembers(action) {\n    const result = yield call(getTalkRoomMembers, action.talkRoomId)\n    if(result.isSuccess) {\n        yield put(TalkRoomActions.addUsersToTalkRoom({\n            talkRoomId : action.talkRoomId,\n            userIds : [...Object.keys(result.data).map(key => result.data[key][\"id\"])]\n        }))\n        yield put(UserActions.setUser(...Object.keys(result.data).map(key => result.data[key])))\n    }\n    if(result.isError) {\n        handleError({\n            error : result.error,\n            history : action.history\n        })\n    }\n}\n\nexport function* handleAddTalkRoomMember(action) {\n    const result = yield call(addMemberToTalkRoom, {talkRoomId:action.talkRoomId, userId:action.userId})\n    if(result.isSuccess) {\n        alert(`${result.data.name}を追加しました`)\n        yield put(UserActions.setUser(result.data))\n        yield put(TalkRoomActions.addUsersToTalkRoom({\n            talkRoomId : action.talkRoomId,\n            userIds : [action.userId]\n        }))\n    }\n    if(result.isFail) {\n        alert(\"そんなユーザーいません\")\n        yield put(FormErrorActions.setError({\n            formName : \"userInviteForm\",\n            errorJson : {\n                messages : [\"このID,名前の組合わせが存在しません\"]\n            }\n        }))\n    }\n    if(result.isError) {\n        handleError({\n            error : result.error,\n            history : action.history\n        })\n    }\n}\n\n\n\n\n","/**\n * socketのクライアント側の設定\n */\n\nimport io from 'socket.io-client'\n\nconsole.log(`socket client connect to ${process.env.REACT_APP_SOCKET_ADDRESS}`)\n\nconst socketClient = io.connect(process.env.REACT_APP_SOCKET_ADDRESS, {path: (process.env.REACT_APP_SOCKET_PATH || '/socket.io')})\n\nexport default socketClient\n","import CurrentRoomStatusActions, {ActionTypes} from \"./CurrentRoomStatusActions\"\nimport Actions from \"./CurrentRoomStatusActions\"\nimport { eventChannel } from \"redux-saga\"\nimport { call, take, put, all } from \"redux-saga/effects\"\nimport socketClient from \"../socketClient\"\nimport TalkRoomActions, { TalkRoomActionTypes } from \"../talkRoomModule/TalkRoomActions\"\nimport UserActions from \"../userModule/UserActions\"\n\n\n\n//saga\n//メッセージ受信用のイベントチャンネル\nfunction* createMessegeReceiveChannel() {\n    //イベントチャンネル：socketClientが受け取ったresponseをemitし、イベント発行\n    return eventChannel(emit => {\n        socketClient.on('receiveMessage', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\n/**\n * socketサーバーからメッセージの追加を通知された時、\n * stateに通知されたメッセージを追加する\n */\nexport function* handleReceiveMessage() {\n    const channel = yield call(createMessegeReceiveChannel)\n    //channelがemitするたびに起動\n    while(true) {\n        const response = yield take(channel)\n        yield put(UserActions.setUser(response.user))\n        yield put(Actions.receiveMessage({\n            roomId    : response.roomId,\n            className : response.className,\n            text      : response.text,\n            user      : response.user\n        }))\n    }\n}\n\n//現在ユーザー取得用のイベントチャンネル\nfunction* createCurrentUsersRecieveChannel() {\n    return eventChannel(emit => {\n        socketClient.on(\"currentUsers\", response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\n/**\n * socketサーバーから現在ユーザーの更新通知を受け取り、\n * TalkRoomのcurrentUserIdsを更新する\n */\nexport function* handleGetCurrentUsers() {\n    const channel = yield call(createCurrentUsersRecieveChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(CurrentRoomStatusActions.refreshCurrentRoomUsers({\n            talkRoomId : response.roomId,\n            userIds : Object.keys(response.users).map(key => response.users[key][\"id\"])\n        }))\n    }\n}\n\n//現在ユーザーステータス取得用のイベントチャンネル\nfunction* createCurrentUserStatusChannel() {\n    return eventChannel(emit => {\n        socketClient.on(\"currentUserStatus\", response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\nexport function* handleGetCurrentUserStatus() {\n    const channel = yield call(createCurrentUserStatusChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(CurrentRoomStatusActions.receiveCurrentUserStatus({\n            talkRoomId : response.roomId,\n            userId : response.userId,\n            status : response.status\n        }))\n    }\n}\n\n/**\n * socketの接続を行い、\n * socketサーバーにトークルームへの参加を通知し、\n * 現在ユーザーの更新を依頼する。\n */\nexport function* handleJoinRoom() {\n    while(true) {\n        //JOIN_ROOMが発行される毎に起動\n        const action = yield take(ActionTypes.JOIN_ROOM)\n        //reconnectイベントに備えることで、サーバーからの切断=>再接続に対応\n        socketClient.on('reconnect', () => {\n            socketClient.emit('rejoinRoom',{user: action.user, roomId:action.roomId})\n            socketClient.emit('currentUsers', action.roomId)\n        })\n        socketClient.connect()\n        socketClient.emit('joinRoom',{user: action.user, roomId:action.roomId})\n        socketClient.emit('currentUsers', action.roomId)\n    }\n}\n\n/**\n * socketサーバーにトークルームからの退出を通知し、\n * 現在ユーザーの更新を依頼する。\n * その後、socketの接続を解除する\n */\nexport function* handleLeaveRoom() {\n    //退出メッセージを受け取るためにイベントチャンネルを設定する\n    while(true) {\n        const action = yield take(ActionTypes.LEAVE_ROOM)\n        socketClient.emit('leaveRoom',{user:action.user, roomId:action.roomId})\n        socketClient.emit('currentUsers', action.roomId)\n        //トークルームの内容をクリアする\n        yield put(Actions.clearMessage(action.roomId))\n        socketClient.disconnect()\n    }\n}\n\n/**\n * サーバーから接続を切断された時、トークルーム一覧画面に移る\n */\nexport function* handleDisconnectedFromServer() {\n    while(true) {\n        const action = yield take(ActionTypes.DISCONNECTED_FROM_SERVER)\n        alert('サーバーから切断されました')\n        action.history.push('/talk_rooms')\n    }\n}\n\n/**\n * socketサーバーにトークルームへのメッセージ追加を通知する\n */\nexport function* handleAddMessage() {\n    while(true) {\n        const action = yield take(ActionTypes.ADD_MESSAGE)\n        socketClient.emit('sendMessage', {\n            roomId    : action.roomId, \n            text      : action.text,\n            user      : action.user\n        })\n    }\n}\n\n/**\n * socketサーバーにユーザーステータスの変化を通知する\n */\nexport function* handleChangeStatus() {\n    while(true) {\n        const action = yield take(ActionTypes.CHANGE_CURRENT_USER_STATUS)\n        socketClient.emit('currentUserStatus', {\n            roomId : action.talkRoomId,\n            userId : action.userId,\n            status : action.status\n        })\n    }\n}\n","import LogActions from \"../logModule/LogActions\"\nimport DataAccessor from \"../DataAccessor\"\nimport { call, put, take } from \"redux-saga/effects\"\nimport handleError from \"../ErrorHandler\"\nimport UserActions from \"./UserActions\"\nimport { eventChannel } from \"redux-saga\"\nimport socketClient from \"../socketClient\"\nimport { handleGetExecLoginStart } from \"../logModule/LogSaga\"\nimport FormErrorActions from \"../FormErrorModule/FormErrorActions\"\n\nconst getSelf = () => {\n    return DataAccessor.get(({\n        url:`${process.env.REACT_APP_BACKEND_ADDRESS}/users/self`\n    }))\n}\n\n/**\n * Tips\n * FormDataで入れ子のデータ構造を送る場合,\n * formData.append(\"hoge[fuga]\", foobar)\n * という書き方でいける\n */\nconst createUser = (\n    userParams\n) => {\n    const formData = new FormData()\n    Object.keys(userParams).forEach(paramName => {\n        formData.append(`user[${paramName}]`, userParams[paramName])\n    })\n    return DataAccessor.post({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/users`,\n        parameter : formData,\n        headers : {\n            'Content-Type' : 'multipart/form-data'\n        }\n    })\n}\n\nconst updateUser = (\n    userParams\n) => {\n    const formData = new FormData()\n    Object.keys(userParams).forEach(paramName => {\n        formData.append(`user[${paramName}]`, userParams[paramName])\n    }) \n    return DataAccessor.put({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/users/${userParams.id}`,\n        parameter : formData,\n        headers : {\n            'Content-Type' : 'multipart/form-data'\n        }\n    })\n}\n\nconst searchUser = ({\n    userId,\n    userName\n}) => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/users/${userId}?name=${userName}`\n    })\n}\n\n\n\n//saga\nexport function* handleGetSelf(action) {\n    const result = yield call(getSelf)\n    if(result.isSuccess) {\n    }\n}\n\n\nexport function* handleCreateUser(action) {\n    const result = yield call(createUser, action.userParams)\n    if(result.isSuccess) {\n        yield put(LogActions.execLogin({\n            session: {\n                name : action.userParams.name,\n                password : action.userParams.password\n            },\n            history : action.history,\n        }))\n    }\n    if(result.isFail) {\n        alert(\"ユーザーを作成できませんでした\")\n        yield put(FormErrorActions.setError({\n            formName : \"signUpForm\",\n            errorJson : result.data\n        }))\n    }\n    if(result.isError) {\n        handleError({\n            error : result.data,\n            history : action.history\n        })\n    }\n}\n\nexport function* handleUpdateUser(action) {\n    console.log(action)\n    const result = yield call(updateUser, action.userParams)\n    if(result.isSuccess) {\n        alert('プロフィールを更新しました。')\n        yield put(UserActions.setUser(result.data))\n        yield put(LogActions.login(result.data))\n    }\n    if(result.isFail) {\n        yield put(FormErrorActions.setError({\n            formName: 'updateUserForm',\n            errorJson : result.data\n        }))\n    }\n    if(result.isError) {\n        handleError({\n            error : result.data,\n        })\n    }\n}\n\nfunction* createCurrentUserReceiveChannel() {\n    return eventChannel(emit => {\n        socketClient.on('currentUsers', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\nexport function* handleGetCurrentRoomUsers() {\n    const channel = yield call(createCurrentUserReceiveChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(UserActions.setUser(...Object.keys(response.users).map(key => response.users[key])))\n    }\n}\n\nexport function* handleExecSearchUser(action) {\n    const searchResult = yield call(searchUser, {\n        userId : action.userId,\n        userName : action.userName\n    })\n    if(searchResult.isSuccess) {\n        yield put(UserActions.setSearchedUsers(searchResult.data))\n    }\n    if(searchResult.isFail) {\n        alert(\"ユーザーが見つかりませんでした\")\n        yield put(UserActions.setSearchedUsers())\n        yield put(FormErrorActions.setError({\n            formName : \"userInviteForm\",\n            errorJson : searchResult.data\n        }))\n    }\n    if(searchResult.isError) {\n        handleError({\n            error : searchResult.data\n        })\n    }\n}\n","\n/**\n * ActionTypeとSagaを結びつける\n */\nimport { all, takeEvery, put, join, fork } from \"redux-saga/effects\";\nimport * as loadingSaga from \"./loadingModule/LoadingSaga\"\nimport { LogActionTypes } from \"./logModule/LogActions\";\nimport * as logSaga from \"./logModule/LogSaga\";\nimport { TalkRoomActionTypes } from \"./talkRoomModule/TalkRoomActions\";\nimport * as talkRoomSaga from \"./talkRoomModule/TalkRoomSaga\"\nimport * as talkRoomMessageSaga from \"./currentRoomStatusModule/CurrentRoomStatusSaga\"\nimport * as userSaga from \"./userModule/UserSaga\"\nimport { UserActionTypes } from \"./userModule/UserActions\";\n\nfunction* initialize(action) {\n    const login = yield fork(logSaga.handleGetDefLoginStart, action)\n    yield join(login)\n    const ownRooms = yield fork(talkRoomSaga.handleGetOwnRooms, action)\n    const joinRooms = yield fork(talkRoomSaga.handleGetJoinedTalkRooms, action)\n    yield join(ownRooms)\n    yield join(joinRooms)\n    action.then()\n}\n\nfunction* login(action) {\n    const login = yield fork(logSaga.handleGetExecLoginStart, action)\n    yield join(login)\n    const ownRooms = yield fork(talkRoomSaga.handleGetOwnRooms, action)\n    const joinRooms = yield fork(talkRoomSaga.handleGetJoinedTalkRooms, action)\n    yield join(ownRooms)\n    yield join(joinRooms)\n    action.then()\n}\n\n\nconst logSagas = [\n    takeEvery(LogActionTypes.DEF_LOG_IN, loadingSaga.wrapSagaWithLoading(initialize)),\n    takeEvery(LogActionTypes.EXEC_LOG_IN, loadingSaga.wrapSagaWithLoading(login)),\n    takeEvery(LogActionTypes.LOG_OUT, logSaga.handleGetLogoutStart),\n]\n\nconst talkRoomSagas = [\n    //talkRoomSaga\n    takeEvery(TalkRoomActionTypes.EXEC_GET_OWN_ROOMS,talkRoomSaga.handleGetOwnRooms),\n    takeEvery(TalkRoomActionTypes.EXEC_GET_JOINED_ROOMS, talkRoomSaga.handleGetJoinedTalkRooms),\n    takeEvery(TalkRoomActionTypes.EXEC_ADD_ROOM, talkRoomSaga.handleAddTalkRoom),\n    takeEvery(TalkRoomActionTypes.EXEC_UPDATE_ROOM, talkRoomSaga.handleUpdateTalkRoom),\n    takeEvery(TalkRoomActionTypes.EXEC_DELETE_ROOM, talkRoomSaga.handleDeleteTalkRoom),\n    takeEvery(TalkRoomActionTypes.EXEC_GET_TALKROOM_MEMBERS, talkRoomSaga.handleGetTalkRoomMembers),\n    takeEvery(TalkRoomActionTypes.EXEC_ADD_USER_TO_TALKROOM, talkRoomSaga.handleAddTalkRoomMember)\n]\n\nconst talkRoomMessageSagas = [\n    talkRoomMessageSaga.handleJoinRoom(),\n    talkRoomMessageSaga.handleLeaveRoom(),\n    talkRoomMessageSaga.handleReceiveMessage(),\n    talkRoomMessageSaga.handleAddMessage(),\n    talkRoomMessageSaga.handleGetCurrentUsers(),\n    talkRoomMessageSaga.handleGetCurrentUserStatus(),\n    talkRoomMessageSaga.handleChangeStatus()\n]\n\nconst userSagas = [\n    takeEvery(UserActionTypes.EXEC_CREATE_USER, loadingSaga.wrapSagaWithLoading(userSaga.handleCreateUser)),\n    takeEvery(UserActionTypes.EXEC_SEARCH_USER, loadingSaga.wrapSagaWithLoading(userSaga.handleExecSearchUser)),\n    takeEvery(UserActionTypes.EXEC_UPDATE_USER, loadingSaga.wrapSagaWithLoading(userSaga.handleUpdateUser)),\n    userSaga.handleGetCurrentRoomUsers()\n]\n\n//rootSaga\nexport default function* rootSaga(){\n    yield all([\n        ...logSagas,\n        ...talkRoomSagas,\n        ...talkRoomMessageSagas,\n        ...userSagas\n    ])\n}","\nimport {createStore, combineReducers, applyMiddleware} from 'redux'\n\nimport TalkRoomMessageModule from './modules/currentRoomStatusModule/CurrentRoomStatusModule'\n\n\n//saga\nimport createSagaMiddleware from 'redux-saga'\nimport LogModule from './modules/logModule/LogModule'\nimport TalkRoomModule from './modules/talkRoomModule/TalkRoomModule'\nimport UserModule from './modules/userModule/UserModule'\nimport LoadingModule from './modules/loadingModule/LoadingModule'\nimport RootSaga from './modules/RootSaga'\nimport FormErrorModule from './modules/FormErrorModule/FormErrorModule'\nimport ModalModule from './modules/ModalModule/ModalModule'\n\n//middleware\nconst sagaMiddleware = createSagaMiddleware()\n//store setting\nconst store = createStore(\n    combineReducers({\n        currentRoomStatus : TalkRoomMessageModule.reducer.createMessageReducer, \n        logStatus : LogModule.reducer.creatReducer,\n        talkRooms : TalkRoomModule.reducer.createReducer,\n        loading   : LoadingModule.reducer.createReducer,\n        users     : UserModule.reducer.createReducer,\n        formErrors: FormErrorModule.reducer.createReducer,\n        modalStates : ModalModule.reducer.createReducer\n    }), \n    applyMiddleware(sagaMiddleware)\n)\n\n//run sagas\nsagaMiddleware.run(RootSaga)\n\nexport default store;\n","const history = require(\"history\").createBrowserHistory()\nexport default history;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\n//redux\nimport {Provider} from 'react-redux'\nimport history from './modules/HistoryModule';\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App  history={history}/>\n    </Provider>, \n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}