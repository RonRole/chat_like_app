{"version":3,"sources":["components/ModalForm.js","components/ChatLikeAppNavigation.js","modules/logModule/LogActions.js","modules/CreateReducerFactory.js","modules/logModule/LogReducer.js","modules/logModule/LogModule.js","containers/DefaultLoginChecker.js","containers/Loading.js","components/SidebarBody.js","components/SidebarCursor.js","components/Sidebar.js","components/Transparent.js","containers/CurrentUserStatusThumb.js","containers/CurrentUsersContainer.js","modules/currentRoomStatusModule/CurrentRoomStatusActions.js","modules/currentRoomStatusModule/CurrentRoomStatusReducer.js","modules/currentRoomStatusModule/CurrentRoomStatusModule.js","components/UserMessage.js","containers/CurrentMessagesContainer.js","containers/CurrentMessageFormContainer.js","modules/messageImageModule/MessageImageActions.js","modules/messageImageModule/MessageImageReducer.js","modules/messageImageModule/MessageImageModule.js","containers/MessageImageSendField.js","containers/CurrentMessageImageModalForm.js","containers/CurrentMessageImageFormShowButton.js","components/GoogleMap.js","containers/CurrentUsersMapContainer.js","modules/userPositionModule/UserPositionActions.js","modules/userPositionModule/UserPositionReducer.js","modules/userPositionModule/UserPositionModule.js","containers/CurrentRoomUserTracer.js","modules/soundModule/SoundActions.js","containers/BgmModalForm.js","containers/BgmModalFormShowButton.js","containers/CurrentRoom.js","containers/CurrentRoomTranslateModal.js","components/CurrentRoomPage.js","containers/LoginRequiredRoute.js","modules/FormErrorModule/FormErrorActions.js","modules/FormErrorModule/FormErrorReducer.js","modules/FormErrorModule/FormErrorModule.js","components/UserFormGroups.js","containers/LoginForm.js","components/LoginPageForm.js","components/LoginPageTitle.js","components/WrapWithFlashMessage.js","components/LoginPage.js","modules/talkRoomModule/TalkRoomActions.js","modules/userModule/UserActions.js","modules/userModule/UserReducer.js","modules/userModule/UserModule.js","modules/talkRoomModule/TalkRoomReducer.js","modules/talkRoomModule/TalkRoomModule.js","components/TalkRoomFormGroups.js","containers/CreateTalkRoomForm.js","containers/UpdateTalkRoomForm.js","containers/UserInviteButton.js","components/UserProfile.js","containers/UserInviteForm.js","containers/RemoveTalkRoomMemberModal.js","containers/OwnerDropdown.js","containers/TalkRoomMembersModal.js","containers/TalkRoomCard.js","components/SeparateForPagination.js","containers/TalkRoomsArea.js","containers/TalkRoomAreaLabel.js","components/TalkRoomPage.js","containers/LoginUserProfile.js","containers/UpdateUserForm.js","containers/UpdateLoginUserForm.js","containers/LogoutButton.js","components/HomePage.js","components/SignUpPageTitle.js","containers/SignUpForm.js","components/SignUpPageForm.js","components/SignUpPage.js","components/ChatLikeAppRouter.js","components/App.js","serviceWorker.js","modules/loadingModule/LoadingActions.js","modules/loadingModule/LoadingReducer.js","modules/loadingModule/LoadingModule.js","modules/loadingModule/LoadingSaga.js","modules/DataAccessor.js","modules/errorCodeModule/ErrorCodeActions.js","modules/logModule/LogSaga.js","modules/talkRoomModule/TalkRoomSaga.js","modules/socketClient.js","modules/currentRoomStatusModule/CurrentRoomStatusSaga.js","modules/userModule/UserSaga.js","modules/errorCodeModule/ErrorCodeSaga.js","modules/messageImageModule/MessageImageSaga.js","modules/soundModule/SoundSaga.js","modules/userPositionModule/UserPositionSaga.js","modules/RootSaga.js","modules/errorCodeModule/ErrorCodeReducer.js","modules/errorCodeModule/ErrorCodeModule.js","modules/translateModeModule/TranslateModeReducer.js","modules/translateModeModule/TranslateModule.js","modules/soundModule/SoundReducer.js","store.js","modules/HistoryModule.js","index.js","modules/translateModeModule/TranslateModeActions.js"],"names":["ModalForm","show","onSubmit","name","children","size","centered","formEvent","defaultProps","e","console","log","Header","Body","Footer","ChatLikeAppNavigation","Navbar","collapseOnSelect","expand","bg","variant","sticky","Brand","Toggle","Collapse","Nav","this","props","React","Component","LogActionTypes","EXEC_DEF_LOG_IN","FINISH_DEF_LOG_IN","EXEC_LOG_IN","LOG_IN","EXEC_LOG_OUT","LOG_OUT","execLogin","session","password","history","then","type","cookieLogin","finishDefLogin","login","loginUser","execLogout","logout","createReducerFactory","initialState","actionHandler","state","action","handler","TRY_LOG_IN","defaultLoginFinished","loginErrorMessages","creatReducer","actions","LogActions","reducer","DefaultLoginChecker","dispatch","useDispatch","useSelector","logStatus","useEffect","LogModule","Loading","loading","className","Spinner","animation","SidebarBody","SidebarCursor","onClickCursor","pointRightSide","onClick","Sidebar","useState","open","setOpen","CSSTransition","in","classNames","timeout","Transparent","Front","transParent","Back","CurrentUserStatusThumb","talkRoomId","userId","currentRoomStatus","thisRoomStatus","default","userStatus","users","user","currentUserStatus","Image","src","image","thumb","url","fluid","CurrentUsersContainer","Container","TransitionGroup","currentUserIds","flat","map","index","key","CurrentRoomStatusActionTypes","joinRoom","roomId","messageType","messageClass","text","receiveJoinRoom","leaveRoom","receiveLeaveRoom","addMessage","sendMessage","receiveMessage","setCurrentUserIds","clearMessage","execRefreshCurrentRoomUserIds","receiveRefreshCurrentRoomUsers","userIds","changeCurrentUserStatus","status","receiveCurrentUserStatus","submitTextMessage","translateMode","changeTranslation","changeRoomBgm","bgmSrcUrl","receiveChangeRoomBgm","0","messages","id","room","createMessageReducer","TalkRoomMessageActoins","TalkRoomMessageReducer","MessageTypes","system","Alert","myMessage","userImageUrl","userName","roundedCircle","messageImage","receiveMessageImage","UserMessage","MessageCategory","MessagesContainer","CurrentRoomStatusModule","window","onbeforeunload","document","getElementById","scroll","scrollHeight","filter","message","MessageFormContainer","currentRoom","translateModes","startInputting","finishInputting","Form","preventDefault","TalkRoomMessageModule","currentTarget","inputMessage","value","Control","placeholder","onFocus","onChange","onBlur","required","Button","MessageImageActionTypes","execUploadMessageImage","messageImageParams","execFetchMessageImages","execDeleteMessageImage","messageImageId","addMessageImage","messageImages","clearMessageImage","removeMessageImage","newState","reduce","newMessageImage","messageImageIds","createReducer","MessageImageActions","SendMessageImageField","setUnderMouseImageId","Object","keys","onMouseOver","onMouseLeave","profile","UploadMessageImageFormGroup","Group","MessageImageModule","files","click","CurrentMessageImageModalForm","onCancel","Modal","CurrentMessageImageFormShowButton","messageImageModalShow","setMessageImageModalShow","GoogleApiWrapper","apiKey","process","google","position","latitude","longtitude","center","lat","lng","longitude","initialCenter","title","CurrentUsersMapContainer","userPositions","UserPositionActionTypes","changeCurrentUserPosition","receiveChangeCurrentUserPosition","createUserPositionReducer","UserPositionActions","UserPositionReducer","CurrentRoomUserTracer","navigator","geolocation","getCurrentPosition","UserPositionModule","coords","err","code","watchPosition","SoundActionTypes","startBgm","uploadBgm","bgmParams","addBgms","bgms","require","ListGroup","BgmModalFormTitle","BgmList","values","bgm","Item","BgmUploadFormGroup","currentTargetFile","SoundActions","replace","BgmModalForm","BgmModalFormShowButton","bgmModalShow","setBgmModalShow","CurrentRoom","roomsStatus","talkRooms","thisRoom","ownRooms","joinRooms","Row","CurrentMessagesContainer","CurrentMessageFormContainer","CurrentRoomTranslateModal","safeCurrentRoomStatus","selectedTranslateMode","setTranslateMode","active","modeName","modeTitle","description","modeId","withRouter","match","translateModalShow","setTranslateModalShow","to","params","LoginRequiredRoute","exact","path","component","render","pathname","flash","FormErrorActionTypes","setError","formName","errorJson","clearErrorByName","FormErrorActions","getErrorsOf","formCategory","UserFormGroups","style","defaultValue","errorMessages","controlId","Label","isInvalid","length","Feedback","find","ProfileImageFormGroup","uploadFileImage","setUploadFileImage","transParentProfile","setTransParentProfile","display","fileReader","FileReader","input","onload","target","result","readAsDataURL","backgroundColor","width","height","fontWeight","color","formErrors","loginForm","FormErrorModule","NameFormGroup","PasswordFormGroup","Col","xs","span","offset","sm","md","lg","LoginPageTitle","location","LoginPage","TalkRoomActionTypes","execGetOwnRooms","execGetJoinedRooms","execAddTalkRoom","authorId","execUpdateTalkRoom","execDeleteTalkRoom","execAddUserToTalkRoom","execRemoveUsersFromTalkRoom","execGetTalkRoomAuthor","execGetTalkRoomMembers","setOwnRooms","setJoinedRooms","addTalkRoom","talkRoom","updateTalkRoom","deleteTalkRoom","addMembersToTalkRoom","removeUsersFromTalkRoom","UserActionTypes","execGetSelf","execCreateUser","userParams","execUpdateUser","execSearchUser","userSelfId","setCreateFormErrors","errors","clearCreateFormErrors","setSearchedUsers","clearSearchedUsers","setUser","defaultUser","searchedUserIds","UserActions","getUserById","isAuthorOf","author_id","isCurrentUser","created_at","updated_at","user_ids","newOwnRooms","newJoinRooms","beforeuser_ids","Set","beforeUserIds","afterUserIds","delete","TalkRoomActions","getOwnRoomIds","getJoinRoomIds","getTalkRoomById","getAllUsers","UserModule","getAuthor","getMembers","TalkRoomFormGroups","CreateTalkRoomForm","toCloseModalAction","thisFormError","createTalkRoomForm","inputs","TalkRoomModule","Title","Description","UpdateTalkRoomForm","updateTargetRoom","updateTalkRoomFormErrors","UserInviteButton","inviteRoom","some","disabled","UserProfile","without","profileContents","self_id","borderBottom","objectFit","activeKeys","includes","UserInviteForm","userInviteFormError","IdFormGroup","textAlign","RemoveTalkRoomMembersModal","selectedUserIds","addSelectedUserId","parseInt","UpdateTalkRoomItem","updateRoomModalShow","setUpdateRoomModalShow","Dropdown","UserInviteItem","inviteUserModalShow","setUserInviteModalShow","DeleteTalkRoomItem","talkRoomsStatus","defaultRoom","confirm","RemoveUserForm","removeUserModalShow","changeRemoveUserModalShow","OwnerDropdown","Menu","TalkRoomMembersModal","TalkRoomParams","Card","Text","CurrentUserThumbs","TalkRoomInformation","TalkRoomCardButtons","showTalkRoomMemberModal","setShowTalkRoomMemberModal","push","TalkRoomCard","readOnly","CurrentRoomStatusActions","_","SeparateForPagination","itemLengthPerPage","selectedPage","WrapWith","Array","OwnRoomsArea","ownRoomArray","setSelectedPage","ownRoom","Pagination","Math","ceil","pageNumber","JoinRoomsArea","joinRoomArray","TalkRoomsArea","TalkRoomAreaLabel","OwnRoomLabel","JoinRoomLabel","createModalShow","changeCreateModalShow","LoginUserProfile","UpdateUserForm","updateTargetUser","updateUserFormErrors","currentUser","inputParams","newUserParams","param","UpdateLoginUserForm","LogoutButton","HomePage","showUpdateUserForm","setUpdateUserFormShowing","SignUpPageTitle","signUpFormErrors","signUpForm","password_confirmation","PasswordConfirmationFormGroup","SignUpPage","ChatLikeAppRouter","TalkRoomPage","CurrentRoomPage","App","Boolean","hostname","LoadingActionTypes","startLoading","finishLoading","max","LoadingActions","addLoadingStateUntilSagaFinish","argSagas","put","saga","fork","currentSaga","join","f","Axios","defaults","withCredentials","handleData","promise","response","isSuccess","data","isFail","createNormalResponse","catch","error","isError","createErrorResponse","get","post","parameter","headers","ErrorCodeActionTypes","execHandleError","errorResult","errorCode","handleError","handleGetDefLoginStart","handleGetExecLoginStart","handleGetExecLogoutStart","call","DataAccessor","accessResult","ErrorCodeActions","loginAction","alert","logoutAction","handleGetOwnRooms","handleGetJoinedTalkRooms","handleAddTalkRoom","handleUpdateTalkRoom","handleDeleteTalkRoom","handleAddTalkRoomMember","handleRemoveUsersFromTalkRoom","getOwnRooms","getJoinRooms","createTalkRoom","talkroom","addMemberToTalkRoom","talkRoomResult","addTalkRoomResult","updateTalkRoomResult","deleteTalkRoomResult","createReceiveJoinChannel","createReceiveLeaveChannel","createMessageReceiveChannel","createCurrentUserReceiveChannel","createCurrentUserStatusReceiveChannel","createCurrentUserPositionReceiveChannel","createReceiveRoomBgmChannel","socketClient","io","connect","eventChannel","emit","on","close","clientToServerMethods","connectToServer","disconnectToServer","disconnect","tellJoinedRoom","fetchCurrentRoomUsers","tellLeavedRoom","tellCurrentRoomUsersChanged","tellCurrentRoomUserStatusChanged","tellCurrentRoomUserPositionChanged","tellGetCurrentRoomUserPosition","tellChangeRoomBgm","serverToClientMothods","readyToRecconect","handleReceiveJoinRoom","handleReceiveLeaveRoom","handleReceiveMessage","handleGetCurrentUsers","handleFetchCurrentRoomUsers","handleGetCurrentUserStatus","handleJoinRoom","handleLeaveRoom","handleSendMessage","handleChangeStatus","handleSubmitTextMessage","handleReceiveChangeRoomBgm","channel","take","Actions","translate","handleGetRelatedUsers","handleCreateUser","handleUpdateUser","handleGetCurrentRoomUsers","handleExecSearchUser","createUser","formData","paramName","append","FormData","updateUser","searchUser","relatedUsers","searchResult","errorCodeToAction","putAction","handleClearMessageImage","handleFetchLoginUsersMessageImages","handleUploadMessageImage","fetchUsersMessageImages","createMessageImage","uploadResult","playBGM","pauseBGM","playAddMessageSound","playReceiveMessageSound","playJoinRoomSound","playLeaveRoomSound","uploadBGM","fetchUserBgms","Audio","play","currentTime","pause","sound","loop","handleReceiveCurrentUserPosition","handleTellChangeUserPosition","rootSaga","logSagas","takeEvery","loadingSaga","logSaga","messageImageSagas","messageImageSaga","talkRoomSagas","talkRoomSaga","talkRoomMessageSagas","talkRoomMessageSaga","userSagas","userSaga","userPositionSagas","userPositionSaga","ErrorCodeSagas","errorSaga","SoundSagas","soundSaga","takeLatest","all","errorCodeHandler","errorHandler","ErrorCodeReducer","simple","nomlishLv1","nomlishLv2","nomlishLv3","nomlishLv4","TranslateModeActionTypes","CHANGE_TRANSLATE_MODE_DESCRIPTION","descripition","TranslateModeActions","TranslateModeReducer","newBgm","sagaMiddleware","createSagaMiddleware","store","createStore","combineReducers","SoundReducer","LoadingModule","errorCodes","ErrorCodeModule","TranslateModule","applyMiddleware","run","RootSaga","createBrowserHistory","ReactDOM","serviceWorker","ready","registration","unregister","changeDescription"],"mappings":"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","file":"static/js/main.8f8f68c8.chunk.js","sourcesContent":["import React from 'react'\nimport { Modal,　Form } from 'react-bootstrap'\n\n/**\n * Modalで表示するフォーム\n * props {\n *  onsubmit(formEvent),\n *  Header Component,\n *  Body Component,\n *  Footer Component\n * }\n */\n\nconst ModalForm = ({\n    show,\n    onSubmit,\n    name,\n    children\n}) => (\n    <Modal show={show} size=\"md\" centered>\n        <Form onSubmit={(formEvent) => onSubmit(formEvent)} name={name}>\n            {children}\n        </Form>\n    </Modal>\n)\n\nModalForm.defaultProps = {\n    show : false,\n    name : '',\n    onSubmit : (e) => {\n        console.log('please set onSubmit event')\n    }\n}\n\nModalForm.Header = ({\n    children = []\n}) => (\n    <Modal.Header>\n        {children}\n    </Modal.Header>\n)\n\nModalForm.Body = ({\n    children = []\n}) => (\n    <Modal.Body>\n        {children}\n    </Modal.Body>\n)\n\nModalForm.Footer = ({\n    children = []\n}) => (\n    <Modal.Footer>\n        {children}\n    </Modal.Footer>\n)\n\nexport default ModalForm\n    \n","import React from 'react'\nimport { Navbar, Nav } from 'react-bootstrap';\n\nclass ChatLikeAppNavigation extends React.Component {\n    render() {\n        return (\n            <Navbar collapseOnSelect expand=\"sm\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\n                <Navbar.Brand>CHAT LIKE APP</Navbar.Brand>\n                <Navbar.Toggle />\n                <Navbar.Collapse>\n                    <Nav>\n                        {this.props.children}\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        )\n    }\n}\n\nexport default ChatLikeAppNavigation;","export const LogActionTypes = {\n    EXEC_DEF_LOG_IN:\"EXEC_DEF_LOG_IN\",\n    FINISH_DEF_LOG_IN:\"FINISH_DEF_LOG_IN\",\n    EXEC_LOG_IN:\"EXEC_LOG_IN\",\n    LOG_IN:\"LOG_IN\",\n    EXEC_LOG_OUT:'EXEC_LOG_OUT',\n    LOG_OUT:\"LOG_OUT\",\n}\n\nexport default {\n    execLogin:({\n        session  ={name:\"\",password:\"\"},\n        history  ={},\n        then     =()=>console.log(\"tryed to login\")\n    }) => {\n        return {\n            type     :LogActionTypes.EXEC_LOG_IN,\n            session,\n            history,\n            then\n        }\n    },\n    cookieLogin:() => {\n        return {\n            type    : LogActionTypes.EXEC_DEF_LOG_IN,\n        }\n    },\n    finishDefLogin:() => {\n        return {\n            type : LogActionTypes.FINISH_DEF_LOG_IN\n        }\n    },\n\n    login: (loginUser) => {\n        return {\n            type     :LogActionTypes.LOG_IN,\n            loginUser\n        }\n    },\n    execLogout : ({history={}}) => {\n        return {\n            type : LogActionTypes.EXEC_LOG_OUT,\n            history\n        }\n    },\n    logout: () => {\n        return {\n            type:LogActionTypes.LOG_OUT\n        }\n    },\n}\n","const createReducerFactory = (initialState, actionHandler) => {\n    return (state=initialState, action) => {\n        const handler = actionHandler[action.type]\n        if(handler) {\n            return handler(state, action)\n        }\n        return state\n    }\n}\n\nexport default createReducerFactory","import { LogActionTypes } from \"./LogActions\"\nimport createReducerFactory from \"../CreateReducerFactory\"\n\n//Reducers\nconst initialState = {\n    //セッションによるログインを行なったかどうか\n    defaultLoginFinished : false,\n    //ログインしているユーザー\n    loginUser : null,\n}\n\nconst actionHandler = {}\nactionHandler[LogActionTypes.TRY_LOG_IN] = (state) => {\n    return {\n        ...state\n    }\n}\nactionHandler[LogActionTypes.FINISH_DEF_LOG_IN] = (state) => {\n    return {\n        ...state,\n        defaultLoginFinished : true\n    }\n}\nactionHandler[LogActionTypes.LOG_IN] = (state, action) => {\n    return {\n        ...state,\n        loginUser:action.loginUser,\n        loginErrorMessages : []\n    }\n}\nactionHandler[LogActionTypes.LOG_OUT] = (state) => {\n    return {\n        ...state,\n        loginUser:false,\n        loginErrorMessages : []\n    }\n}\n\nconst creatReducer = createReducerFactory(initialState, actionHandler)\n\nexport default {\n    creatReducer\n}","import LogReducer from \"./LogReducer\";\nimport LogActions from \"./LogActions\";\n\nexport default {\n    actions: LogActions,\n    reducer: LogReducer,\n}","import React, {useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport LogModule from '../modules/logModule/LogModule'\n\n\n/**\n * デフォルトログイン(セッションが残っているときに、その情報を利用してログインする)を行うコンポーネント\n * デフォルトログインの状態によって以下に分岐する\n * 完了している => 子要素を表示する\n * 完了していない => 真っ白\n */\nconst DefaultLoginChecker = ({\n  children\n}) => {\n  const dispatch = useDispatch()\n  const defaultLoginFinished = useSelector(state=> state.logStatus.defaultLoginFinished)\n  useEffect(() => {\n      dispatch(LogModule.actions.cookieLogin()) \n    }, [])\n  return defaultLoginFinished ? <div>{children}</div> : <div></div>\n}\n\nexport default DefaultLoginChecker","import React from 'react'\nimport { Spinner } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\n\n/**\n * stateのloadingが有効な時、画面一杯に広がるローディング画面を表示します\n */\nconst Loading = () => {\n    const loadingState = useSelector(state=>state.loading)\n\n    return loadingState === 0 ? <div></div> : (\n        <div className=\"loading d-flex justify-content-center align-items-center position-fixed h-100 w-100\">\n            <div className='loading_background position-absolute h-100 w-100'></div>\n            <div className=\"loading_item position-absolute d-flex flex-column justify-content-center align-items-center\">\n                <Spinner variant=\"primary\" animation=\"border\"/> \n                読み込み中です...\n            </div> \n        </div>\n    )\n}\nexport default Loading\n","import React from 'react'\nimport { Nav } from 'react-bootstrap'\n\n\n\nconst SidebarBody = ({\n    children=[],\n}) => {\n    return (\n        <div className='h-100 sidebar_body'>\n            <nav className='navbar navbar-expand-sm navbar-dark bg-dark h-100'>\n                <Nav className='sidebar_items navbar-nav h-100'>\n                    {children}\n                </Nav>\n            </nav>\n        </div>\n    )\n}\n\n\nexport default SidebarBody","import React from 'react'\nimport { Nav } from 'react-bootstrap'\n\nconst SidebarCursor = ({\n    onClickCursor,\n    pointRightSide\n}) => (\n    <div className='sidebar_cursor pointer' onClick={onClickCursor}>\n        <nav className='navbar navbar-dark bg-dark h-100 d-flex justify-content-center'>\n            <Nav className='navbar-nav'>\n                <a className='nav-link'>{pointRightSide ? '▶︎' : '◀︎'}</a>\n            </Nav>\n        </nav>\n    </div>\n)\n\nSidebarCursor.defaultProps = {\n    onClickCursor : () => console.log('cursor clicked'),\n    pointRightSide : true\n}\n\nexport default SidebarCursor","import React, { useState } from 'react'\nimport SidebarBody from './SidebarBody'\nimport SidebarCursor from './SidebarCursor'\nimport { CSSTransition } from 'react-transition-group'\n\nconst Sidebar = ({\n    children\n}) => {\n    const [open, setOpen] = useState(false)\n    return (\n        <div className='sidebar'>\n            <CSSTransition in={open} classNames='slide' timeout={0}>\n                <div className='sidebar_open d-flex position-fixed h-100'>\n                    <SidebarBody>\n                        {children}\n                    </SidebarBody>\n                    <SidebarCursor onClickCursor={() => setOpen(!open)} pointRightSide={!open}/>\n                </div>\n            </CSSTransition>\n        </div>\n    )\n}\n\nexport default Sidebar","import React from 'react'\n/**\n * マウスホバーされた時に、前面に配置されたコンポーネントを透過し、\n * 後ろに配置されたコンポーネントを表示するコンポーネントです。\n * topComponent:前面に配置するコンポーネント\n * behindComponent:背面に配置するコンポーネント\n */\nconst Transparent = ({\n    children = [],\n    className\n}) => {\n    return (\n        <div className={`transparent ${className}`}>\n            {children}\n        </div>                \n    )\n}\n\nTransparent.Front = ({\n    children,\n    transParent = false\n}) => (\n    <div className={`front ${transParent ? 'opacity' : ''}`}>\n        {children}\n    </div>\n)\n\nTransparent.Back = ({\n    children\n}) => (\n    <div className='back'>\n        {children}\n    </div>\n)\n\nexport default Transparent","import React from 'react'\nimport { Image } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\nimport Transparent from '../components/Transparent'\n\nconst CurrentUserStatusThumb = ({\n    talkRoomId,\n    userId\n}) => {\n    const currentRoomStatus = useSelector(state=>state.currentRoomStatus)\n    const thisRoomStatus = currentRoomStatus[talkRoomId] || currentRoomStatus.default\n\n    const userStatus = useSelector(state=>state.users)\n    const user = userStatus[userId] || userStatus[0]\n\n    return (\n        <Transparent>\n            <Transparent.Front transParent={thisRoomStatus.currentUserStatus[userId]}>\n                <Image  className=\"mr-2 mb-2\" \n                        src={user.image.thumb.url} \n                        fluid\n                />\n            </Transparent.Front>\n            <Transparent.Back>\n                {thisRoomStatus.currentUserStatus[userId]}\n            </Transparent.Back>                                        \n        </Transparent>  \n    )\n} \n\nexport default CurrentUserStatusThumb","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport CurrentUserStatusThumb from './CurrentUserStatusThumb'\n\n\n\nconst CurrentUsersContainer = ({\n    talkRoomId\n}) => {\n    const currentRoomStatus = useSelector(state=>state.currentRoomStatus)\n    const thisRoomStatus = currentRoomStatus[talkRoomId] || currentRoomStatus.default\n    return (\n        <Container className='current_users_container mb-2'>\n            <h6><strong>今いる人たち</strong></h6>\n            <TransitionGroup className='d-flex'>\n                {[thisRoomStatus.currentUserIds].flat().map((userId,index) => {\n                    return (\n                        <CSSTransition key={index} timeout={100} classNames=\"fade\">\n                            <CurrentUserStatusThumb talkRoomId={talkRoomId} userId={userId} />     \n                        </CSSTransition>\n                    )\n                })}\n            </TransitionGroup>\n        </Container>\n    )\n}\nexport default CurrentUsersContainer","//actionTypes\nexport const CurrentRoomStatusActionTypes = {\n    JOIN_ROOM                   : \"JOIN_ROOM\",\n    RECEIVE_JOIN_ROOM           : \"RECEIVE_JOIN_ROOM\",\n    LEAVE_ROOM                  : \"LEAVE_ROOM\",\n    RECEIVE_LEAVE_ROOM          : \"RECEIVE_LEAVE_ROOM\",\n    DISCONNECTED_FROM_SERVER    : \"DISCONNECTED_FROM_SERVER\",\n    ADD_MESSAGE                 : \"ADD_MESSAGE\",\n    SEND_MESSAGE                : \"SEND_MESSAGE\",\n    RECEIVE_MESSAGE             : \"RECEIVE_MESSAGE\",\n    SET_CURRENT_USER_IDS        : \"SET_CURRENT_USER_IDS\",\n    CLEAR_MESSAGE               : \"CLEAR_MESSAGE\",\n    \n    EXEC_REFRESH_CURRENT_ROOM_USERS : \"EXEC_REFRESH_CURRENT_ROOM_USERS\",\n    RECEIVE_REFRESH_CURRENT_ROOM_USERS  : \"RECEIVE_REFRESH_CURRENT_ROOM_USERS\",\n\n    CHANGE_CURRENT_USER_STATUS  : \"CHANGE_CURRENT_USER_STATUS\",\n    RECEIVE_CURRENT_USER_STATUS : 'RECEIVE_CURRENT_USER_STATUS',\n\n    SUBMIT_TEXT_MESSAGE         : \"CHANGE_NOMLISH\",\n    CHANGE_TRANSLATION          : \"CHANGE_TRANSLATION\",\n\n    CHANGE_ROOM_BGM : \"CHANGE_ROOM_BGM\",\n    RECEIVE_CHANGE_ROOM_BGM : \"RECEIVE_CHANGE_ROOM_BGM\"\n}\n\n//actionCreators\nconst joinRoom = ({\n    roomId,\n    messageType = 'text',\n    messageClass = 'receiveMessage',\n    user,\n    text,\n}) => {\n    return {\n        type   : CurrentRoomStatusActionTypes.JOIN_ROOM,\n        user,\n        roomId,\n        messageType,\n        messageClass,\n        text\n    }\n}\n\nconst receiveJoinRoom = ({\n    roomId,\n    messageType = 'text',\n    messageClass = 'receiveMessage',\n    user,\n    text,\n}) => {\n    return {\n        type   : CurrentRoomStatusActionTypes.RECEIVE_JOIN_ROOM,\n        user,\n        roomId,\n        messageType,\n        messageClass,\n        text\n    }\n}\n\nconst leaveRoom = ({\n    roomId,\n    user,\n    messageType = 'text',\n    messageClass = 'receiveMessage',\n    text,\n}) => {\n    return {\n        type : CurrentRoomStatusActionTypes.LEAVE_ROOM,\n        user,\n        roomId,\n        messageType,\n        messageClass,\n        text,\n    }\n}\n\nconst receiveLeaveRoom = ({\n    roomId,\n    user,\n    messageType = 'text',\n    messageClass = 'receiveMessage',\n    text,\n}) => {\n    return {\n        type : CurrentRoomStatusActionTypes.RECEIVE_LEAVE_ROOM,\n        user,\n        roomId,\n        messageType,\n        messageClass,\n        text,\n    }\n}\n\nconst addMessage = ({\n    roomId,\n    messageType = 'text',\n    messageClass = 'receiveMessage',\n    user,\n    text,\n}) => {\n    return {\n        type     : CurrentRoomStatusActionTypes.ADD_MESSAGE,\n        roomId,\n        messageClass,\n        messageType,\n        user,\n        text\n    }\n}\n\nconst sendMessage = ({\n    roomId,\n    messageType = 'text',\n    messageClass = 'receiveMessage',\n    user,\n    text\n}) => {\n    return {\n        type : CurrentRoomStatusActionTypes.SEND_MESSAGE,\n        roomId,\n        messageClass,\n        messageType,\n        user,\n        text\n    }\n}\n\nconst receiveMessage = ({\n    roomId,\n    user,\n    messageType,\n    messageClass,\n    text\n}) => {\n    return {\n        type     : CurrentRoomStatusActionTypes.RECEIVE_MESSAGE,\n        roomId,\n        user,\n        messageType,\n        messageClass,\n        text\n    }\n}\n\nconst setCurrentUserIds = (...users) => {\n    return {\n        type : CurrentRoomStatusActionTypes.SET_CURRENT_USER_IDS,\n        users\n    }\n} \n\nconst clearMessage = (roomId) => {\n    return {\n        type : CurrentRoomStatusActionTypes.CLEAR_MESSAGE,\n        roomId\n    }\n}\n\nconst execRefreshCurrentRoomUserIds = ({\n    talkRoomId\n}) => {\n    return {\n        type : CurrentRoomStatusActionTypes.EXEC_REFRESH_CURRENT_ROOM_USERS,\n        talkRoomId\n    }\n}\n\nconst receiveRefreshCurrentRoomUsers = ({\n    talkRoomId,\n    userIds\n}) => {\n    return {\n        type : CurrentRoomStatusActionTypes.RECEIVE_REFRESH_CURRENT_ROOM_USERS,\n        talkRoomId,\n        userIds\n    }\n}\n\nconst changeCurrentUserStatus = ({\n    talkRoomId,\n    userId,\n    status\n}) => {\n    return {\n        type: CurrentRoomStatusActionTypes.CHANGE_CURRENT_USER_STATUS,\n        talkRoomId,\n        userId,\n        status\n    }\n}\n\nconst receiveCurrentUserStatus = ({\n    talkRoomId,\n    userId,\n    status\n}) => {\n    return {\n        type: CurrentRoomStatusActionTypes.RECEIVE_CURRENT_USER_STATUS,\n        talkRoomId,\n        userId,\n        status\n    }\n}\n\nconst submitTextMessage = ({\n    roomId,\n    user,\n    text,\n    translateMode\n}) => {\n    return {\n        type     : CurrentRoomStatusActionTypes.SUBMIT_TEXT_MESSAGE,\n        roomId,\n        user,\n        text,\n        translateMode\n    }\n}\n\nconst changeTranslation = ({\n    talkRoomId,\n    translateMode\n}) => {\n    return {\n        type : CurrentRoomStatusActionTypes.CHANGE_TRANSLATION,\n        talkRoomId,\n        translateMode\n    }\n}\n\nconst changeRoomBgm = ({\n    talkRoomId,\n    bgmSrcUrl\n}) => {\n    return {\n        type : CurrentRoomStatusActionTypes.CHANGE_ROOM_BGM,\n        talkRoomId,\n        bgmSrcUrl\n    }\n}\n\nconst receiveChangeRoomBgm = ({\n    talkRoomId,\n    bgmSrcUrl\n}) => {\n    return {\n        type : CurrentRoomStatusActionTypes.RECEIVE_CHANGE_ROOM_BGM,\n        talkRoomId,\n        bgmSrcUrl\n    }\n}\n\nexport default {\n    joinRoom,\n    receiveJoinRoom,\n    leaveRoom,\n    receiveLeaveRoom,\n    addMessage,\n    sendMessage,\n    receiveMessage,\n    setCurrentUserIds,\n    clearMessage,\n\n    execRefreshCurrentRoomUserIds,\n    receiveRefreshCurrentRoomUsers,\n\n    changeCurrentUserStatus,\n    receiveCurrentUserStatus,\n    \n    submitTextMessage,\n    changeTranslation,\n\n    changeRoomBgm,\n    receiveChangeRoomBgm\n}","import {CurrentRoomStatusActionTypes} from \"./CurrentRoomStatusActions\"\nimport { LogActionTypes } from \"../logModule/LogActions\"\nimport createReducerFactory from \"../CreateReducerFactory\"\n\n/**\n * トークルームのid : メッセージ一覧\n */\nconst initialState = {\n    default: {\n        translateMode : 'simple',\n        currentUserIds:[],\n        currentUserStatus:{\n            0 : ''\n        },\n        messages:[]\n    }\n}\n\n/**\n * CurrentRoomStatusReducer用のactionHandler\n */\nconst actionHandler = {}\n\nactionHandler[CurrentRoomStatusActionTypes.CHANGE_TRANSLATION] = (state, action) => {\n    state[action.talkRoomId] = state[action.talkRoomId] || {...initialState.default}\n    state[action.talkRoomId].translateMode = action.translateMode\n    return {\n        ...state,\n    }\n}\n\nactionHandler[LogActionTypes.LOG_IN] = () => initialState\n\nactionHandler[CurrentRoomStatusActionTypes.JOIN_ROOM] =\nactionHandler[CurrentRoomStatusActionTypes.RECEIVE_JOIN_ROOM] = \nactionHandler[CurrentRoomStatusActionTypes.RECEIVE_LEAVE_ROOM] =\nactionHandler[CurrentRoomStatusActionTypes.ADD_MESSAGE] = \nactionHandler[CurrentRoomStatusActionTypes.RECEIVE_MESSAGE] = (state, action) => {\n    state[action.roomId] = state[action.roomId] || {...initialState.default}\n    state[action.roomId]['messages'] = [\n        ...state[action.roomId]['messages'],\n        {\n            messageType  : action.messageType,\n            messageClass : action.messageClass,\n            userId       : action.user.id,\n            text         : action.text\n        }\n    ]\n    return {\n        ...state\n    }\n} \n\nactionHandler[CurrentRoomStatusActionTypes.CLEAR_MESSAGE] = (state, action) => {\n    state[action.roomId]['messages'] = []\n    return {\n        ...state\n    } \n}\n\nactionHandler[CurrentRoomStatusActionTypes.RECEIVE_REFRESH_CURRENT_ROOM_USERS] = (state,action) => {\n    state[action.talkRoomId] = state[action.talkRoomId] || {...initialState.default}\n    state[action.talkRoomId]['currentUserIds'] = [...action.userIds]\n    return {\n        ...state\n    }\n}\n\nactionHandler[CurrentRoomStatusActionTypes.CHANGE_CURRENT_USER_STATUS] = \nactionHandler[CurrentRoomStatusActionTypes.RECEIVE_CURRENT_USER_STATUS] = (state,action) => {\n    const room = state[action.talkRoomId] || {...initialState.default}\n    room['currentUserStatus'] = room['currentUserStatus'] || {}\n    room['currentUserStatus'][action.userId] = action.status\n    return {\n        ...state\n    }\n}\n\nexport default {\n    createMessageReducer: createReducerFactory(initialState, actionHandler)\n}\n\n","import TalkRoomMessageActoins from \"./CurrentRoomStatusActions\";\nimport TalkRoomMessageReducer from \"./CurrentRoomStatusReducer\";\n\nexport default {\n    actions:TalkRoomMessageActoins,\n    reducer:TalkRoomMessageReducer,\n}","import { Image, Alert } from \"react-bootstrap\";\nimport React from 'react'\n\nconst MessageTypes = {}\n\nMessageTypes.text = {}\nMessageTypes.text.system = ({\n    text,\n}) => (\n    <Alert variant='warning' className='col-sm-6 offset-sm-3 text-center'>{text}</Alert>\n)\n\nMessageTypes.text.joinRoom = ({\n    text,\n}) => (\n    <Alert variant='primary' className='col-sm-6 offset-sm-3 text-center'>{text}</Alert>\n)\nMessageTypes.text.leaveRoom = ({\n    text\n}) => (\n    <Alert variant='danger' className='col-sm-6 offset-sm-3 text-center'>{text}</Alert>\n)\nMessageTypes.text.myMessage = ({\n    userImageUrl,\n    userName,\n    text\n}) => (\n    <>\n        <Image src={userImageUrl} roundedCircle/><strong className=\"ml-2\">{userName}</strong>\n        <Alert variant='success' className='col-sm-6'>{text}</Alert>\n    </>\n)\nMessageTypes.text.receiveMessage = ({\n    userImageUrl,\n    userName,\n    text\n}) => (\n    <>\n        <div className='offset-sm-6'>\n            <Image src={userImageUrl} roundedCircle/><strong className=\"ml-2\">{userName}</strong>\n        </div>\n        <Alert variant='secondary' className='col-sm-6 offset-sm-6'>{text}</Alert>\n    </>\n)\n\nMessageTypes.image = {}\nMessageTypes.image.messageImage = ({\n    userImageUrl,\n    userName,\n    text\n}) => (\n    <div>\n        <div>\n            <Image src={userImageUrl} roundedCircle/><strong className=\"ml-2\">{userName}</strong>\n        </div>\n        <Image src={text} className='mb-2'/>\n    </div>\n)\nMessageTypes.image.receiveMessageImage = ({\n    userImageUrl,\n    userName,\n    text\n}) => (\n    <div className='d-flex justify-content-end offset-sm-6 col-sm-6'>\n        <div>\n            <div>\n                <Image src={userImageUrl} roundedCircle/><strong className=\"ml-2\">{userName}</strong>\n            </div>\n            <Image src={text} className='mb-2'/>\n        </div>\n    </div>\n)\n\n\nconst UserMessage = ({\n    userImageUrl,\n    userName,\n    messageType,\n    messageClass,\n    text\n}) => {\n    const MessageType = MessageTypes[messageType] || MessageTypes.text\n    const MessageCategory = MessageType[messageClass] || MessageTypes.text.receiveMessage\n    return (\n        <MessageCategory userImageUrl={userImageUrl} userName={userName} text={text}/>\n    )\n}\n\nUserMessage.defaultProps = {\n    userImageUrl : '',\n    userName : 'no name',\n    messageType:'test',\n    messageClass:'receiveMessage',\n    text : 'test text'\n}\n\nexport default UserMessage","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector} from 'react-redux'\nimport { Container} from 'react-bootstrap'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport CurrentRoomStatusModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\nimport UserMessage from '../components/UserMessage'\n\nconst MessagesContainer = ({\n    talkRoomId\n}) => {\n    const dispatch = useDispatch()\n    const loginUser = useSelector(state => state.logStatus.loginUser)\n    const users = useSelector(state => state.users)\n    const currentRoomStatus = useSelector(state => state.currentRoomStatus)\n    const messages = (currentRoomStatus[talkRoomId] || currentRoomStatus.default).messages\n    useEffect(() => {\n        dispatch(CurrentRoomStatusModule.actions.joinRoom({\n            user : loginUser,\n            roomId : talkRoomId,\n            messageType : 'text',\n            messageClass:'joinRoom',\n            text : `${loginUser.name}さんが参加しました`\n        }))\n        window.onbeforeunload = () => {\n            dispatch(CurrentRoomStatusModule.actions.leaveRoom({\n                user : loginUser,\n                roomId : talkRoomId,\n                messageType:'text',\n                messageClass:'leaveRoom',\n                text : `${loginUser.name}さんが退出しました`\n            }))\n        }\n        return ()　=> {\n            dispatch(CurrentRoomStatusModule.actions.leaveRoom({\n                user : loginUser,\n                roomId : talkRoomId,\n                messageType:'text',\n                messageClass:'leaveRoom',\n                text : `${loginUser.name}さんが退出しました`\n            }))\n        }\n    }, [])\n    useEffect(() => {\n        const messageArea = document.getElementById(\"messagesContainer\")\n        messageArea.scroll(0, document.getElementById(\"messagesContainer\").scrollHeight)\n    }, [messages])\n\n    return (\n        <Container id = \"messagesContainer\" className='mb-2 pb-4'>\n            <TransitionGroup>\n                {[messages].flat().filter(message=>message).map((message,index) => {\n                    return (\n                        <CSSTransition key={index} timeout= {100} classNames=\"fade\">\n                            <UserMessage\n                                userName={(users[message.userId] || users[0]).name} \n                                userImageUrl={(users[message.userId] || users[0]).image.thumb.url} \n                                text={message.text}\n                                messageType = {message.messageType}\n                                messageClass={message.messageClass}\n                            />\n                        </CSSTransition>\n                    )\n                })}\n            </TransitionGroup>\n        </Container>\n    )\n}\n\nexport default MessagesContainer\n","import React from 'react'\n//import { Actions, Variants } from '../modules/TalkRoomMessageModule'\nimport TalkRoomMessageModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Container, Form, Button　} from 'react-bootstrap'\nimport CurrentRoomStatusModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\n\nconst MessageFormContainer = ({\n    talkRoomId\n}) => {\n    const currentRoomStatus = useSelector(state=>state.currentRoomStatus)\n    const currentRoom = currentRoomStatus[talkRoomId] || currentRoomStatus.default\n    const translateModes = useSelector(state=>state.translateModes)\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    const dispatch = useDispatch()\n    const startInputting = () => dispatch(CurrentRoomStatusModule.actions.changeCurrentUserStatus({\n        talkRoomId,\n        userId : loginUser.id,\n        status : '✍️'\n    }))\n    const finishInputting = () => dispatch(CurrentRoomStatusModule.actions.changeCurrentUserStatus({\n        talkRoomId,\n        userId : loginUser.id,\n        status : ''\n    }))\n    return (\n        <Container>\n            <Form\n                className='row mb-2'\n                onSubmit = {e => {\n                    e.preventDefault()\n                    dispatch(TalkRoomMessageModule.actions.submitTextMessage({\n                        roomId    : talkRoomId,\n                        text      : e.currentTarget.inputMessage.value,\n                        user      : loginUser,\n                        translateMode : translateModes[currentRoom.translateMode]\n                    }))\n                    finishInputting()\n                    e.currentTarget.inputMessage.value=''\n                }\n            }>\n                <Form.Control \n                    className = 'col-10 col-lg-11'\n                    name=\"inputMessage\" \n                    type=\"text\" \n                    placeholder={translateModes[currentRoom.translateMode].placeholder}\n                    onFocus={startInputting}\n                    onChange={startInputting}\n                    onBlur={finishInputting}\n                    required\n                />\n                <Button className='col-2 col-lg-1' variant=\"warning\" type=\"submit\">▶</Button>\n            </Form>\n        </Container>\n    )\n}\n\nexport default MessageFormContainer\n","\nexport const MessageImageActionTypes = {\n    //for saga\n    EXEC_UPLOAD_MESSAGE_IMAGE:'EXEC_UPLOAD_MESSAGE_IMAGE',\n    EXEC_FETCH_MESSAGE_IMAGES:'EXEC_FETCH_MESSAGE_IMAGES',\n    EXEC_DELETE_MESSAGE_IMAGE:'EXEC_DELETE_MESSAGE_IMAGE',\n    //for reducer\n    CLEAR_MESSAGE_IMAGE:'CLEAR_MESSAGE_IMAGE',\n    ADD_MESSAGE_IMAGE:'ADD_MESSAGE_IMAGE',\n    REMOVE_MESSAGE_IMAGE:'REMOVE_MESSAGE_IMAGE'\n}\n\nexport default {\n    execUploadMessageImage : ({\n        userId,\n        messageImageParams\n    }) => {\n        return {\n            type : MessageImageActionTypes.EXEC_UPLOAD_MESSAGE_IMAGE,\n            userId,\n            messageImageParams\n        }\n    },\n    execFetchMessageImages : (userId) => {\n        return {\n            type : MessageImageActionTypes.EXEC_FETCH_MESSAGE_IMAGES,\n            userId\n        }\n    },\n    execDeleteMessageImage : ({\n        messageImageId,\n        userId\n    }) => {\n        return {\n            type : MessageImageActionTypes.EXEC_DELETE_MESSAGE_IMAGE,\n            userId,\n            messageImageId\n        }\n    },\n    addMessageImage : (...messageImages) => {\n        return {\n            type : MessageImageActionTypes.ADD_MESSAGE_IMAGE,\n            messageImages\n        }\n    },\n    clearMessageImage : () => {\n        return {\n            type:MessageImageActionTypes.CLEAR_MESSAGE_IMAGE\n        }\n    },\n    removeMessageImage : (messageImageId) => {\n        return {\n            type: MessageImageActionTypes.REMOVE_MESSAGE_IMAGE,\n            messageImageId\n        }\n    }\n}","import { MessageImageActionTypes } from \"./MessageImageActions\"\nimport createReducerFactory from \"../CreateReducerFactory\"\n\n/**\n * imageId : imageSrcのペア\n */\nconst initialState = {\n    0 : {\n        id:0,\n        src:''\n    }\n}\n\nconst actionHandler={}\nactionHandler[MessageImageActionTypes.ADD_MESSAGE_IMAGE] = (state, action) => {\n    const newMessageImages = action.messageImages.flat()\n    const newState = newMessageImages.reduce((state, newMessageImage) => {\n        state[newMessageImage.id] = newMessageImage\n        return state\n    }, state)\n    return {\n        ...state,\n        ...newState\n    }\n}\nactionHandler[MessageImageActionTypes.CLEAR_MESSAGE_IMAGE] = (state, action) => {\n    return {\n        ...initialState\n    }\n}\nactionHandler[MessageImageActionTypes.REMOVE_MESSAGE_IMAGE] = (state, action) => {\n    const deleteMessageImageIds = [action.messageImageIds].flat()\n    const newState = deleteMessageImageIds.reduce((state,messageImageId) => {\n        delete state[messageImageId]\n        return state\n    }, state)\n    return {\n        ...newState\n    }\n}\n\nconst createReducer = createReducerFactory(initialState, actionHandler)\n\nexport default {\n    createReducer\n}\n\n","import MessageImageActions from \"./MessageImageActions\";\nimport MessageImageReducer from \"./MessageImageReducer\";\n\nexport default {\n    actions:MessageImageActions,\n    reducer:MessageImageReducer\n}","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport Transparent from '../components/Transparent';\nimport { Image } from 'react-bootstrap';\nimport CurrentRoomStatusModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule';\n\nconst SendMessageImageField = ({\n    talkRoomId\n}) => {\n    const [underMouseImageId, setUnderMouseImageId] = useState(0);\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    const messageImages = useSelector(state=>state.messageImages)\n    const dispatch = useDispatch()\n    const safeMessageImages = Object.keys(messageImages).filter(key => messageImages[key] && messageImages[key].src && messageImages[key].src.thumb).map(key=>messageImages[key])\n    return (\n        safeMessageImages.map((messageImage,index) => (\n            <Image\n                key={index}\n                className='mr-1 pointer opacity_under_mouse'\n                src={messageImage.src.thumb.url} \n                onMouseOver={()=>setUnderMouseImageId(messageImage.id)}\n                onMouseLeave={()=>setUnderMouseImageId(0)}\n                onClick={() => {\n                    dispatch(CurrentRoomStatusModule.actions.addMessage({\n                        roomId : talkRoomId,\n                        user : loginUser,\n                        messageType : 'image',\n                        messageClass : 'messageImage',\n                        text:messageImage.src.profile.url\n                    }))\n                    dispatch(CurrentRoomStatusModule.actions.sendMessage({\n                        roomId : talkRoomId,\n                        user : loginUser,\n                        messageType : 'image',\n                        messageClass : 'receiveMessageImage',\n                        text:messageImage.src.profile.url\n                    }))\n                }}\n            />\n        ))\n    )\n}\n\nexport default SendMessageImageField","import React from 'react'\nimport ModalForm from '../components/ModalForm'\nimport { Modal, Button, Form, Image } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport MessageImageModule from '../modules/messageImageModule/MessageImageModule'\nimport SendMessageImageField from './MessageImageSendField'\n\nconst UploadMessageImageFormGroup = () => {\n    const dispatch = useDispatch()\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    return (\n        <Form.Group>\n            <Form.Control \n                className='invisible position-absolute' \n                id='messageImageUploadForm' \n                type='file' \n                name='message_image'\n                onChange={(e) => {\n                    dispatch(MessageImageModule.actions.execUploadMessageImage({\n                        userId:loginUser.id,\n                        messageImageParams: {\n                            src:e.currentTarget.files[0]\n                        }\n                    }))\n                }}\n            />\n            <Button className='ml-2' variant='primary' onClick={() => {\n                document.getElementById('messageImageUploadForm').click()\n            }}>新しい画像をアップロードする</Button>\n        </Form.Group>\n    )\n}\n\nconst CurrentMessageImageModalForm = ({\n    show,\n    talkRoomId,\n    onCancel\n}) => {\n    return (\n        <Modal show={show}>\n            <Modal.Header>\n                <h6><strong>画像を選択してください</strong></h6>\n            </Modal.Header>\n            <Modal.Body className=\"d-flex row m-2 overflow-scroll\">\n                <SendMessageImageField talkRoomId={talkRoomId}/>\n            </Modal.Body>\n            <Modal.Footer>\n                <UploadMessageImageFormGroup />\n                <Button className='ml-2' variant='secondary'　onClick={onCancel}>やめる</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default CurrentMessageImageModalForm","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport CurrentRoomStatusModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\nimport { Button } from 'react-bootstrap'\nimport CurrentMessageImageModalForm from './CurrentMessageImageModalForm'\n\nconst CurrentMessageImageFormShowButton = ({\n    talkRoomId,\n    className\n}) => {\n    const [messageImageModalShow, setMessageImageModalShow] = useState(false)\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    const dispatch = useDispatch()\n\n    return (\n        <>\n            <Button variant='primary' className={className} onClick={()=>{\n                dispatch(CurrentRoomStatusModule.actions.changeCurrentUserStatus({\n                    talkRoomId,\n                    userId : loginUser.id,\n                    status : '🖼'\n                }))\n                setMessageImageModalShow(true)\n            }}>Image</Button>\n            <CurrentMessageImageModalForm  talkRoomId={talkRoomId} show={messageImageModalShow} onCancel={() => {\n                setMessageImageModalShow(false)\n                dispatch(CurrentRoomStatusModule.actions.changeCurrentUserStatus({\n                    talkRoomId,\n                    userId : loginUser.id,\n                    status : ''\n                }))\n            }}/>\n        </>\n    )\n}\n\nexport default CurrentMessageImageFormShowButton\n","import React, { useState, useEffect } from 'react'\nimport { GoogleApiWrapper, Map, Marker } from 'google-maps-react';\n\nconst GoogleMap = ({\n    google,\n    position = {latitude:0, longtitude:0}\n}) => {\n    return (\n        <div id='map'>\n            <Map\n                className = 'map'\n                google = { google }\n                center = {{ lat: position.latitude, lng: position.longitude}}\n                initialCenter = {{lat: position.latitude, lng: position.longitude}}\n            >\n                <Marker\n                    title = { \"現在地\" }\n                    position = {{ lat: position.latitude, lng: position.longitude }}\n                />\n            </Map>\n        </div>\n    )\n}   \n\nexport default GoogleApiWrapper({\n    apiKey:`${process.env.REACT_APP_MAP_API_KEY}`\n})(GoogleMap)","import React from 'react'\n\nimport { Container, Image } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport GoogleMap from '../components/GoogleMap'\n\n\nconst CurrentUsersMapContainer = ({\n    talkRoomId\n}) => {\n    const currentRoomStatus = useSelector(state=>state.currentRoomStatus)\n    const thisRoomStatus = currentRoomStatus[talkRoomId] || currentRoomStatus.default\n    const users = useSelector(state=>state.users)\n    const userPositions = useSelector(state=>state.userPositions)\n    \n    return (\n        <Container className='mb-2'>\n            <TransitionGroup>\n                {[thisRoomStatus.currentUserIds].flat().map((userId,index) => {\n                    return (\n                        <CSSTransition key={index} timeout={100} classNames=\"fade\">\n                            <div className='d-block'>\n                                <div>\n                                    <Image src = {(users[userId] || users[0]).image.thumb.url} roundedCircle/>\n                                    <strong>{(users[userId] || users[0]).name}</strong>\n                                </div>\n                                <GoogleMap position={(userPositions[userId] || userPositions.default)}/>\n                            </div>\n                        </CSSTransition>\n\n                    )\n                })}\n            </TransitionGroup>\n        </Container>\n    )\n}\nexport default CurrentUsersMapContainer","export const UserPositionActionTypes = {\n    CHANGE_CURRENT_USER_POSITION: \"CHANGE_CURRENT_USER_POSITION\",\n    RECEIVE_CURRENT_USER_POSITION:\"RECEIVE_CURRENT_USER_POSITION\",\n}\n\n\nconst changeCurrentUserPosition = ({\n    talkRoomId,\n    userId,\n    position\n}) => {\n    return {\n        type: UserPositionActionTypes.CHANGE_CURRENT_USER_POSITION,\n        talkRoomId,\n        userId,\n        position\n    }\n}\n\nconst receiveChangeCurrentUserPosition = ({\n    talkRoomId,\n    userId,\n    position\n}) => {\n    return {\n        type: UserPositionActionTypes.RECEIVE_CURRENT_USER_POSITION,\n        talkRoomId,\n        userId,\n        position\n    }\n}\n\nexport default {\n    changeCurrentUserPosition,\n    receiveChangeCurrentUserPosition\n}","import createReducerFactory from \"../CreateReducerFactory\"\nimport { CurrentRoomStatusActionTypes } from \"../currentRoomStatusModule/CurrentRoomStatusActions\"\nimport { UserPositionActionTypes } from \"./UserPositionActions\"\n\n\nconst initialState = {\n    default : {\n        latitude:0,\n        longitude:0\n    }\n}\n\nconst actionHandler = {}\nactionHandler[UserPositionActionTypes.CHANGE_CURRENT_USER_POSITION] =\nactionHandler[UserPositionActionTypes.RECEIVE_CURRENT_USER_POSITION] = (state, action) => {\n    state[action.userId] = state[action.userId] || {...initialState}\n    state[action.userId] = action.position\n    return {\n        ...state\n    } \n}\n\nexport default {\n    createUserPositionReducer: createReducerFactory(initialState, actionHandler)\n}","import UserPositionActions from \"./UserPositionActions\";\nimport UserPositionReducer from \"./UserPositionReducer\";\n\nexport default {\n    actions :UserPositionActions,\n    reducer :UserPositionReducer\n}","import React, { useEffect } from 'react'\nimport UserPositionModule from '../modules/userPositionModule/UserPositionModule'\nimport { useSelector, useDispatch } from 'react-redux'\n\n/**\n * ログインユーザーの位置情報を取得し、\n * トークルームに通知する\n */\nconst CurrentRoomUserTracer = ({\n    talkRoomId\n}) => {\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(position=> {\n            dispatch(UserPositionModule.actions.changeCurrentUserPosition({\n                talkRoomId,\n                userId: loginUser.id,\n                position : {\n                    latitude : position.coords.latitude,\n                    longitude : position.coords.longitude\n                }\n            }))\n        }, err => {\n            console.log(`位置情報の取得でエラーが発生しました　code:${err.code} ${err.message}`)\n        })\n        navigator.geolocation.watchPosition(position => {\n            dispatch(UserPositionModule.actions.changeCurrentUserPosition({\n                talkRoomId,\n                userId: loginUser.id,\n                position : {\n                    latitude : position.coords.latitude,\n                    longitude : position.coords.longitude\n                }\n            }))\n        }, err => {\n            console.log(err)\n        })\n    }, [])\n\n    return <></>\n}\n\nexport default CurrentRoomUserTracer","export const SoundActionTypes = {\n    START_BGM : 'START_BGM', \n    EXEC_UPLOAD_BGM : 'UPLOAD_BGM',\n    ADD_BGM : 'ADD_BGM',\n}\n\nexport default {\n    startBgm : ({\n        bgmSrcUrl\n    }) => {\n        return {\n            type : SoundActionTypes.START_BGM,\n            bgmSrcUrl\n        }\n    },\n\n    uploadBgm : ({\n        userId,\n        bgmParams\n    }) => {\n        return {\n            type : SoundActionTypes.EXEC_UPLOAD_BGM,\n            userId,\n            bgmParams\n        }\n    },\n\n    addBgms : ({\n        bgms\n    }) => {\n        return {\n            type : SoundActionTypes.ADD_BGM,\n            bgms\n        }\n    }\n}","import React from 'react'\nimport SoundActions from '../modules/soundModule/SoundActions'\nimport CurrentRoomStatusModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\n\nconst { useSelector, useDispatch } = require(\"react-redux\")\nconst { default: ModalForm } = require(\"../components/ModalForm\")\nconst { Modal, ListGroup, Form, Button } = require(\"react-bootstrap\")\n\nconst BgmModalFormTitle = () => {\n    return (\n        <h6><strong>BGMを選択してください</strong></h6>\n    )\n}\n\nconst BgmList = ({\n    talkRoomId\n}) => {\n    const loginUser = useSelector(state => state.logStatus.loginUser) \n    const dispatch = useDispatch()\n    const bgms = useSelector(state => state.bgms)\n    return (\n        <ListGroup className='w-100'>\n            {Object.values(bgms).filter(bgm => bgm.id > 0).map((bgm, index) => (\n                <ListGroup.Item key={index} className='pointer opacity_iterate w-100' onClick={() => {\n                    dispatch(CurrentRoomStatusModule.actions.addMessage({\n                        roomId : talkRoomId,\n                        messageClass : 'system',\n                        user : loginUser,\n                        text : `${loginUser.name}さんがBGMを流しました`\n                    }))\n                    dispatch(CurrentRoomStatusModule.actions.sendMessage({\n                        roomId : talkRoomId,\n                        messageClass : 'system',\n                        user : loginUser,\n                        text :`${loginUser.name}さんがBGMを流しました`\n                    }))\n                    dispatch(CurrentRoomStatusModule.actions.changeRoomBgm({\n                        talkRoomId,\n                        bgmSrcUrl : bgm.src.url\n                    }))\n                }}>{bgm.title}</ListGroup.Item>\n            ))}\n        </ListGroup>\n    )\n}\n\nconst BgmUploadFormGroup = () => {\n    const dispatch = useDispatch()\n    const loginUser = useSelector(state => state.logStatus.loginUser)\n    return (\n        <Form.Group>\n            <Form.Control\n                className='invisible position-absolute'\n                id='bgmUploadForm'\n                type='file'\n                name='bgm'\n                onChange={(e) => {\n                    const currentTargetFile = e.currentTarget.files[0]\n                    dispatch(SoundActions.uploadBgm({\n                        userId : loginUser.id,\n                        bgmParams : {\n                            src : currentTargetFile,\n                            title :　currentTargetFile.name.replace(/\\.[^.]+$/,'')\n                        }\n                    }))\n                }}\n            />\n            <Button className='ml-2' variant='primary' onClick={() => {\n                document.getElementById('bgmUploadForm').click()\n            }}>新しいBGMをアップロードする</Button>\n        </Form.Group>\n    )\n}\n\nconst BgmModalForm = ({\n    talkRoomId,\n    show = false,\n    onCancel\n}) => {\n    return (\n        <Modal show = {show}>\n            <Modal.Header>\n                <BgmModalFormTitle />\n            </Modal.Header>\n            <Modal.Body className='d-flex row m-2 overflow-scroll'>\n                <BgmList talkRoomId={talkRoomId} />\n            </Modal.Body>\n            <Modal.Footer>\n                <BgmUploadFormGroup />\n                <Button className='ml-2' variant='secondary'　onClick={onCancel}>やめる</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default BgmModalForm","import React, { useState } from 'react'\nimport BgmModalForm from './BgmModalForm'\nimport { Button } from 'react-bootstrap'\n\nconst BgmModalFormShowButton = ({\n    talkRoomId,\n    className\n}) => {\n    const [bgmModalShow, setBgmModalShow] = useState(false)\n    return (\n        <>\n            <Button variant='primary' className={className} onClick={() => {\n                setBgmModalShow(true)\n            }}>BGM</Button>\n            <BgmModalForm talkRoomId={talkRoomId} show={bgmModalShow} onCancel={()=>setBgmModalShow(false)}/>\n        </>\n    )\n}\n\nexport default BgmModalFormShowButton","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Container, Row } from 'react-bootstrap'\nimport CurrentUsersContainer from './CurrentUsersContainer'\nimport CurrentMessagesContainer from './CurrentMessagesContainer'\nimport CurrentMessageFormContainer from './CurrentMessageFormContainer'\nimport CurrentMessageImageFormShowButton from './CurrentMessageImageFormShowButton'\nimport CurrentUsersMapContainer from './CurrentUsersMapContainer'\nimport CurrentRoomUserTracer from './CurrentRoomUserTracer'\nimport BgmModalFormShowButton from './BgmModalFormShowButton'\n\n\n\nconst CurrentRoom = ({\n    talkRoomId\n}) => {\n    const roomsStatus = useSelector(state=>state.talkRooms)\n    const thisRoom = roomsStatus.ownRooms[talkRoomId] || roomsStatus.joinRooms[talkRoomId] || roomsStatus.default\n    return (\n        <Row>\n            <Container className='col-0 col-lg-3'>\n            </Container>\n            <Container className=\"justify-content-center pl-5 pl-sm-0 col-lg-6\">\n                <strong>{thisRoom.title}</strong>\n                <CurrentUsersContainer talkRoomId = {talkRoomId}/>\n                <CurrentMessagesContainer talkRoomId = {talkRoomId} />\n                <CurrentMessageFormContainer talkRoomId = {talkRoomId}/>\n                <CurrentMessageImageFormShowButton className='mr-2' talkRoomId = {talkRoomId} />\n                <BgmModalFormShowButton talkRoomId = {talkRoomId} />\n            </Container>\n            <Container className='col-0 col-lg-3 d-none d-lg-block'>\n                <CurrentUsersMapContainer talkRoomId={talkRoomId} />\n                <CurrentRoomUserTracer talkRoomId={talkRoomId}/>\n            </Container>\n        </Row>\n    )\n}\n\nexport default CurrentRoom","import React, { useState } from 'react'\nimport { Modal, ListGroup, Button } from 'react-bootstrap'\nimport { useSelector, useDispatch } from 'react-redux'\nimport CurrentRoomStatusModule from '../modules/currentRoomStatusModule/CurrentRoomStatusModule'\n/**\n * 送信するときの翻訳モードを選択するためのモーダル\n */\n const CurrentRoomTranslateModal = ({\n    talkRoomId,\n    show,\n    onCancel\n }) => {\n    const currentRoomStatus = useSelector(state => state.currentRoomStatus)\n    const safeCurrentRoomStatus = currentRoomStatus[talkRoomId] || currentRoomStatus.default\n    const translateModes = useSelector(state => state.translateModes)\n    const [selectedTranslateMode, setTranslateMode] = useState(translateModes[safeCurrentRoomStatus.translateMode])\n    const dispatch = useDispatch()\n    return ( \n        <Modal show={show}>\n            <Modal.Header>\n                <h6><strong>翻訳モードを選択してください</strong></h6>\n            </Modal.Header>\n            <Modal.Body>\n                <ListGroup>\n                    {Object.values(translateModes).map((translateMode, index) => (\n                        <ListGroup.Item \n                            className='pointer opacity_iterate'\n                            key = {index}\n                            onClick = {() => setTranslateMode(translateMode)} \n                            active={selectedTranslateMode === translateMode}\n                        >\n                            {translateMode.modeName}\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            </Modal.Body>\n            <Modal.Body>\n                <h6>{selectedTranslateMode.modeTitle}</h6>\n                <div>{selectedTranslateMode.description}</div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant='primary' onClick={() => {\n                    dispatch(CurrentRoomStatusModule.actions.changeTranslation({\n                        talkRoomId,\n                        translateMode: selectedTranslateMode.modeId\n                    }))\n                    onCancel()\n                }}>決定</Button>\n                <Button variant='secondary' onClick={()=>{\n                    setTranslateMode(translateModes[safeCurrentRoomStatus.translateMode])\n                    onCancel()\n                }}>やめる</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n }\n\n\n CurrentRoomTranslateModal.defaultProps = {\n     talkRoomId : 0,\n     show : false,\n     onCancel : () => console.log('please set onCancel function')\n }\n\n export default CurrentRoomTranslateModal\n\n","import React, { useState } from 'react'\nimport Sidebar from './Sidebar'\nimport { Link, withRouter } from 'react-router-dom'\nimport CurrentRoom from '../containers/CurrentRoom'\nimport CurrentRoomTranslateModal from '../containers/CurrentRoomTranslateModal'\n\nconst MessagesPage = ({\n    match\n}) => {\n    const [translateModalShow, setTranslateModalShow] = useState(false) \n    return (\n        <>\n            <Sidebar>\n                <Link className = \"nav-link\" to=\"/talk_rooms\">退出する</Link>\n                <Link className = 'nav-link' to='#' onClick ={() => setTranslateModalShow(true)}>翻訳モード変更</Link>\n            </Sidebar>\n            <CurrentRoom talkRoomId={match.params.id} />\n            <CurrentRoomTranslateModal show = {translateModalShow} talkRoomId={match.params.id} onCancel = {() => setTranslateModalShow(false)} />\n        </>\n    )\n}\n\nexport default withRouter(MessagesPage)\n","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\n/**\n * stateのloginUserが設定されていない場合(=ログインがされていない場合)\n * /signinにリダイレクトするRouteコンポーネント\n */\nconst LoginRequiredRoute = ({\n    exact,\n    path,\n    component\n}) => {\n    const logStatus = useSelector(state => state.logStatus)\n    if(!logStatus.loginUser){\n        return  <Route exact={exact} path={path} render={()=><Redirect to={{\n            pathname:\"/signin\",\n            flash: {\n                message:'ログインしてください',\n                variant:'danger'\n            },\n        }}/>}/>\n    }\n    return <Route exact={exact} path={path} component={component}/>\n}\n\nexport default LoginRequiredRoute\n","export const FormErrorActionTypes = {\n    SET_ERROR : \"SET_ERROR\",\n    CLEAR_ERROR_BY_NAME : \"CLEAR_ERROR_BY_NAME\"\n}\n\nexport default {\n    setError : ({\n        formName,\n        errorJson\n    }) => {\n        return {\n            type:FormErrorActionTypes.SET_ERROR,\n            formName,\n            errorJson\n        }\n    },\n\n    clearErrorByName : (formName) => {\n        return {\n            type:FormErrorActionTypes.CLEAR_ERROR_BY_NAME,\n            formName,\n            errorJson : {}\n        }\n    }\n}","import { FormErrorActionTypes } from \"./FormErrorActions\"\nimport { LogActionTypes } from \"../logModule/LogActions\"\nimport createReducerFactory from \"../CreateReducerFactory\"\n\n\nconst initialState = {\n\n}\n\ninitialState.default = {\n    \"formCategory\" : {\n        \"formName\" : \"\"\n    }\n}\n\nconst getErrorsOf = (state) => (formCategory) => (formName) => {\n    return (state[\"formErrors\"][formCategory] || [])[formName] || []\n}\n\nconst actionHandler = {}\nactionHandler[LogActionTypes.LOG_IN] = () => {\n    return initialState\n}\n\nactionHandler[FormErrorActionTypes.SET_ERROR] = \nactionHandler[FormErrorActionTypes.CLEAR_ERROR_BY_NAME] = (state, action) => {\n    state[action.formName] = action.errorJson\n    return {\n        ...state\n    }\n}\n\nconst createReducer = createReducerFactory(initialState, actionHandler)\n\nexport default {\n    getErrorsOf,\n    createReducer \n}","import FormErrorReducer from \"./FormErrorReducer\";\nimport FormErrorActions from \"./FormErrorActions\";\n\nexport default {\n    actions : FormErrorActions,\n    reducer : FormErrorReducer\n}","import React, { useState } from 'react'\nimport { Form, NavItem } from 'react-bootstrap'\nimport Transparent from './Transparent'\n\nconst UserFormGroups = {}\n\nUserFormGroups.IdFormGroup = ({\n    className = \"\",\n    style = \"\",\n    defaultValue = \"\",\n    errorMessages = [],\n    required = false\n}) => {\n    return (\n        <Form.Group controlId=\"idForm\" className={className} style = {{...style}}>\n            <Form.Label>ユーザーID</Form.Label>\n            <Form.Control type=\"text\" name=\"id\" placeholder=\"ID\" isInvalid={errorMessages.length > 0} defaultValue={defaultValue} required={required}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nUserFormGroups.NameFormGroup = ({\n    className = \"\",\n    style = \"\",\n    defaultValue = \"\",\n    errorMessages = [],\n    required = false\n}) => {\n    return (\n        <Form.Group controlId=\"nameForm\" className={className} style={{...style}}>\n            <Form.Label>名前</Form.Label>\n            <Form.Control type=\"text\" name=\"name\" placeholder=\"名前\" isInvalid={errorMessages.length > 0} defaultValue={defaultValue} required={required}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nUserFormGroups.PasswordFormGroup = ({\n    className = \"\",\n    style = \"\",\n    defaultValue = \"\",\n    errorMessages = [],\n}) => {\n    return (\n        <Form.Group controlId=\"passwordForm\" className={className} style={{...style}}>\n            <Form.Label>パスワード</Form.Label>\n            <Form.Control type=\"password\" name=\"password\" placeholder=\"パスワード\" isInvalid={errorMessages.length > 0}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nUserFormGroups.PasswordConfirmationFormGroup = ({\n    className = \"\",\n    style = \"\",\n    defaultValue = \"\",\n    errorMessages = []\n}) => {\n    return (\n        <Form.Group controlId=\"passwordConfirmationForm\" className={className} style={{...style}}>\n            <Form.Label>パスワード確認</Form.Label>\n            <Form.Control type=\"password\" name=\"password_confirmation\" placeholder=\"もう一度パスワードを入力してください\" isInvalid={errorMessages.length > 0}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nconst ProfileImageFormGroup = ({\n    defaultValue,\n    errorMessages\n}) => {\n    const [uploadFileImage, setUploadFileImage] = useState(defaultValue)\n    const [transParentProfile, setTransParentProfile] = useState(false)\n\n    return (\n        <Form.Group controlId=\"signUpImageForm\">\n            <Form.Control style={{display:'none'}} type=\"file\" name=\"image\" isInvalid={errorMessages.length > 0} onChange={(e) => {\n                const fileReader = new FileReader()\n                const input = e.currentTarget.files[0]\n                fileReader.onload = e => {\n                    setUploadFileImage(e.target.result)\n                }\n                input ? fileReader.readAsDataURL(input) : setUploadFileImage(null)\n            }}/>\n            <Transparent>\n                <Transparent.Front transParent={transParentProfile}>\n                    <img\n                        style={{\n                            backgroundColor:uploadFileImage ? \"white\" : \"\",\n                        }}　 \n                        onClick={()=>document.getElementById(\"signUpImageForm\").click()}\n                        onMouseOver={() => setTransParentProfile(true)}\n                        onMouseLeave={() => setTransParentProfile(false)}\n                        className=\"mb-2\" \n                        src={uploadFileImage} \n                        width=\"200px\" \n                        height=\"200px\"\n                    />\n                </Transparent.Front>\n                <Transparent.Back>\n                    <div className='d-flex align-items-center'\n                        style={{\n                            fontWeight:\"bold\", \n                            color:\"gray\",\n                            height:'200px',\n                            width:'200px',\n                    }}>\n                        <div className = 'w-100'>\n                            プロフィール画像変更\n                        </div>\n                    </div>\n                </Transparent.Back>\n            </Transparent>\n\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nProfileImageFormGroup.defaultProps = {\n    defaultValue : null,\n    errorMessages : []\n}\n\nUserFormGroups.ProfileImageFormGroup = ProfileImageFormGroup\n\nexport default UserFormGroups","import React, { useEffect } from 'react'\nimport {connect, useDispatch, useSelector} from 'react-redux'\nimport { Form, Button } from 'react-bootstrap'\nimport LogModule from '../modules/logModule/LogModule'\nimport FormErrorModule from '../modules/FormErrorModule/FormErrorModule'\nimport { withRouter } from 'react-router-dom'\nimport UserFormGroups from '../components/UserFormGroups'\n\nconst LoginForm = ({\n    history\n}) => {\n    const loginFormError=useSelector(state=>state.formErrors.loginForm)\n    const loginErrorMessages = (loginFormError || {}).messages\n    const dispatch = useDispatch()\n    useEffect(() => {\n        return () => {\n            dispatch(FormErrorModule.actions.clearErrorByName('loginForm'))\n        }\n    }, [])\n    return (\n        <Form onSubmit={(formEvent) => {\n            formEvent.preventDefault()\n            const input = formEvent.currentTarget\n            dispatch(LogModule.actions.execLogin(\n                {\n                    session:{\n                        name    : input.name.value,\n                        password: input.password.value\n                    },\n                    history               \n                }\n            ))\n        }}>\n            <UserFormGroups.NameFormGroup errorMessages={loginErrorMessages} />\n            <UserFormGroups.PasswordFormGroup errorMessages={loginErrorMessages} />\n            <Button variant=\"primary\" type=\"submit\">ログイン</Button>\n        </Form>\n    )\n}\n\nexport default withRouter(LoginForm)\n","import React from 'react'\nimport { withRouter } from \"react-router-dom\"\nimport { Row, Col } from \"react-bootstrap\"\nimport LoginForm from \"../containers/LoginForm\"\n\nconst LoginFormWithRouter = ({\n    history\n}) => (\n    <Row>\n        <Col xs={{span:10, offset:1}} sm={{span:8, offset:2}} md={{span:6,offset:3}} lg={{span:4,offset:4}}>\n            <LoginForm history={history}/>\n        </Col>\n    </Row>\n)\n\nexport default withRouter(LoginFormWithRouter)","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\n\n\nconst LoginPageTitle = () => (\n    <Row>\n        <Col xs={{span:10, offset:1}} sm={{span:8, offset:2}} md={{span:6,offset:3}} lg={{span:4,offset:4}}>\n            <strong>ログインページ</strong>\n        </Col>\n    </Row>\n)\n\nexport default LoginPageTitle","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { Row, Col, Alert } from 'react-bootstrap'\n\nconst WrapWithFlashMessage = ({\n    children,\n    location\n}) => {\n    if(!location.flash){\n        return <div>{children}</div>\n    }\n    return (\n        <div>\n            <Row>\n                <Col xs={{span:10, offset:1}} sm={{span:8, offset:2}} md={{span:6,offset:3}} lg={{span:4,offset:4}}>\n                    <Alert variant={location.flash.variant}>{location.flash.message}</Alert>\n                </Col>\n            </Row>\n            {children}\n        </div>\n    )\n}\n\nexport default withRouter(WrapWithFlashMessage)","import React from 'react'\nimport { Container, Alert, Row, Col } from 'react-bootstrap'\nimport LoginFormWithRouter from './LoginPageForm'\nimport LoginPageTitle from './LoginPageTitle'\nimport WrapWithFlashMessage from './WrapWithFlashMessage'\n\n/**\n * ログインページのデザイン設定・配置を行うコンポーネント\n */\nclass LoginPage extends React.Component {\n    render() {\n        return (\n            <Container>\n                <WrapWithFlashMessage>\n                    <LoginPageTitle />\n                    <LoginFormWithRouter />\n                </WrapWithFlashMessage>\n            </Container>\n        )\n    }\n}\n\n\nexport default LoginPage","export const TalkRoomActionTypes = {\n    //talkRooms\n    EXEC_GET_OWN_ROOMS        : \"GET_OWN_ROOMS\",\n    EXEC_GET_JOINED_ROOMS     : \"GET_JOINED_ROOMS\",\n    EXEC_ADD_ROOM             : \"EXEC_ADD_ROOM\",\n    EXEC_DELETE_ROOM          : \"EXEC_DELETE_ROOM\",\n    EXEC_UPDATE_ROOM          : \"EXEC_UPDATE_ROOM\",\n\n    SET_OWN_ROOMS          : \"SET_OWN_ROOMS\",\n    SET_JOINED_ROOMS       : \"SET_JOINED_ROOMS\",\n    ADD_TALK_ROOM          : \"ADD_TALK_ROOM\",\n    DELETE_TALK_ROOM       : \"DELETE_TALK_ROOM\",\n    UPDATE_TALK_ROOM       : \"UPDATE_TALK_ROOM\",\n\n    //talkRoomUsersSaga\n    EXEC_ADD_USER_TO_TALKROOM : \"EXEC_ADD_USER_TO_TALKROOM\",\n    EXEC_REMOVE_USERS_FROM_TALKROOM : \"EXEC_REMOVE_USERS_FROM_TALKROOM\",\n    REMOVE_USERS_FROM_TALKROOM: \"REMOVE_USERS_FROM_TALKROOM\",\n    EXEC_GET_TALKROOM_AUTHOR  : \"EXEC_GET_TALKROOM_AUTHOR\",\n    EXEC_GET_TALKROOM_MEMBERS : \"EXEC_GET_TALKROOM_MEMBER\",\n    ADD_USERS_TO_TALK_ROOM : \"ADD_USERS_TO_TALK_ROOM\",\n}\n\nexport default {\n    execGetOwnRooms   :(history) => {\n        return {\n            type    : TalkRoomActionTypes.EXEC_GET_OWN_ROOMS,\n            history : history \n        }\n    },\n    execGetJoinedRooms:(history) => {\n        return {\n            type    : TalkRoomActionTypes.EXEC_GET_JOINED_ROOMS,\n            history : history\n        }\n    },\n    execAddTalkRoom:({\n        history,\n        title=\"New Room\",\n        description=\"This is a new talk room\",\n        authorId\n    }) => {\n        return {\n            type:TalkRoomActionTypes.EXEC_ADD_ROOM,\n            history,\n            title,\n            description,\n            authorId,\n        }\n    },\n    execUpdateTalkRoom:({\n        talkRoomId,\n        title,\n        description\n    }) => {\n        return {\n            type : TalkRoomActionTypes.EXEC_UPDATE_ROOM,\n            talkRoomId,\n            title,\n            description,\n        }\n    },\n    execDeleteTalkRoom:(\n        talkRoomId\n    ) => {\n        return {\n            type      : TalkRoomActionTypes.EXEC_DELETE_ROOM,\n            talkRoomId,\n        }\n    },\n\n    execAddUserToTalkRoom:({\n        userId,\n        talkRoomId\n    }) => {\n        return {\n            type : TalkRoomActionTypes.EXEC_ADD_USER_TO_TALKROOM,\n            userId,\n            talkRoomId,\n        }\n    },\n\n    execRemoveUsersFromTalkRoom:({\n        talkRoomId,\n        userIds\n    }) => {\n        return {\n            type : TalkRoomActionTypes.EXEC_REMOVE_USERS_FROM_TALKROOM,\n            userIds,\n            talkRoomId\n        }\n    },\n\n    execGetTalkRoomAuthor: (\n        talkRoomId\n    ) => {\n        return {\n            type : TalkRoomActionTypes.EXEC_GET_TALKROOM_AUTHOR,\n            talkRoomId\n        }\n    },  \n\n    execGetTalkRoomMembers:(\n        talkRoomId\n    ) => {\n        return {\n            type : TalkRoomActionTypes.EXEC_GET_TALKROOM_MEMBERS,\n            talkRoomId,\n        }\n    },\n\n    setOwnRooms   :(talkRooms) => {\n        return {\n            type:TalkRoomActionTypes.SET_OWN_ROOMS,\n            talkRooms,\n        }\n    },\n    setJoinedRooms:(talkRooms) => {\n        return {\n            type:TalkRoomActionTypes.SET_JOINED_ROOMS,\n            talkRooms,\n        }\n    },\n    addTalkRoom:(talkRoom) => {\n        return {\n            type:TalkRoomActionTypes.ADD_TALK_ROOM,\n            talkRoom,\n        }\n    },\n    updateTalkRoom:({\n        talkRoomId,\n        talkRoom\n    })  => {\n        return {\n            type : TalkRoomActionTypes.UPDATE_TALK_ROOM,\n            talkRoomId,\n            talkRoom\n        }\n    },\n    deleteTalkRoom:({\n        talkRoomId\n    }) => {\n        return {\n            type:TalkRoomActionTypes.DELETE_TALK_ROOM,\n            talkRoomId,\n        }\n    },\n\n    addMembersToTalkRoom : ({\n        talkRoomId,\n        userIds\n    }) => {\n        return {\n            type : TalkRoomActionTypes.ADD_USERS_TO_TALK_ROOM,\n            talkRoomId,\n            userIds,\n        }\n    },\n\n    removeUsersFromTalkRoom : ({\n        talkRoomId,\n        userIds\n    }) => {\n        return {\n            type : TalkRoomActionTypes.REMOVE_USERS_FROM_TALKROOM,\n            userIds,\n            talkRoomId\n        }\n    },\n}","export const UserActionTypes = {\n    EXEC_GET_SELF : \"EXEC_GET_SELF\",\n    EXEC_CREATE_USER : \"EXEC_CREATE_USER\",\n    EXEC_UPDATE_USER : \"EXEC_UPDATE_USER\",\n    EXEC_SEARCH_USER : \"EXEC_SEARCH_USER\",\n    SET_CREATE_FORM_ERRORS : \"SET_CREATE_FORM_ERRORS\",\n    CLEAR_CREATE_FORM_ERRORS : \"CLEAR_CREATE_FORM_ERRORS\",\n    SET_SEARCHED_USER_IDS : \"SET_SEARCHED_USER\",\n    ADD_USER : \"ADD_USER\"\n}\n\nexport default {\n    execGetSelf : () => {\n        return {\n            type: UserActionTypes.EXEC_GET_SELF\n        }\n    },\n    execCreateUser : ({\n        history,\n        userParams\n    }) => {\n        return {\n            type : UserActionTypes.EXEC_CREATE_USER,\n            history,\n            userParams,\n        }\n    },\n    execUpdateUser : (\n        userParams\n    ) => {\n        return {\n            type: UserActionTypes.EXEC_UPDATE_USER,\n            userParams\n        }\n    },\n    execSearchUser : ({\n        userSelfId,\n        userName\n    }) => {\n        return {\n            type : UserActionTypes.EXEC_SEARCH_USER,\n            userSelfId,\n            userName\n        }\n    },\n    //errorsはJSON\n    setCreateFormErrors : (errors) => {\n        return {\n            type : UserActionTypes.SET_CREATE_FORM_ERRORS,\n            errors\n        }\n    },\n\n    clearCreateFormErrors : () => {\n        return {\n            type : UserActionTypes.CLEAR_CREATE_FORM_ERRORS,\n            errors : {}\n        }\n    },\n\n    setSearchedUsers : (...users) => {\n        return {\n            type : UserActionTypes.SET_SEARCHED_USER_IDS,\n            users\n        }\n    },\n\n    clearSearchedUsers : () => {\n        return {\n            type : UserActionTypes.SET_SEARCHED_USER_IDS,\n            users : []\n        }\n    },\n\n    setUser : (...users) => {\n        return {\n            type : UserActionTypes.ADD_USER,\n            users\n        }\n    }\n}","import { UserActionTypes } from \"./UserActions\"\nimport { LogActionTypes } from \"../logModule/LogActions\"\nimport createReducerFactory from \"../CreateReducerFactory\"\n\nconst defaultUser = {\n    \"id\" : 0,\n    \"name\" : \"\",\n    \"image\" : {\n        \"url\" : \"\",\n        \"profile\" : {\n            \"url\" : \"\"\n        },\n        \"thumb\" : {\n            \"url\" : \"\"\n        }\n    }\n}\n\nconst initialState = {\n    //ユーザー検索時、見つけたユーザーのIDを入れる\n    searchedUserIds : [],\n    //ID:ユーザー\n    default      : defaultUser,\n    0            : defaultUser,\n}\n/**\n * idからUserを取得する\n * Userのファクトリーメソッドとして使用する\n * @param {*} state \n */\nconst createGetUserById = (state) => (id) => {\n    const user = state[\"users\"][id] || {...defaultUser}\n    user.isAuthorOf = (talkRoomId) => (state.talkRooms.joinRooms[talkRoomId] || state.talkRooms.ownRooms[talkRoomId] || {}).author_id === user.id\n    user.isCurrentUser = () => state.logStatus.loginUser.id === user.id\n    return state[\"users\"][id] || defaultUser\n}\n\nconst actionHandler = {}\nactionHandler[LogActionTypes.LOG_IN] = () => {\n    return {...initialState}\n}\nactionHandler[UserActionTypes.ADD_USER] = (state, action) => {\n    const newState = action.users.reduce((state, user) => {\n        state[user.id] = user\n        return state\n    }, state)\n    return {\n        ...state,\n        ...newState\n    }\n}\nactionHandler[UserActionTypes.SET_SEARCHED_USER_IDS] = (state, action) => {\n    const newState = action.users.reduce((state, user) => {\n        state[user.id] = user\n        return state\n    }, state)\n    return {\n        ...state,\n        ...newState,\n        searchedUserIds : action.users.map(user => user.id),\n    }\n}\n\nconst createReducer = createReducerFactory(initialState, actionHandler)\n    \nexport default {\n    defaultUser,\n    getUserById: createGetUserById,\n    createReducer\n}","import UserActions from \"./UserActions\";\nimport UserReducer from \"./UserReducer\";\n\nexport default {\n    actions : UserActions,\n    reducer : UserReducer\n}","import { TalkRoomActionTypes } from \"./TalkRoomActions\";\nimport createReducerFactory from \"../CreateReducerFactory\";\nimport UserModule from \"../userModule/UserModule\";\n\n//reducer\nconst initialState = {\n    ownRooms : {},\n    joinRooms: {}\n}\n\ninitialState.default = {\n    author_id: 0,\n    created_at: '',\n    description: '',\n    id: 0,\n    title: '',\n    updated_at: '',\n    user_ids: []\n}\n\nconst getOwnRoomIds = (state) => Object.keys(state.talkRooms.ownRooms)\n\nconst getJoinRoomIds = (state) => Object.keys(state.talkRooms.joinRooms)\n\nconst createTalkRoomById = (state) => (id) => {\n    const room = state.talkRooms.ownRooms[id] || state.talkRooms.joinRooms[id] || initialState.default\n    room.getAllUsers = () => [...new Set([...(room.user_ids || []), room.author_id])].map(id => UserModule.reducer.getUserById(state)(id))\n    room.getAuthor = () => UserModule.reducer.getUserById(state)(room.author_id)\n    room.getMembers = () => [...new Set(room.user_ids || [])].filter(id => id !== room.author_id).map(id => UserModule.reducer.getUserById(state)(id))\n    return room\n}\n\nconst actionHandler = {}\nactionHandler[TalkRoomActionTypes.SET_OWN_ROOMS] = (state, action) => {\n    const newOwnRooms = action.talkRooms.reduce((ownRooms, room) => {\n        ownRooms[room.id] = room\n        return ownRooms\n    }, {})\n    return {\n        ...state,\n        ownRooms : newOwnRooms\n    }\n}\nactionHandler[TalkRoomActionTypes.SET_JOINED_ROOMS] = (state, action) => {\n    const newJoinRooms = action.talkRooms.reduce((joinRooms, room) => {\n        joinRooms[room.id] = room\n        return joinRooms\n    }, {})\n    return {\n        ...state,\n        joinRooms : newJoinRooms\n   }\n}\nactionHandler[TalkRoomActionTypes.ADD_TALK_ROOM] = (state, action) => {\n    state.ownRooms[action.talkRoom.id] = action.talkRoom\n    return {\n        ...state\n    }\n}\nactionHandler[TalkRoomActionTypes.DELETE_TALK_ROOM] = (state, action) => {\n    delete state.ownRooms[action.talkRoomId]\n    return {\n        ...state\n    }\n}\nactionHandler[TalkRoomActionTypes.ADD_USERS_TO_TALK_ROOM] = (state, action) => {\n    const room = state.ownRooms[action.talkRoomId] || state.joinRooms[action.talkRoomId] || {user_ids:[]}\n    const beforeuser_ids = (room['user_ids'] || [])\n    room['user_ids'] = [...new Set([...beforeuser_ids,...action.userIds])]\n    return {\n        ...state\n    }\n}\n\nactionHandler[TalkRoomActionTypes.REMOVE_USERS_FROM_TALKROOM] = (state, action) => {\n    const room = state.ownRooms[action.talkRoomId] || state.joinRooms[action.talkRoomId] || {user_ids:[]}\n    const beforeUserIds = new Set(room['user_ids'] || [])\n    const afterUserIds = action.userIds.reduce((beforeUserIds, userId) => {\n        beforeUserIds.delete(userId)\n        return beforeUserIds\n    }, beforeUserIds)\n    room['user_ids'] = afterUserIds\n    return {\n        ...state,\n    }\n}\n\nactionHandler[TalkRoomActionTypes.UPDATE_TALK_ROOM ] = (state, action) => {\n    state.ownRooms[action.talkRoomId]　= {\n        ...state.ownRooms[action.talkRoomId],\n        ...action.talkRoom\n    }\n    return {\n        ...state,\n    }\n}\n\nconst createReducer = createReducerFactory(initialState, actionHandler)\n\nexport default {\n    getOwnRoomIds,\n    getJoinRoomIds,\n    getTalkRoomById: createTalkRoomById,\n    createReducer\n}\n","import TalkRoomActions from './TalkRoomActions'\nimport TalkRoomReducer from './TalkRoomReducer'\n\nexport default {\n    actions : TalkRoomActions,\n    reducer : TalkRoomReducer,\n}","import React from 'react'\nimport { Form } from 'react-bootstrap'\n\n\nconst TitleFormGroup = ({\n    className = \"\",\n    style = \"\",\n    errorMessages = [],\n    defaultValue=\"\"\n}) => {\n    return  (       \n        <Form.Group controlId=\"titleForm\" className={className} style={{...style}}>\n            <Form.Label>タイトル</Form.Label>\n            <Form.Control type=\"text\" name=\"title\" placeholder=\"タイトル\" isInvalid={errorMessages.length > 0} defaultValue={defaultValue}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nconst DescriptionFormGroup = ({\n    className = \"\",\n    style = \"\",\n    errorMessages = [],\n    defaultValue=\"\"\n\n}) => {\n    return (\n        <Form.Group controlId=\"descriptionForm\" className={className} style={{...style}}>\n            <Form.Label>説明</Form.Label>\n            <Form.Control type=\"text\" name=\"description\" placeholder=\"説明\" isInvalid={errorMessages.length > 0} defaultValue={defaultValue}/>\n            <Form.Control.Feedback type=\"invalid\">\n                {errorMessages.find(e=>e)}\n            </Form.Control.Feedback>\n        </Form.Group>\n    )\n}\n\nconst TalkRoomFormGroups = {}\nTalkRoomFormGroups.Title = TitleFormGroup\nTalkRoomFormGroups.Description = DescriptionFormGroup\n\nexport default TalkRoomFormGroups","import React from 'react'\nimport ModalForm from '../components/ModalForm'\nimport { useSelector, useDispatch } from 'react-redux'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\nimport { Button } from \"react-bootstrap\"\nimport TalkRoomFormGroups from '../components/TalkRoomFormGroups'\nimport FormErrorModule from '../modules/FormErrorModule/FormErrorModule'\n\n/**\n * \n * @param {boolean} show -true:表示 false:非表示\n * @param {function} closeModalAction -modalを閉じるためのメソッド\n */\nconst CreateTalkRoomForm = ({\n    show = false,\n    toCloseModalAction = () => console.log('onCancel event')\n}) => {\n    const loginUser = useSelector(state => state.logStatus.loginUser)　|| {}\n    const thisFormError = useSelector(state => state.formErrors.createTalkRoomForm) || {}\n    const dispatch = useDispatch()\n    return (\n        <ModalForm \n            show={show}\n            onSubmit = {(e) => {\n                e.preventDefault()\n                const inputs = e.currentTarget\n                dispatch(TalkRoomModule.actions.execAddTalkRoom({\n                    title : inputs.title.value,\n                    description : inputs.description.value,\n                    authorId : loginUser.id\n                }))\n                dispatch(FormErrorModule.actions.clearErrorByName('createTalkRoomForm'))\n            }}\n        >\n            <ModalForm.Header>\n                <strong>トークルームをつくる</strong>\n            </ModalForm.Header>\n            <ModalForm.Body>\n                <TalkRoomFormGroups.Title errorMessages={thisFormError.title}/>\n                <TalkRoomFormGroups.Description errorMessages={thisFormError.description}/>\n            </ModalForm.Body>\n            <ModalForm.Footer>\n                <Button className=\"mr-2\" type=\"submit\">つくる</Button>\n                <Button variant=\"secondary\" onClick={() => {\n                    toCloseModalAction()\n                    dispatch(FormErrorModule.actions.clearErrorByName('createTalkRoomForm'))\n                }}>やめる</Button>    \n            </ModalForm.Footer>\n        </ModalForm>\n    )\n}\n\nexport default CreateTalkRoomForm\n","import React from \"react\"\nimport ModalForm from \"../components/ModalForm\"\nimport TalkRoomFormGroups from \"../components/TalkRoomFormGroups\"\nimport TalkRoomModule from \"../modules/talkRoomModule/TalkRoomModule\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { Button } from \"react-bootstrap\"\n\nconst UpdateTalkRoomForm = ({\n    talkRoomId,\n    show,\n    onCancel\n}) => {\n    const talkRooms = useSelector(state=>state.talkRooms)\n    const updateTargetRoom = talkRooms.ownRooms[talkRoomId] || talkRooms.joinRooms[talkRoomId] || talkRooms.default\n    const formErrors = useSelector(state=>state.formErrors)\n    const updateTalkRoomFormErrors = formErrors[\"updateTalkRoomForm\"] || {title:[], description:[]}\n    const dispatch = useDispatch()\n    \n    return (\n        <ModalForm show={show} onSubmit = {(e) => {\n            e.preventDefault()\n            dispatch(TalkRoomModule.actions.execUpdateTalkRoom({\n                talkRoomId,\n                title : e.currentTarget.title.value || updateTargetRoom.title,\n                description : e.currentTarget.description.value || updateTargetRoom.description\n            }))\n            onCancel()\n        }}>\n            <ModalForm.Header>\n                <h6><strong>「{updateTargetRoom.title}」のトークルーム情報変更</strong></h6>\n            </ModalForm.Header>\n            <ModalForm.Body>\n                <TalkRoomFormGroups.Title errorMessages={updateTalkRoomFormErrors.title} defaultValue={updateTargetRoom.title}/>\n                <TalkRoomFormGroups.Description errorMessages={updateTalkRoomFormErrors.description} defaultValue={updateTargetRoom.description}/>\n            </ModalForm.Body>\n            <ModalForm.Footer>\n                <Button className=\"mr-2\" type=\"submit\">かえる</Button>\n                <Button variant=\"secondary\" onClick={onCancel}>やめる</Button>\n            </ModalForm.Footer>\n        </ModalForm>\n    )\n}\n\nexport default UpdateTalkRoomForm\n\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nconst UserInviteButton = ({\n    userId,\n    talkRoomId,\n}) => {\n    const talkRooms = useSelector(state=>state.talkRooms)\n    const inviteRoom = talkRooms.ownRooms[talkRoomId] || talkRooms.joinRooms[talkRoomId] || talkRooms.default\n    const dispatch = useDispatch()\n    const userIsAlreadyExist = [inviteRoom.author_id, inviteRoom.user_ids].flat().some(id => id===userId)\n    if(userIsAlreadyExist) {\n        return <Button variant=\"success\" disabled>すでに参加しています</Button>\n    }\n    return <Button variant=\"success\" onClick={() => {\n        dispatch(TalkRoomModule.actions.execAddUserToTalkRoom({\n            userId,\n            talkRoomId\n        }))\n    }}>誘う</Button>\n}\n\nexport default UserInviteButton","import React from \"react\"\nimport { Image, Container } from \"react-bootstrap\"\n\n\nconst UserProfile = ({\n    className = \"\",\n    without = [],\n    user = {\n        id:0,\n        name:\"\",\n        image: {\n            profile : {\n                url:\"\"\n            }\n        }\n    }\n}) => {\n    const profileContents = {}\n    profileContents.self_id = (\n        <div id=\"loginUserID\">\n            <strong style={{borderBottom:\"1px solid gray\"}}>ユーザーID</strong>\n            <div>{user.self_id}</div>\n        </div>\n    )\n    profileContents.name = (\n        <div id=\"loginUserName\">\n            <strong style={{borderBottom:\"1px solid gray\"}}>お名前</strong>\n            <div>{user.name}</div>\n        </div>\n    )\n    profileContents.image = (\n        <Image style={{objectFit:'contain'}} src={user.image.profile.url} />\n    )\n\n    const activeKeys = Object.keys(profileContents).filter(key => !without.includes(key)).reduce((result, key) => {\n        result[key] = key\n        return result\n    }, {})\n    \n    return (\n        <Container　className={`${className} d-flex justify-content-center`}>\n            <section id=\"info\">\n                {profileContents[activeKeys.self_id]}\n                {profileContents[activeKeys.name]}\n            </section>\n            {profileContents[activeKeys.image]}\n        </Container>\n    )\n}\n\nexport default UserProfile","/**\n * UserInviteFormの設計\n * ・ModalFormを使用する\n * ・ModalFormのBodyがメインになる\n * ・\n */\nimport React from 'react'\nimport UserFormGroups from '../components/UserFormGroups'\nimport ModalForm from '../components/ModalForm'\nimport { useDispatch, useSelector } from 'react-redux'\nimport UserInviteButton from './UserInviteButton'\nimport UserModule from '../modules/userModule/UserModule'\nimport FormErrorModule from '../modules/FormErrorModule/FormErrorModule'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport UserProfile from '../components/UserProfile'\nimport { Button } from 'react-bootstrap'\n\nconst UserInviteForm = ({\n    show,\n    talkRoomId,\n    onCancel\n}) => {\n    const dispatch = useDispatch()\n    const users = useSelector(state=>state.users)\n    const searchedUserIds = useSelector(state=>state.users.searchedUserIds)\n    const formErrors = useSelector(state=>state.formErrors)\n    const userInviteFormError = formErrors[\"userInviteForm\"] || []\n\n    return (\n        <ModalForm \n            show={show}\n            onSubmit = {e => {\n                e.preventDefault()\n                dispatch(FormErrorModule.actions.clearErrorByName('userInviteForm'))\n                dispatch(UserModule.actions.execSearchUser({\n                    userSelfId : e.currentTarget.id.value,\n                    userName : e.currentTarget.name.value\n                }))\n            }}\n        >\n            <ModalForm.Header>\n                <strong>ユーザーを誘う</strong>\n            </ModalForm.Header>\n            <ModalForm.Body>\n                <UserFormGroups.IdFormGroup errorMessages={userInviteFormError.messages} required/>\n                <UserFormGroups.NameFormGroup errorMessages={userInviteFormError.messages} required/>\n                <TransitionGroup>\n                    {[...searchedUserIds].map(id => users[id]).filter(e=>e).map((user) => {\n                        return (\n                            <CSSTransition key={user.id} classNames=\"fade\" timeout={100}>\n                                <div>\n                                    <h6 style={{textAlign:\"center\"}}><strong>この人を誘いますか?</strong></h6>\n                                    <UserProfile className=\"mb-2\" user={user} />\n                                    <div className=\"d-flex justify-content-end\">\n                                        <UserInviteButton userId={user.id} talkRoomId={talkRoomId}/>\n                                    </div>                                    \n                                </div>\n                            </CSSTransition>\n                        )\n                    })}\n                </TransitionGroup>\n            </ModalForm.Body>\n            <ModalForm.Footer>\n                <Button className=\"mr-2\" type=\"submit\">さがす</Button>\n                <Button variant=\"secondary\" onClick={()=>{\n                    onCancel()\n                    dispatch(UserModule.actions.clearSearchedUsers())\n                    dispatch(FormErrorModule.actions.clearErrorByName(\"userInviteForm\"))\n                }}>やめる</Button>\n            </ModalForm.Footer>\n        </ModalForm>\n    )\n}\n\nexport default UserInviteForm\n\n","import { useDispatch, useSelector } from \"react-redux\"\nimport ModalForm from \"../components/ModalForm\"\nimport React, { useState } from 'react'\nimport { ListGroup, Modal, Button } from \"react-bootstrap\"\nimport UserProfile from \"../components/UserProfile\"\nimport TalkRoomModule from \"../modules/talkRoomModule/TalkRoomModule\"\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\n\nconst RemoveTalkRoomMembersModal = ({\n    talkRoomId,\n    show,\n    onCancel\n}) => {\n    const dispatch = useDispatch()\n    const talkRooms=useSelector(state=>state.talkRooms)\n    const thisRoom = talkRooms.ownRooms[talkRoomId] || talkRooms.joinRooms[talkRoomId] || talkRooms.default\n    const users=useSelector(state=>state.users)\n    const [selectedUserIds, addSelectedUserId] = useState({})\n    return (\n        <ModalForm show={show} onSubmit={(e) => {\n            e.preventDefault()\n            dispatch(TalkRoomModule.actions.execRemoveUsersFromTalkRoom({\n                talkRoomId,\n                userIds : Object.keys(selectedUserIds).map(userId => parseInt(userId))\n            }))\n        }}>\n            <Modal.Header>\n                <h6><strong>「{thisRoom.title}」から別れるメンバーを選択してください</strong></h6>\n            </Modal.Header>\n            <Modal.Body id='talkRoomMembersModalBody'>\n                <ListGroup variant='flush'>\n                    <TransitionGroup>\n                        {[...new Set(thisRoom.user_ids)].map((userId,index) => (\n                            <CSSTransition key={index} timeout={200} classNames='fade'>\n                                <ListGroup.Item variant={selectedUserIds[userId]} className='pointer opacity_iterate' onClick={() => {\n                                    selectedUserIds[userId] ? delete selectedUserIds[userId] : selectedUserIds[userId] = 'danger'\n                                    addSelectedUserId({\n                                        ...selectedUserIds\n                                    })\n                                }}>\n                                    <UserProfile user = {users[userId] || users[0]} without='self_id'/>\n                                </ListGroup.Item>\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n                </ListGroup>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant='danger' type='submit' disabled={Object.keys(selectedUserIds).length===0}>別れる</Button>\n                <Button variant='secondary' onClick={()=>{\n                    addSelectedUserId({})\n                    onCancel()}}\n                >閉じる</Button>\n            </Modal.Footer>\n        </ModalForm>\n    )\n}\n\nexport default RemoveTalkRoomMembersModal","import React, { useState } from \"react\"\nimport { Dropdown, Modal, ListGroup, Button } from \"react-bootstrap\"\nimport TalkRoomModule from \"../modules/talkRoomModule/TalkRoomModule\"\nimport UpdateTalkRoomForm from \"./UpdateTalkRoomForm\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport UserInviteFormNeo from \"./UserInviteForm\"\nimport RemoveTalkRoomMembersModal from \"./RemoveTalkRoomMemberModal\"\n\n\nconst UpdateTalkRoomItem = ({talkRoomId}) => {\n    const [updateRoomModalShow, setUpdateRoomModalShow] = useState(false)\n    return (\n        <>\n            <Dropdown.Item style={{color:\"orange\"}} onClick={()=>setUpdateRoomModalShow(true)}>作り直す</Dropdown.Item>\n            <UpdateTalkRoomForm talkRoomId={talkRoomId} show = {updateRoomModalShow} onCancel = {() => {\n                    setUpdateRoomModalShow(false)\n                }}\n            />\n        </>\n    )\n}\n\nconst UserInviteItem = ({talkRoomId}) => {\n    const [inviteUserModalShow, setUserInviteModalShow] = useState(false)\n    return (\n        <>\n            <Dropdown.Item style={{color:\"blue\"}} onClick={() => setUserInviteModalShow(true)}>誘う</Dropdown.Item>\n            <UserInviteFormNeo talkRoomId={talkRoomId} show = {inviteUserModalShow} onCancel = {() => {\n                    setUserInviteModalShow(false)\n                }}\n            />\n        </>\n    )\n}\n\nconst DeleteTalkRoomItem = ({talkRoomId}) => {\n    const talkRoomsStatus = useSelector(state=>state.talkRooms)\n    const thisRoom = talkRoomsStatus.joinRooms[talkRoomId] || talkRoomsStatus.ownRooms[talkRoomId] || talkRoomsStatus.defaultRoom\n    const dispatch = useDispatch()\n    return (\n        <Dropdown.Item style={{color:\"red\"}} onClick={()=> {\n            if(!window.confirm(`${thisRoom.title}を削除しますか?`)){\n                return\n            }\n            dispatch(TalkRoomModule.actions.execDeleteTalkRoom(talkRoomId))\n        }}>消す</Dropdown.Item>\n    )\n}\n\n\nconst RemoveUserForm = ({talkRoomId}) => {\n    const [removeUserModalShow, changeRemoveUserModalShow] = useState(false)\n    return (\n        <>\n            <Dropdown.Item onClick={() => changeRemoveUserModalShow(true)}>\n                別れる\n            </Dropdown.Item>\n            <RemoveTalkRoomMembersModal show={removeUserModalShow} talkRoomId={talkRoomId} onCancel={()=>changeRemoveUserModalShow(false)}/>\n        </>\n    )\n}\n\n/**\n * オーナー専用のドロップダウンメニュー\n */\nconst OwnerDropdown = ({\n    talkRoomId\n}) => {\n    return (\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\">\n                ルーム設定\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n                <UserInviteItem talkRoomId = {talkRoomId}/>\n                <RemoveUserForm talkRoomId = {talkRoomId} />\n                <UpdateTalkRoomItem talkRoomId = {talkRoomId}/>\n                <DeleteTalkRoomItem talkRoomId = {talkRoomId} />\n            </Dropdown.Menu>\n        </Dropdown>\n    )\n}\n\nexport default OwnerDropdown","import React from 'react'\nimport { Modal, ListGroup, Button } from 'react-bootstrap'\nimport UserProfile from '../components/UserProfile'\nimport { useSelector } from 'react-redux'\n\n\n\nconst TalkRoomMembersModal = ({\n    show,\n    onCancel,\n    talkRoomId\n}) => {\n    const talkRooms=useSelector(state=>state.talkRooms)\n    const thisRoom = talkRooms.ownRooms[talkRoomId] || talkRooms.joinRooms[talkRoomId] || talkRooms.default\n\n    const users=useSelector(state=>state.users)\n    \n    return (\n        <Modal show={show}>\n            <Modal.Header>\n                <strong>{thisRoom.title}のメンバー</strong>\n            </Modal.Header>\n            <Modal.Body id='talkRoomMembersModalBody'>\n                <ListGroup variant='flush'>\n                    <ListGroup.Item variant='success'>\n                        <strong>管理者</strong>\n                        <UserProfile user={users[thisRoom.author_id] || users[0]} without='self_id'/>\n                    </ListGroup.Item>\n                    {[...new Set(thisRoom.user_ids)].map((userId,index) => (\n                        <ListGroup.Item key={index}>\n                            <UserProfile user = {users[userId] || users[0]} without='self_id'/>\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant='secondary' onClick={onCancel}>閉じる</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default TalkRoomMembersModal","import React, { useState, useEffect } from \"react\"\nimport { Card, Button, Row, Dropdown, Image } from \"react-bootstrap\"\nimport {  useSelector, useDispatch } from \"react-redux\"\nimport OwnerDropdown from \"./OwnerDropdown\"\nimport { withRouter } from \"react-router-dom\"\nimport TalkRoomMembersModal from \"./TalkRoomMembersModal\"\nimport CurrentRoomStatusActions from \"../modules/currentRoomStatusModule/CurrentRoomStatusActions\"\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\n\nconst TalkRoomParams = ({\n    talkRoomId\n}) => {\n    const talkRoomsStatus = useSelector(state=>state.talkRooms)\n    const thisRoom = talkRoomsStatus.joinRooms[talkRoomId] || talkRoomsStatus.ownRooms[talkRoomId] || talkRoomsStatus.default\n    return (\n        <div className=\"mr-2 w-100 overflow-auto\">\n            <Card.Title><strong>{thisRoom.title}</strong></Card.Title>\n            <Card.Text>{thisRoom.description}</Card.Text>\n        </div>\n    )\n}\n\nconst CurrentUserThumbs = ({\n    talkRoomId\n}) => {\n    const currentRoomStatus = useSelector(state=>state.currentRoomStatus)\n    const userStatus = useSelector(state=>state.users)\n    return (\n        <TransitionGroup>\n            {(currentRoomStatus[talkRoomId] || currentRoomStatus.default).currentUserIds.map((userId,index) => (\n                <CSSTransition key={index} classNames='fade' timeout={100}>\n                    <Image className='user_thumb_size' src={(userStatus[userId] || userStatus[0]).image.thumb.url}  roundedCircle/>\n                </CSSTransition>\n            ))}\n        </TransitionGroup>\n    )\n}\nconst TalkRoomInformation = ({\n    talkRoomId\n}) => {\n    return (\n        <div className=\"d-flex w-100\">\n            <TalkRoomParams talkRoomId={talkRoomId}/>\n            <CurrentUserThumbs talkRoomId={talkRoomId}/>\n        </div>\n    )\n}\n\nconst TalkRoomCardButtons = ({\n    talkRoomId,\n    history\n}) => {\n    const [showTalkRoomMemberModal, setShowTalkRoomMemberModal] = useState(false)\n    return (\n        <>\n            <div className=\"d-flex justify-content-end mb-2\">\n                <Button size='sm' className=\"mr-2\" onClick={()=>history.push(`/talk_rooms/${talkRoomId}`)}>入る</Button>\n                <Button size='sm' onClick={()=>setShowTalkRoomMemberModal(true)}>メンバー一覧</Button>\n            </div>\n            <TalkRoomMembersModal show={showTalkRoomMemberModal} talkRoomId={talkRoomId} onCancel={() => setShowTalkRoomMemberModal(false)}/>\n        </>\n    )\n}\n\nconst TalkRoomCard = ({\n    history,\n    talkRoomId,\n    readOnly\n}) => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(CurrentRoomStatusActions.execRefreshCurrentRoomUserIds({\n            talkRoomId\n        }))\n    },[])\n    return (\n        <Card>\n            <Card.Body>\n                <TalkRoomInformation talkRoomId={talkRoomId} />\n                <TalkRoomCardButtons talkRoomId = {talkRoomId} history={history} />\n                <div className=\"d-flex justify-content-end\">\n                    {[readOnly].filter(readOnly => !readOnly).map((_,index) => {\n                        return (\n                            <OwnerDropdown key={index} talkRoomId={talkRoomId}/>\n                        )    \n                    })}\n                </div>\n            </Card.Body>\n        </Card>\n    )\n}\n\nTalkRoomCard.defaultProps = {\n    talkRoomId : 0,\n    readOnly : false\n}\n\nexport default withRouter(TalkRoomCard)\n","import React from 'react'\n\nconst SeparateForPagination = ({\n    itemLengthPerPage,\n    selectedPage,\n    WrapWith,\n    className,\n    children,\n}) => {\n    return (\n        <WrapWith className={className}>\n            {[...Array(itemLengthPerPage)].map((_,index) => {\n                const item = children[itemLengthPerPage*(selectedPage-1)+index]\n                return item\n            })}\n        </WrapWith>\n    )\n}\n\nSeparateForPagination.defaultProps = {\n    itemLengthPerPage:3,\n    selectedPage:1,\n    WrapWith:'div',\n    className:\"\",\n}\n\nexport default SeparateForPagination","import React, { useState } from 'react'\nimport { Pagination, Col, Row } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport TalkRoomCard from './TalkRoomCard'\nimport SeparateForPagination from '../components/SeparateForPagination'\n\nconst OwnRoomsArea = ({\n    itemLengthPerPage\n}) => {\n    const ownRooms = useSelector(state=>state.talkRooms.ownRooms)\n    const ownRoomArray = Object.values(ownRooms)\n    const [selectedPage, setSelectedPage] = useState(1)\n    return (\n        <>\n            <SeparateForPagination className='row mb-2 talkRoomCardsRow' selectedPage={selectedPage} WrapWith={TransitionGroup}>\n                {ownRoomArray.map((ownRoom,index) => (\n                    <CSSTransition timeout={100} classNames='fade' key={index}>\n                        <Col md={4}>\n                            <TalkRoomCard talkRoomId={ownRoom.id}/>\n                        </Col>\n                    </CSSTransition>\n                ))}\n            </SeparateForPagination>\n            <Pagination>    \n                {[...Array(Math.ceil(ownRoomArray.length/itemLengthPerPage))].map((_, index)=>index+1).map(pageNumber=> (\n                    <Pagination.Item key={pageNumber} active={pageNumber===selectedPage} onClick={() => setSelectedPage(pageNumber)}>\n                        {pageNumber}\n                    </Pagination.Item>\n                ))}\n            </Pagination>\n        </>\n    )\n}\n\nOwnRoomsArea.defaultProps = {\n    itemLengthPerPage : 3\n}\n\nconst JoinRoomsArea = ({\n    itemLengthPerPage\n}) => {\n    const joinRooms = useSelector(state=>state.talkRooms.joinRooms)\n    const joinRoomArray = Object.values(joinRooms)\n    const [selectedPage, setSelectedPage] = useState(1)\n    return (\n        <>\n            <SeparateForPagination className='row mb-2 talkRoomCardsRow' selectedPage={selectedPage} WrapWith={TransitionGroup}>\n                {joinRoomArray.map((joinRoom,index) => (\n                    <CSSTransition timeout={100} classNames='fade' key={index}>\n                        <Col md={4}>\n                            <TalkRoomCard talkRoomId={joinRoom.id} readOnly/>\n                        </Col>\n                    </CSSTransition>\n                ))}\n            </SeparateForPagination>\n            <Pagination>    \n                {[...Array(Math.ceil(joinRoomArray.length/itemLengthPerPage))].map((_, index)=>index+1).map(pageNumber=> (\n                    <Pagination.Item key={pageNumber} active={pageNumber===selectedPage} onClick={() => setSelectedPage(pageNumber)}>\n                        {pageNumber}\n                    </Pagination.Item>\n                ))}\n            </Pagination>\n        </>\n    )\n}\n\nJoinRoomsArea.defaultProps = {\n    itemLengthPerPage : 3\n}\n\nconst TalkRoomsArea = {\n    OwnRoomsArea,\n    JoinRoomsArea\n}\n\n\nexport default TalkRoomsArea","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst TalkRoomAreaLabel = {}\nconst OwnRoomLabel = () => {\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    return (\n        <div>\n            <h6 style={{borderBottom:\"1px solid gray\"}}>\n                <strong>{loginUser.name}</strong>さんが管理しているトークルーム\n            </h6>\n        </div>\n    )\n}\n\nconst JoinRoomLabel = () => {\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    return (\n        <div>\n            <h6 style={{borderBottom:\"1px solid gray\"}}>\n                <strong>{loginUser.name}</strong>さんが参加しているトークルーム\n            </h6>\n        </div>\n    )\n}\n\nTalkRoomAreaLabel.OwnRoomLabel = OwnRoomLabel\nTalkRoomAreaLabel.JoinRoomLabel = JoinRoomLabel\n\nexport default TalkRoomAreaLabel","import React, { useState } from 'react'\nimport TalkRoomModule from '../modules/talkRoomModule/TalkRoomModule'\nimport { connect } from 'react-redux'\nimport { Container, Button } from 'react-bootstrap'\nimport CreateTalkRoomForm from '../containers/CreateTalkRoomForm'\n\n\n\nimport TalkRoomsArea from '../containers/TalkRoomsArea'\nimport TalkRoomAreaLabel from '../containers/TalkRoomAreaLabel'\nimport { withRouter } from 'react-router-dom'\n\n\nconst TalkRoomPage = ({\n    match\n}) => {\n    const [createModalShow, changeCreateModalShow] = useState(false);\n    return (\n        <Container>\n            <TalkRoomAreaLabel.OwnRoomLabel />\n            <Button variant=\"primary\" className='mb-2' onClick={() => changeCreateModalShow(true)}>トークルームを追加</Button>\n            <TalkRoomsArea.OwnRoomsArea itemLengthPerPage={3} />\n            <TalkRoomAreaLabel.JoinRoomLabel />\n            <TalkRoomsArea.JoinRoomsArea itemLengthPerPage={3} />\n            <CreateTalkRoomForm show={createModalShow} \n                                toCloseModalAction ={()=> {\n                                    changeCreateModalShow(false)\n                                }}/>\n        </Container>\n    )\n}\n\nexport default withRouter(TalkRoomPage)","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport UserProfile from '../components/UserProfile'\n\nconst LoginUserProfile = ({\n    without,\n    className\n}) => {\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    return (\n        <UserProfile className={className} user={loginUser} without={without} />\n    )   \n}\nLoginUserProfile.defaultProps = {\n    without : '',\n    className : ''\n}\nexport default LoginUserProfile","import React from 'react'\nimport ModalForm from '../components/ModalForm'\nimport UserModule from '../modules/userModule/UserModule'\nimport { useSelector, useDispatch } from 'react-redux'\nimport FormErrorModule from '../modules/FormErrorModule/FormErrorModule'\nimport { Button, Modal } from 'react-bootstrap'\nimport UserFormGroups from '../components/UserFormGroups'\n\nconst UpdateUserForm = ({\n    userId,\n    show,\n    onCancel,\n}) => {\n    const users = useSelector(state=>state.users)\n    const updateTargetUser = users[userId] || users.default\n    const formErrors = useSelector(state=>state.formErrors)\n    const updateUserFormErrors =  formErrors[\"updateUserForm\"] || {self_id:[], name:[], image:[]}\n    const dispatch = useDispatch();\n    const filterUpdateParams = (currentUser, userParams) => (\n        Object.keys(userParams)\n                .filter(param => currentUser[param] !== userParams[param])\n                .filter((param) => userParams[param])\n                .reduce((result, param) => {\n                    result[param] = userParams[param]\n                    return result\n                }, {})\n    )\n    return (\n        <ModalForm\n            show = {show}\n            onSubmit={e => {\n                e.preventDefault()\n                const inputParams = {\n                    self_id: e.currentTarget.id.value,\n                    name: e.currentTarget.name.value,\n                    image: e.currentTarget.image.files[0]\n                }\n                const newUserParams = filterUpdateParams(updateTargetUser, inputParams)\n                dispatch(UserModule.actions.execUpdateUser({\n                    id: userId,\n                    ...newUserParams\n                }))\n            }}\n        >\n            <ModalForm.Header>\n                <strong>プロフィール更新</strong>\n            </ModalForm.Header>\n            <ModalForm.Body>\n                <UserFormGroups.IdFormGroup defaultValue={updateTargetUser.self_id} errorMessages={updateUserFormErrors.self_id}/>\n                <UserFormGroups.NameFormGroup defaultValue={updateTargetUser.name} errorMessages={updateUserFormErrors.name}/>\n                <UserFormGroups.ProfileImageFormGroup defaultValue={updateTargetUser.image.profile.url} errorMessages={updateUserFormErrors.image}/>\n            </ModalForm.Body>\n            <Modal.Footer className=\"d-flex justify-content-end\">\n                <Button type='submit' className='mr-2'>更新</Button>\n                <Button variant='secondary' onClick={() => {\n                    dispatch(FormErrorModule.actions.clearErrorByName(\"updateUserForm\"))\n                    onCancel()\n                }}>やめる</Button>\n            </Modal.Footer>\n        </ModalForm>\n    )\n}\n\nexport default UpdateUserForm","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport UpdateUserForm from './UpdateUserForm'\n\nconst UpdateLoginUserForm = ({\n    show,\n    onCancel\n}) => {\n    const loginUser = useSelector(state=>state.logStatus.loginUser)\n    return (\n        <UpdateUserForm userId={loginUser.id} show={show} onCancel={onCancel} />\n    )\n}\n\nUpdateLoginUserForm.defaultProps = {\n    show : false,\n    onCancel : () => console.log('set onCancel event on UpdateLoginUserForm')\n}\n\nexport default UpdateLoginUserForm","import React from 'react'\nimport LogModule from '../modules/logModule/LogModule'\nimport { withRouter } from 'react-router-dom'\nimport { Button } from 'react-bootstrap'\nimport { useDispatch } from 'react-redux'\n\nconst LogoutButton = ({\n    children,\n    history\n}) => {\n    const dispatch = useDispatch()\n    return (\n        <Button variant='danger' onClick={() => dispatch(LogModule.actions.execLogout({history}))}>{children}</Button>\n    )\n}\n\nLogoutButton.defaultProps = {\n    children:'ログアウト',\n}\n\nexport default withRouter(LogoutButton)","import React, { useState } from 'react'\nimport { Button, Container, Col } from 'react-bootstrap'\nimport LoginUserProfile from '../containers/LoginUserProfile'\nimport UpdateLoginUserForm from '../containers/UpdateLoginUserForm'\nimport LogoutButton from '../containers/LogoutButton'\n\nconst HomePage = () => {\n    const [showUpdateUserForm, setUpdateUserFormShowing] = useState(false)\n\n\n    return (\n        <Container className=\"justify-content-center\">\n            <LoginUserProfile className='mb-2' />\n            <div className='d-flex justify-content-center'>\n                <Button onClick={() => setUpdateUserFormShowing(true)}>プロフィールを更新する</Button>\n            </div>\n            <div className='d-flex justify-content-center'>\n                <LogoutButton>ログアウト</LogoutButton>\n            </div>\n            <UpdateLoginUserForm show={showUpdateUserForm} onCancel={() => setUpdateUserFormShowing(false)} />\n        </Container>\n    )\n}\n\nexport default HomePage\n","import React from 'react'\nimport { Row, Col} from 'react-bootstrap'\n\nconst SignUpPageTitle = () => (\n    <Row>\n        <Col xs={{span:10, offset:1}} sm={{span:8, offset:2}} md={{span:6,offset:3}} lg={{span:4,offset:4}}>\n            <strong>新規登録</strong>\n        </Col>\n    </Row>\n)\n\nexport default SignUpPageTitle","import React, { useEffect } from 'react'\nimport { Form, Button, Container } from 'react-bootstrap'\nimport UserModule from '../modules/userModule/UserModule'\nimport { connect, useDispatch, useSelector } from 'react-redux'\nimport UserFormGroups, { NameFormGroup, PasswordFormGroup, PasswordConfirmationFormGroup, ProfileImageFormGroup } from '../components/UserFormGroups'\nimport FormErrorModule from '../modules/FormErrorModule/FormErrorModule'\nimport { withRouter } from 'react-router-dom'\n\nconst SignUpForm = ({\n    history\n}) => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        return () => {\n            dispatch(FormErrorModule.actions.clearErrorByName('signUpForm'))\n        }\n    }, [])\n    const formErrorStatus = useSelector(state=>state.formErrors)\n    const signUpFormErrors = formErrorStatus.signUpForm || {}\n\n    return (\n        <Form onSubmit={(e) => {\n            e.preventDefault()\n            const input=e.currentTarget\n            dispatch(UserModule.actions.execCreateUser({\n                userParams: {\n                    name: input.name.value,\n                    password: input.password.value,\n                    password_confirmation:　input.password_confirmation.value,\n                    image: input.image.files[0]\n                },\n                history\n            }))\n        }}>\n            <UserFormGroups.NameFormGroup errorMessages = {signUpFormErrors.name}/>\n            <UserFormGroups.PasswordFormGroup errorMessages = {signUpFormErrors.password} />\n            <UserFormGroups.PasswordConfirmationFormGroup errorMessages = {signUpFormErrors.password_confirmation} />\n            <UserFormGroups.ProfileImageFormGroup errorMessages = {signUpFormErrors.image}/>\n            <Button variant=\"primary\" type=\"submit\">登録する</Button>\n        </Form>\n    )\n\n}\n\nexport default withRouter(SignUpForm)","import React from 'react'\nimport { Container, Row, Col} from 'react-bootstrap'\nimport SignUpForm from '../containers/SignUpForm'\nimport { withRouter } from 'react-router-dom'\n\nconst SignUpPageForm = ({history}) => (\n    <Row>\n        <Col xs={{span:10, offset:1}} sm={{span:8, offset:2}} md={{span:6,offset:3}} lg={{span:4,offset:4}}>\n            <SignUpForm history={history}/>\n        </Col>\n    </Row>\n)\n\n\nexport default withRouter(SignUpPageForm)","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport SignUpPageTitle from './SignUpPageTitle'\nimport SignUpPageForm from './SignUpPageForm'\n\nclass SignUpPage extends React.Component {\n    render() {\n        return (\n            <Container>\n                <SignUpPageTitle />\n                <SignUpPageForm />\n            </Container>\n        )\n    }\n}\n\nexport default SignUpPage","import React from 'react';\n//redux\nimport CurrentRoomPage from './CurrentRoomPage'\n//bootstrap\nimport { Route, Switch, Redirect, BrowserRouter as Router} from 'react-router-dom';\n\nimport LoginRequiredRoute from '../containers/LoginRequiredRoute';\nimport LoginPage from './LoginPage';\nimport TalkRoomPage from './TalkRoomPage'\nimport HomePage from './HomePage';\nimport SignUpPage from './SignUpPage';\n\n\n/**\n * チャットアプリくんのルーティングと、\n * それとコンポーネントの対応を設定するコンポーネント\n */\n\nconst ChatLikeAppRouter = ({children}) => (\n    <Router>\n        {children}\n        <Switch>\n            <Route path=\"/signin\" component={LoginPage}/>\n            <Route path=\"/signup\" component={SignUpPage} />\n            <LoginRequiredRoute exact path=\"/home\" component={HomePage}/>\n            <LoginRequiredRoute exact path=\"/talk_rooms\" component={TalkRoomPage} />\n            <LoginRequiredRoute exact path=\"/talk_rooms/:id\" component={CurrentRoomPage}/>\n            <Redirect to=\"/home\" />\n        </Switch>\n    </Router>\n)\n\nexport default ChatLikeAppRouter","import React from 'react';\n//bootstrap\nimport { Link } from 'react-router-dom';\n\nimport ChatLikeAppNavigation from './ChatLikeAppNavigation'\nimport DefaultLoginChecker from '../containers/DefaultLoginChecker';\nimport Loading from '../containers/Loading';\nimport ChatLikeAppRouter from './ChatLikeAppRouter';\n\n\n/**\n * ローディング画面の配置\n * ルーティングの設定\n * ルーティングに対応したコンポーネントの配置\n */\nexport class App extends React.Component {\n  render() {\n    return (\n      <>\n        <Loading/>\n        <DefaultLoginChecker>\n          <ChatLikeAppRouter>\n            <ChatLikeAppNavigation>\n              <Link className = \"nav-link\" to=\"/home\">Home</Link>\n              <Link className = \"nav-link\" to=\"/signup\">Sign Up</Link>\n              <Link className = \"nav-link\" to=\"/signin\">Sign In</Link>\n              <Link className = \"nav-link\" to=\"/talk_rooms\">Talk Rooms</Link>\n            </ChatLikeAppNavigation>\n          </ChatLikeAppRouter>\n        </DefaultLoginChecker>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n *　ロード画面の表示などで使う想定。\n *  画面からは呼び出さない想定\n */\nexport const LoadingActionTypes = {\n    START_LOADING:\"START_LOADING\",\n    FINISH_LOADING:\"FINISH_LOADING\"\n}\n\nexport default {\n    startLoading : () => {\n        return {\n            type: LoadingActionTypes.START_LOADING\n        }\n    },\n\n    finishLoading : () => {\n        return {\n            type: LoadingActionTypes.FINISH_LOADING\n        }\n    }\n}","import { LoadingActionTypes } from \"./LoadingActions\"\nimport createReducerFactory from \"../CreateReducerFactory\"\n\n/**\n * loadingStateの数字はロード中プロセスの数を表す\n * 新しく読みこむ場合、loadingState+1\n * 読み込みが終了した場合、loadingState-1\n * START_LOADINGとFINISH_LOADINGは同じ回数だけ呼ばれないといけない\n */\nconst initialState = 0\n\nconst actionHandler = {}\nactionHandler[LoadingActionTypes.START_LOADING] = (state) => {\n    return state+1\n}\n//読み込み中プロセスの数がマイナスにならないように\nactionHandler[LoadingActionTypes.FINISH_LOADING] = (state) => {\n    return Math.max(state-1,0)\n}\n\nconst createReducer = createReducerFactory(initialState, actionHandler)\n\nexport default {\n    createReducer\n}","import LoadingActions from \"./LoadingActions\";\nimport LoadingReducer from \"./LoadingReducer\";\n\nexport default {\n    actions : LoadingActions,\n    reducer : LoadingReducer,\n}","import LoadingActions from \"./LoadingActions\";\nimport { put, join, fork } from \"redux-saga/effects\";\n\n//saga\nexport function* lockView(){\n    yield put(LoadingActions.startLoading());\n}\n\nexport function* unlockView() {\n    yield put(LoadingActions.finishLoading())\n}\n\n/**\n * 引数のsagaの実行が完了するまで、stateのloadingプロセスを追加します。\n * @param {*} saga \n */\nexport function addLoadingStateUntilSagaFinish(...argSagas){\n    return function*(action) {\n        yield put(LoadingActions.startLoading());\n        for(const saga of argSagas) {\n            const currentSaga = yield fork(saga, action)\n            yield join(currentSaga)\n        }\n        yield put(LoadingActions.finishLoading())\n    }\n}","import Axios from \"axios\"\n\n//cookieを使用するための設定\nAxios.defaults.withCredentials = true\n//Axios.defaults.headers.post['Content-Type'] = 'multipart/form-data'\n\nconst createNormalResponse = (response) => {\n    return {\n        isSuccess : !response.data.isFail,\n        isFail    : response.data.isFail,\n        data      : response.data\n    }\n}\n\nconst createErrorResponse = (error) => {\n    return {\n        isError : true,\n        data    : error\n    }\n}\n\nconst handleData = (promise) => {\n    return promise\n        .then(response => {\n            return createNormalResponse(response)\n        })\n        .catch(error => {\n            return createErrorResponse(error)\n        })\n}\nexport default {\n    get   : ({url}) => handleData(Axios.get(url)),\n    post  : ({url, parameter, headers={}}) => handleData(Axios.post(url,parameter,headers)),\n    put   : ({url, parameter}) => handleData(Axios.put(url, parameter)),\n    delete: ({url, parameter}) => handleData(Axios.delete(url, {data : parameter}))\n}","export const ErrorCodeActionTypes = {\n    EXEC_HANDLE_ERROR_CODE : 'EXEC_HANDLE_ERROR_CODE',\n    HANDLE_ERROR_CODE : 'HANDLE_ERROR_CODE'\n}\n\nexport default {\n    execHandleError : ({errorResult, history={}}) => {\n        return {\n            type: ErrorCodeActionTypes.HANDLE_ERROR_CODE,\n            errorCode : (errorResult.response || {}).status,\n            history\n        }\n    },\n    handleError : errorCode => {\n        return {\n            type : ErrorCodeActionTypes.EXEC_HANDLE_ERROR_CODE,\n            errorCode\n        }\n    }\n}\n\n\n\n","import LogActions, { LogActionTypes } from \"./LogActions\"\nimport { put, call} from \"redux-saga/effects\"\nimport DataAccessor from \"../DataAccessor\"\nimport FormErrorActions from \"../FormErrorModule/FormErrorActions\"\nimport UserActions from \"../userModule/UserActions\"\nimport ErrorCodeActions from \"../errorCodeModule/ErrorCodeActions\"\n\n//saga\nexport function* handleGetDefLoginStart() {\n    const accessResult = yield call(DataAccessor.get, {\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/login`\n    })\n    if(accessResult.isSuccess) {\n        yield put(UserActions.setUser(accessResult.data))\n        yield put(LogActions.login(accessResult.data))\n    }\n    else {\n        yield put(ErrorCodeActions.execHandleError({errorResult:accessResult.data}))\n    }\n    yield put(LogActions.finishDefLogin())\n}\n\nexport function* handleGetExecLoginStart(loginAction) {\n    //初期処理\n    const accessResult = yield call(DataAccessor.post,{\n        url       :`${process.env.REACT_APP_BACKEND_ADDRESS}/login`,\n        parameter :loginAction.session,\n    })\n    if(accessResult.isSuccess){\n        alert(`ようこそ${accessResult.data.name}さん!`)\n        yield put(UserActions.setUser(accessResult.data))\n        yield put(LogActions.login(accessResult.data))\n        loginAction.history.push('/home')\n    }\n    if(accessResult.isFail){\n        alert(\"ログインに失敗しました\")\n        yield put(FormErrorActions.setError({\n            formName:\"loginForm\",\n            errorJson: accessResult.data\n        }))\n    }\n    if(accessResult.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:accessResult.data}))\n    }\n    loginAction.then();\n}\n\nexport function* handleGetExecLogoutStart(logoutAction) {\n    const result = yield call(DataAccessor.delete, {\n        url :`${process.env.REACT_APP_BACKEND_ADDRESS}/logout`\n    })\n    if(result.isSuccess) {\n        yield put(LogActions.logout());\n        alert('ログアウトしました')\n        logoutAction.history.push('/signin')\n    }\n    if(result.isError) {\n        yield put(ErrorCodeActions.execHandleError({\n            errorResult:result.data,\n        }))\n    }\n}\n","import DataAccessor from \"../DataAccessor\"\nimport TalkRoomActions from \"./TalkRoomActions\"\nimport { put, call, fork} from \"redux-saga/effects\"\n\nimport UserActions from \"../userModule/UserActions\"\nimport FormErrorActions from \"../FormErrorModule/FormErrorActions\"\nimport ErrorCodeActions from \"../errorCodeModule/ErrorCodeActions\"\n\nconst getOwnRooms = () => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/own`\n    })\n}\n\nconst getJoinRooms = () => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/join`\n    })\n}\n\nconst getAllRooms = () => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms` \n    })\n}\n\n\nconst createTalkRoom = ({\n    title,\n    description,\n    authorId\n}) => {\n    return DataAccessor.post({\n        url       : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms`,\n        parameter : {\n            talkroom : {\n                title,\n                description,\n                author_id   :authorId\n            }\n        } \n    })\n}\n\nconst updateTalkRoom = talkRoom => {\n    return DataAccessor.put({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/${talkRoom.id}`,\n        parameter : {\n            talkroom : talkRoom\n        }\n    })\n}\n\nconst deleteTalkRoom = (talkRoomId) => {\n    return DataAccessor.delete({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/${talkRoomId}`\n    })\n}\n\n//メンバー追加\nconst addMemberToTalkRoom = ({\n    talkRoomId,\n    userId\n}) => {\n    return DataAccessor.post({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/${talkRoomId}/users`,\n        parameter : {\n            user : {\n                id : userId\n            }\n        }\n    })\n}\n\n//saga\nexport function* handleGetOwnRooms() {\n    const result = yield call(getOwnRooms)\n    if(result.isSuccess) {\n        yield put(TalkRoomActions.setOwnRooms(result.data))\n    }\n    if(result.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:result.data}))\n    }\n}\n\nexport function* handleGetJoinedTalkRooms() {\n    const talkRoomResult = yield call(getJoinRooms)\n    if(talkRoomResult.isSuccess) {\n        yield put(TalkRoomActions.setJoinedRooms(talkRoomResult.data))\n    }\n    if(talkRoomResult.isFail) {\n        alert('トークルームを取得できませんでした')\n    }\n    if(talkRoomResult.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:talkRoomResult.data}))\n    }\n}\n\nexport function* handleAddTalkRoom(action) {\n    const addTalkRoomResult = yield call(createTalkRoom, {\n        title       : action.title,\n        description : action.description,\n        authorId    : action.authorId\n    })\n    if(addTalkRoomResult.isSuccess) {\n        alert(`「${addTalkRoomResult.data.title}」を追加しました`)\n        yield put(TalkRoomActions.addTalkRoom(addTalkRoomResult.data))\n    }\n    if(addTalkRoomResult.isFail) {\n        alert('トークルームを追加できませんでした')\n        yield put(FormErrorActions.setError({\n            formName : \"createTalkRoomForm\",\n            errorJson : addTalkRoomResult.data\n        }))\n    }\n    if(addTalkRoomResult.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:addTalkRoomResult.data}))\n    }\n}\n\nexport function* handleUpdateTalkRoom(action) {\n    const updateTalkRoomResult = yield call(updateTalkRoom, {\n        id : action.talkRoomId,\n        title : action.title,\n        description : action.description,\n    })\n    if(updateTalkRoomResult.isSuccess) {\n        yield put(TalkRoomActions.updateTalkRoom({\n            talkRoomId : action.talkRoomId,\n            talkRoom : updateTalkRoomResult.data\n        }))\n    }\n    if(updateTalkRoomResult.isFail) {\n        alert(`${action.talkRoom.title}の更新ができませんでした`)\n        yield put(FormErrorActions.setError({\n            formName : \"updateTalkRoomForm\",\n            errorJson : updateTalkRoomResult.data\n        }))\n    }\n    if(updateTalkRoomResult.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:updateTalkRoomResult.data}))\n    }\n}\n\nexport function* handleDeleteTalkRoom(action) {\n    const deleteTalkRoomResult = yield call(deleteTalkRoom, action.talkRoomId)\n    if(deleteTalkRoomResult.isSuccess) {\n        alert('削除しました')\n        yield put(TalkRoomActions.deleteTalkRoom({\n            talkRoomId : action.talkRoomId\n        }))\n    }\n    if(deleteTalkRoomResult.isFail) {\n        alert(`削除できませんでした`)\n    }\n    if(deleteTalkRoomResult.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:deleteTalkRoomResult.data}))\n    }\n}\n\nexport function* handleAddTalkRoomMember(action) {\n    const result = yield call(addMemberToTalkRoom, {talkRoomId:action.talkRoomId, userId:action.userId})\n    if(result.isSuccess) {\n        alert(`${result.data.name}を追加しました`)\n        yield put(UserActions.setUser(result.data))\n        yield put(TalkRoomActions.addMembersToTalkRoom({\n            talkRoomId : action.talkRoomId,\n            userIds : [action.userId]\n        }))\n    }\n    if(result.isFail) {\n        alert(\"そんなユーザーいません\")\n        yield put(FormErrorActions.setError({\n            formName : \"userInviteForm\",\n            errorJson : {\n                messages : [\"このID,名前の組合わせが存在しません\"]\n            }\n        }))\n    }\n    if(result.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:result.data}))\n    }\n}\n\nexport function* handleRemoveUsersFromTalkRoom(action) {\n    const result = yield call(DataAccessor.delete, {\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/talk_rooms/${action.talkRoomId}/users/destroy_multiple`,\n        parameter : {'ids': action.userIds}\n    })\n    if(result.isSuccess) {\n        alert(\"ユーザーをトークルームから追い出しました\")\n        yield put(TalkRoomActions.removeUsersFromTalkRoom({\n            userIds : action.userIds,\n            talkRoomId : action.talkRoomId\n        }))\n    }\n    if(result.isFail) {\n        alert('削除できませんでした')\n    }\n    if(result.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:result.data}))\n    }\n}\n\n\n\n\n","/**\n * socketのクライアント側の設定\n */\n\nimport io from 'socket.io-client'\nimport { eventChannel } from 'redux-saga'\n\nconsole.log(`socket client connect to ${process.env.REACT_APP_SOCKET_ADDRESS}`)\n\nconst socketClient = io.connect(process.env.REACT_APP_SOCKET_ADDRESS, {path: (process.env.REACT_APP_SOCKET_PATH || '/socket.io')})\n\n//イベントチャンネル\nexport function* createReceiveJoinChannel() {\n    return eventChannel(emit => {\n        socketClient.on('joinRoomMessage', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\nexport function* createReceiveLeaveChannel() {\n    return eventChannel(emit => {\n        socketClient.on('leaveRoomMessage', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\nexport function* createMessageReceiveChannel() {\n    return eventChannel(emit => {\n        socketClient.on('receiveMessage', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\nexport function* createCurrentUserReceiveChannel() {\n    return eventChannel(emit => {\n        socketClient.on('currentUsers', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\nexport function* createCurrentAllUserReceiveChannel() {\n    return eventChannel(emit => {\n        socketClient.on('currentAllUserIds', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\n//現在ユーザーステータス取得用のイベントチャンネル\nexport function* createCurrentUserStatusReceiveChannel() {\n    return eventChannel(emit => {\n        socketClient.on(\"currentUserStatus\", response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\nexport function* createCurrentUserPositionReceiveChannel() {\n    return eventChannel(emit => {\n        socketClient.on('currentUserPosition', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n}\n\nexport function* createReceiveRoomBgmChannel() {\n    return eventChannel(emit => {\n        socketClient.on('changeRoomBgm', response => {\n            emit(response)\n        })\n        return () => {\n            socketClient.close()\n        }\n    })\n} \n\n//ソケット通信　クライアント=>サーバー\nexport const clientToServerMethods = {\n    connectToServer : () => socketClient.connect(),\n    disconnectToServer : () => socketClient.disconnect(),\n    tellJoinedRoom : ({\n        roomId,\n        messageType,\n        messageClass,\n        text,\n        user\n    }) => {\n        socketClient.emit('joinRoomMessage',{\n            roomId,\n            messageType,\n            messageClass,\n            text,\n            user\n        })\n        socketClient.emit('currentUsers', roomId)\n    },\n    fetchCurrentRoomUsers : ({\n        talkRoomId\n    }) => {\n        socketClient.emit('currentUsers', talkRoomId)\n    },\n    tellLeavedRoom : ({\n        roomId,\n        messageType,\n        messageClass,\n        text,\n        user\n    }) => {\n        socketClient.emit('leaveRoomMessage',{\n            roomId,\n            messageType,\n            messageClass,\n            text,\n            user\n        })\n        socketClient.emit('currentUsers', roomId)\n    },\n    tellCurrentRoomUsersChanged : (roomId) => socketClient.emit('currentUsers', roomId),\n    tellCurrentRoomUserStatusChanged : ({\n        talkRoomId,\n        userId,\n        status\n    }) => {\n        socketClient.emit('currentUserStatus', {\n            talkRoomId,\n            userId,\n            status\n        })\n    },\n    tellCurrentRoomUserPositionChanged : ({\n        talkRoomId,\n        userId,\n        position = {latitude:0, longitude: 0}\n    }) => {\n        socketClient.emit('changeUserPosition', {\n            talkRoomId,\n            userId,\n            position\n        })\n    },\n    tellGetCurrentRoomUserPosition : ({\n        talkRoomId\n    }) => {\n        socketClient.emit('currentUserPosition', {\n            talkRoomId\n        })\n    },\n    sendMessage : ({\n        roomId,\n        messageType,\n        messageClass,\n        text,\n        user\n    }) => {\n        socketClient.emit('sendMessage', {\n            roomId, \n            messageType,\n            messageClass,\n            text,\n            user\n        })\n    },\n    tellChangeRoomBgm : ({\n        talkRoomId,\n        bgmSrcUrl\n    }) => {\n        socketClient.emit('changeRoomBgm', {\n            talkRoomId,\n            bgmSrcUrl\n        })\n    }\n}\n\n//ソケット通信　サーバー=>クライアント\nexport const serverToClientMothods = {\n    readyToRecconect : ({\n        user,\n        roomId\n    }) => {\n        socketClient.on('reconnect', () => {\n            socketClient.emit('rejoinRoom',{user, roomId})\n            socketClient.emit('currentUsers', roomId)\n        })\n    }\n}\n","import CurrentRoomStatusActions from \"./CurrentRoomStatusActions\"\nimport Actions from \"./CurrentRoomStatusActions\"\nimport { call, take, put, fork } from \"redux-saga/effects\"\nimport { createMessageReceiveChannel, createCurrentUserReceiveChannel, clientToServerMethods, serverToClientMothods, createCurrentUserStatusReceiveChannel, createReceiveJoinChannel, createReceiveLeaveChannel, createCurrentUserPositionReceiveChannel, createReceiveRoomBgmChannel, createCurrentAllUserReceiveChannel } from \"../socketClient\"\n\nexport function* handleReceiveJoinRoom() {\n    const channel = yield call(createReceiveJoinChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(Actions.receiveJoinRoom(response));\n    }\n}\n\nexport function* handleReceiveLeaveRoom() {\n    const channel = yield call(createReceiveLeaveChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(Actions.receiveLeaveRoom(response))\n    }\n}\n\n/**\n * socketサーバーからメッセージの追加を通知された時、\n * stateに通知されたメッセージを追加する\n */\nexport function* handleReceiveMessage() {\n    const channel = yield call(createMessageReceiveChannel)\n    //channelがemitするたびに起動\n    while(true) {\n        const response = yield take(channel)\n        yield put(Actions.receiveMessage(response))\n    }\n}\n\n/**\n * socketサーバーから現在ユーザーの更新通知を受け取り、\n * TalkRoomのcurrentUserIdsを更新する\n */\nexport function* handleGetCurrentUsers() {\n    const channel = yield call(createCurrentUserReceiveChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(CurrentRoomStatusActions.receiveRefreshCurrentRoomUsers({\n            talkRoomId : response.roomId,\n            userIds : [response.users].flat().map(user => user.id)\n        }))\n\n    }\n}\n\nexport function* handleFetchCurrentRoomUsers(action) {\n    yield call(clientToServerMethods.fetchCurrentRoomUsers,{\n        talkRoomId : action.talkRoomId\n    })\n}\n\nexport function* handleGetCurrentUserStatus() {\n    const channel = yield call(createCurrentUserStatusReceiveChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(CurrentRoomStatusActions.receiveCurrentUserStatus(response))\n    }\n}\n\n/**\n * socketの接続を行い、\n * socketサーバーにトークルームへの参加を通知し、\n * 現在ユーザーの更新を依頼する。\n */\nexport function* handleJoinRoom(action) {\n    //JOIN_ROOMが発行される毎に起動\n    yield call(serverToClientMothods.readyToRecconect, action)\n    yield call(clientToServerMethods.connectToServer)\n    yield call(clientToServerMethods.tellJoinedRoom,action)\n\n}\n\n/**\n * socketサーバーにトークルームからの退出を通知し、\n * 現在ユーザーの更新を依頼する。\n */\nexport function* handleLeaveRoom(action) {\n    //退出メッセージを受け取るためにイベントチャンネルを設定する\n    yield call(clientToServerMethods.tellLeavedRoom, action)\n    //トークルームの内容をクリアする\n    yield put(Actions.clearMessage(action.roomId))\n}\n\n/**\n * サーバーから接続を切断された時、トークルーム一覧画面に移る\n */\nexport function* handleDisconnectedFromServer(action) {\n    alert('サーバーから切断されました')\n    action.history.push('/talk_rooms')\n}\n\n/**\n * socketサーバーにトークルームへのメッセージ追加を通知する\n */\nexport function* handleSendMessage(action) {\n    yield call(clientToServerMethods.sendMessage, action)\n}\n\n/**\n * socketサーバーにユーザーステータスの変化を通知する\n */\nexport function* handleChangeStatus(action) {\n    yield call(clientToServerMethods.tellCurrentRoomUserStatusChanged, action)\n}\n\nexport function* handleSubmitTextMessage(action) {\n    const translateMode = action.translateMode || {translate : text=>text}\n    const text = yield　call(translateMode.translate, action.text)\n    yield put(CurrentRoomStatusActions.addMessage({\n        ...action,\n        messageType : 'text',\n        messageClass : 'myMessage',\n        text\n    }))\n    yield put(CurrentRoomStatusActions.sendMessage({\n        ...action,\n        messageType : 'text',\n        messageClass : 'receiveMessage',\n        text\n    }))\n} \n\nexport function* changeRoomBgm(action) {\n    yield call(clientToServerMethods.tellChangeRoomBgm, {\n        talkRoomId : action.talkRoomId,\n        bgmSrcUrl : action.bgmSrcUrl\n    })\n}\n\nexport function* handleReceiveChangeRoomBgm() {\n    const channel = yield call(createReceiveRoomBgmChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(CurrentRoomStatusActions.receiveChangeRoomBgm({\n            talkRoomId : response.talkRoomId,\n            bgmSrcUrl : response.bgmSrcUrl\n        }))\n    }\n}\n\n","import LogActions from \"../logModule/LogActions\"\nimport DataAccessor from \"../DataAccessor\"\nimport { call, put, take } from \"redux-saga/effects\"\nimport UserActions from \"./UserActions\"\n\nimport { createCurrentUserReceiveChannel, createMessageReceiveChannel } from \"../socketClient\"\n\nimport FormErrorActions from \"../FormErrorModule/FormErrorActions\"\nimport ErrorCodeActions from \"../errorCodeModule/ErrorCodeActions\"\n\nconst getSelf = () => {\n    return DataAccessor.get(({\n        url:`${process.env.REACT_APP_BACKEND_ADDRESS}/users/self`\n    }))\n}\n\n/**\n * Tips\n * FormDataで入れ子のデータ構造を送る場合,\n * formData.append(\"hoge[fuga]\", foobar)\n * という書き方でいける\n */\nconst createUser = (\n    userParams\n) => {\n    const formData = Object.keys(userParams).reduce((formData,paramName) => {\n        formData.append(`user[${paramName}]`, userParams[paramName])\n        return formData\n    }, new FormData())\n    return DataAccessor.post({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/users`,\n        parameter : formData,\n        headers : {\n            'Content-Type' : 'multipart/form-data'\n        }\n    })\n}\n\nconst updateUser = (\n    userParams\n) => {\n    const formData = Object.keys(userParams).reduce((formData,paramName) => {\n        formData.append(`user[${paramName}]`, userParams[paramName])\n        return formData\n    }, new FormData())\n    return DataAccessor.put({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/users/${userParams.id}`,\n        parameter : formData,\n        headers : {\n            'Content-Type' : 'multipart/form-data'\n        }\n    })\n}\n\nconst searchUser = ({\n    userSelfId,\n    userName\n}) => {\n    return DataAccessor.get({\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/users/search?self_id=${userSelfId}&name=${userName}`\n    })\n}\n\nexport function* handleGetRelatedUsers() {\n    const relatedUsers = yield call(() => DataAccessor.get({url:`${process.env.REACT_APP_BACKEND_ADDRESS}/users`}))\n    yield put(UserActions.setUser(...relatedUsers.data))\n}\n\nexport function* handleReceiveMessage() {\n    const channel = yield call(createMessageReceiveChannel)\n    //channelがemitするたびに起動\n    while(true) {\n        const response = yield take(channel)\n        yield put(UserActions.setUser(response.user))\n    }\n}\n\n\n//saga\nexport function* handleGetSelf() {\n    const result = yield call(getSelf)\n    if(result.isSuccess) {\n    }\n}\n\n\nexport function* handleCreateUser(action) {\n    const result = yield call(createUser, action.userParams)\n    if(result.isSuccess) {\n        yield put(LogActions.execLogin({\n            session: {\n                name : action.userParams.name,\n                password : action.userParams.password\n            },\n            history : action.history,\n        }))\n    }\n    if(result.isFail) {\n        alert(\"ユーザーを作成できませんでした\")\n        yield put(FormErrorActions.setError({\n            formName : \"signUpForm\",\n            errorJson : result.data\n        }))\n    }\n    if(result.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:result.data}))\n    }\n}\n\nexport function* handleUpdateUser(action) {\n    const result = yield call(updateUser, action.userParams)\n    if(result.isSuccess) {\n        alert('プロフィールを更新しました。')\n        yield put(UserActions.setUser(result.data))\n        yield put(LogActions.login(result.data))\n    }\n    if(result.isFail) {\n        yield put(FormErrorActions.setError({\n            formName: 'updateUserForm',\n            errorJson : result.data\n        }))\n    }\n    if(result.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:result.data}))\n    }\n}\n\nexport function* handleGetCurrentRoomUsers() {\n    const channel = yield call(createCurrentUserReceiveChannel)\n    while(true) {\n        const response = yield take(channel)\n        yield put(UserActions.setUser(...Object.values(response.users)))\n    }\n}\n\nexport function* handleExecSearchUser(action) {\n    const searchResult = yield call(searchUser, {\n        userSelfId : action.userSelfId,\n        userName : action.userName\n    })\n    if(searchResult.isSuccess) {\n        yield put(UserActions.setSearchedUsers(searchResult.data))\n    }\n    if(searchResult.isFail) {\n        alert(\"ユーザーが見つかりませんでした\")\n        yield put(UserActions.setSearchedUsers())\n        yield put(FormErrorActions.setError({\n            formName : \"userInviteForm\",\n            errorJson : searchResult.data\n        }))\n    }\n    if(searchResult.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:searchResult.data}))\n    }\n}\n","import { put } from \"redux-saga/effects\"\nimport LogActions from \"../logModule/LogActions\"\n\n/**\n * 実質HANDLE_ERROR_CODE専用\n * @param {*} action \n */\nconst errorCodeToAction = {}\nerrorCodeToAction[401] = LogActions.logout()\n\nexport function* handleError(action) {\n    const putAction = errorCodeToAction[action.errorCode]\n    if(putAction) {\n        yield put(putAction)\n    }\n}","import DataAccessor from \"../DataAccessor\"\nimport MessageImageActions from \"./MessageImageActions\"\nimport ErrorCodeActions from \"../errorCodeModule/ErrorCodeActions\"\nimport { call, put } from \"redux-saga/effects\"\n\nconst fetchUsersMessageImages = (\n    userId\n) => {\n    return DataAccessor.get({\n        url:`${process.env.REACT_APP_BACKEND_ADDRESS}/users/${userId}/message_images`\n    })\n}\n\nexport function* handleClearMessageImage() {\n    yield put(MessageImageActions.clearMessageImage())\n}\n\nexport function* handleFetchLoginUsersMessageImages(action) {\n    const result = yield call(fetchUsersMessageImages, action.loginUser.id)\n    if(result.isSuccess) {\n        yield put(MessageImageActions.addMessageImage(result.data))\n    }\n    if(result.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:result.data}))\n    }\n}\n\nconst createMessageImage = ({\n    userId,\n    messageImageParams\n}) => {\n    const formData = Object.keys(messageImageParams).reduce((formData,paramName) => {\n        formData.append(`message_image[${paramName}]`, messageImageParams[paramName])\n        return formData\n    }, new FormData())\n    return DataAccessor.post({\n        url:`${process.env.REACT_APP_BACKEND_ADDRESS}/users/${userId}/message_images`,\n        parameter: formData,\n        headers : {\n            'Content-Type' : 'multipart/form-data'\n        }\n    })\n}\n\nexport function* handleUploadMessageImage(action) {\n    const uploadResult = yield call(createMessageImage,{\n        userId : action.userId, \n        messageImageParams : action.messageImageParams\n    })\n    if(uploadResult.isSuccess) {\n        yield put(MessageImageActions.addMessageImage(uploadResult.data))\n    }\n    if(uploadResult.isFail) {\n        alert('画像をアップロードできませんでした')\n    }\n    if(uploadResult.isError) {\n        yield put(ErrorCodeActions.execHandleError({errorResult:uploadResult.data}))\n    }\n}","import DataAccessor from \"../DataAccessor\"\nimport { call, put } from \"redux-saga/effects\"\nimport SoundActions from \"./SoundActions\"\n\nconst bgm = new Audio()\nbgm.loop = true\n\nexport function* playBGM(action) {\n    bgm.src = action.bgmSrcUrl\n    yield bgm.play().catch(err => {\n        console.log(err)\n    })\n}\n\nexport function* pauseBGM() {\n    bgm.currentTime = 0.0\n    yield bgm.pause()\n}\n\nexport function* playAddMessageSound() {\n    const sound = new Audio(`${process.env.PUBLIC_URL}/sounds/add_message.mp3`)\n    yield sound.play().catch(err => {\n        console.log(err)\n    })\n}\n\nexport function* playReceiveMessageSound() {\n    const sound = new Audio(`${process.env.PUBLIC_URL}/sounds/receive_message.mp3`)\n    yield sound.play().catch(err => {\n        console.log(err)\n    })\n}\n\nexport function* playJoinRoomSound() {\n    const sound = new Audio(`${process.env.PUBLIC_URL}/sounds/入店するときのベル.mp3`)\n    yield sound.play().catch(err => {\n        console.log(err)\n    })\n}\n\nexport function* playLeaveRoomSound() {\n    const sound = new Audio(`${process.env.PUBLIC_URL}/sounds/se_maoudamashii_chime08.mp3`)\n    yield sound.play().catch(err => {\n        console.log(err)\n    })\n}\n\nexport function* uploadBGM(action) {\n    const formData = Object.keys(action.bgmParams).reduce((formData, paramName) => {\n        formData.append(`bgm[${paramName}]`, action.bgmParams[paramName])\n        return formData\n    }, new FormData())\n    const result = yield call(DataAccessor.post, {\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/users/${action.userId}/bgms`,\n        parameter : formData,\n        headers : {\n            'Content-Type' : 'multipart/form-data'\n        }\n    })\n    if(result.isSuccess) {\n        yield put(SoundActions.addBgms({\n            bgms : result.data\n        }))\n    }\n    else {\n        alert('bgmのアップロードに失敗しました')\n    }\n}\n\n\nexport function* fetchUserBgms(action) {\n    const userId = action.userId || action.loginUser.id\n    const result = yield call(DataAccessor.get, {\n        url : `${process.env.REACT_APP_BACKEND_ADDRESS}/users/${userId}/bgms`\n    })\n    yield put(SoundActions.addBgms({\n        bgms : result.data\n    }))\n}","import { clientToServerMethods, createCurrentUserPositionReceiveChannel } from \"../socketClient\";\nimport { call, take, put } from \"redux-saga/effects\";\nimport UserPositionActions from \"./UserPositionActions\";\n\nexport function* handleReceiveCurrentUserPosition() {\n    const channel = yield call(createCurrentUserPositionReceiveChannel)\n    while(true) {\n        const response = yield take(channel)\n        for(const user of response.users) {\n            yield put(UserPositionActions.receiveChangeCurrentUserPosition({\n                talkRoomId : response.talkRoomId,\n                userId : user.id,\n                position : user.position\n            }))\n        }\n        \n    }\n}\n\nexport function* handleTellChangeUserPosition(action) {\n    clientToServerMethods.tellCurrentRoomUserPositionChanged(action)\n}\n\nexport function* handleTellCurrentUserPosition(action) {\n    clientToServerMethods.tellGetCurrentRoomUserPosition(action);\n}","\n/**\n * ActionTypeとSagaを結びつける\n */\nimport { all, takeEvery, takeLatest　} from \"redux-saga/effects\";\nimport * as loadingSaga from \"./loadingModule/LoadingSaga\"\nimport { LogActionTypes } from \"./logModule/LogActions\";\nimport * as logSaga from \"./logModule/LogSaga\";\nimport { TalkRoomActionTypes } from \"./talkRoomModule/TalkRoomActions\";\nimport * as talkRoomSaga from \"./talkRoomModule/TalkRoomSaga\"\nimport {CurrentRoomStatusActionTypes} from \"./currentRoomStatusModule/CurrentRoomStatusActions\"\nimport * as talkRoomMessageSaga from \"./currentRoomStatusModule/CurrentRoomStatusSaga\"\nimport * as userSaga from \"./userModule/UserSaga\"\nimport * as errorSaga from './errorCodeModule/ErrorCodeSaga'\nimport { UserActionTypes } from \"./userModule/UserActions\";\nimport { ErrorCodeActionTypes } from \"./errorCodeModule/ErrorCodeActions\";\nimport { MessageImageActionTypes } from \"./messageImageModule/MessageImageActions\";\nimport * as messageImageSaga from \"./messageImageModule/MessageImageSaga\"\nimport * as soundSaga from \"./soundModule/SoundSaga\"\nimport {UserPositionActionTypes} from './userPositionModule/UserPositionActions'\nimport * as userPositionSaga from './userPositionModule/UserPositionSaga'\nimport { SoundActionTypes } from \"./soundModule/SoundActions\";\n\nconst logSagas = [\n    takeEvery(LogActionTypes.EXEC_DEF_LOG_IN, loadingSaga.addLoadingStateUntilSagaFinish(logSaga.handleGetDefLoginStart)),\n    takeEvery(LogActionTypes.EXEC_LOG_IN, loadingSaga.addLoadingStateUntilSagaFinish(logSaga.handleGetExecLoginStart)),\n    takeEvery(LogActionTypes.EXEC_LOG_OUT, loadingSaga.addLoadingStateUntilSagaFinish(logSaga.handleGetExecLogoutStart)),\n]\n\nconst messageImageSagas = [\n    takeEvery(LogActionTypes.LOG_IN, loadingSaga.addLoadingStateUntilSagaFinish(messageImageSaga.handleClearMessageImage,messageImageSaga.handleFetchLoginUsersMessageImages)),\n    takeEvery(MessageImageActionTypes.EXEC_UPLOAD_MESSAGE_IMAGE, loadingSaga.addLoadingStateUntilSagaFinish(messageImageSaga.handleUploadMessageImage))\n]\n\nconst talkRoomSagas = [\n    //talkRoomSaga\n    takeEvery(LogActionTypes.LOG_IN, loadingSaga.addLoadingStateUntilSagaFinish(talkRoomSaga.handleGetOwnRooms)),\n    takeEvery(LogActionTypes.LOG_IN, loadingSaga.addLoadingStateUntilSagaFinish(talkRoomSaga.handleGetJoinedTalkRooms)),\n    takeEvery(TalkRoomActionTypes.EXEC_GET_OWN_ROOMS, talkRoomSaga.handleGetOwnRooms),\n    takeEvery(TalkRoomActionTypes.EXEC_GET_JOINED_ROOMS, talkRoomSaga.handleGetJoinedTalkRooms),\n    takeEvery(TalkRoomActionTypes.EXEC_ADD_ROOM, talkRoomSaga.handleAddTalkRoom),\n    takeEvery(TalkRoomActionTypes.EXEC_UPDATE_ROOM, talkRoomSaga.handleUpdateTalkRoom),\n    takeEvery(TalkRoomActionTypes.EXEC_DELETE_ROOM, talkRoomSaga.handleDeleteTalkRoom),\n    takeEvery(TalkRoomActionTypes.EXEC_ADD_USER_TO_TALKROOM, talkRoomSaga.handleAddTalkRoomMember),\n    takeEvery(TalkRoomActionTypes.EXEC_REMOVE_USERS_FROM_TALKROOM, talkRoomSaga.handleRemoveUsersFromTalkRoom)\n]\n\nconst talkRoomMessageSagas = [\n    takeEvery(CurrentRoomStatusActionTypes.JOIN_ROOM, talkRoomMessageSaga.handleJoinRoom),\n    talkRoomMessageSaga.handleReceiveJoinRoom(),\n\n    takeEvery(CurrentRoomStatusActionTypes.LEAVE_ROOM, talkRoomMessageSaga.handleLeaveRoom),\n    talkRoomMessageSaga.handleReceiveLeaveRoom(),\n\n    takeEvery(CurrentRoomStatusActionTypes.SEND_MESSAGE, talkRoomMessageSaga.handleSendMessage),\n    talkRoomMessageSaga.handleReceiveMessage(),\n    \n    takeEvery(CurrentRoomStatusActionTypes.EXEC_REFRESH_CURRENT_ROOM_USERS, talkRoomMessageSaga.handleFetchCurrentRoomUsers),\n    talkRoomMessageSaga.handleGetCurrentUsers(),\n\n    takeEvery(CurrentRoomStatusActionTypes.CHANGE_CURRENT_USER_STATUS, talkRoomMessageSaga.handleChangeStatus),\n    talkRoomMessageSaga.handleGetCurrentUserStatus(),\n\n    takeEvery(CurrentRoomStatusActionTypes.SUBMIT_TEXT_MESSAGE,　loadingSaga.addLoadingStateUntilSagaFinish(talkRoomMessageSaga.handleSubmitTextMessage)),\n    takeEvery(CurrentRoomStatusActionTypes.CHANGE_ROOM_BGM, talkRoomMessageSaga.changeRoomBgm),\n    talkRoomMessageSaga.handleReceiveChangeRoomBgm(),\n]\n\nconst userSagas = [\n    takeEvery(LogActionTypes.LOG_IN, loadingSaga.addLoadingStateUntilSagaFinish(userSaga.handleGetRelatedUsers)),\n    takeEvery(UserActionTypes.EXEC_CREATE_USER, loadingSaga.addLoadingStateUntilSagaFinish(userSaga.handleCreateUser)),\n    takeEvery(UserActionTypes.EXEC_SEARCH_USER, loadingSaga.addLoadingStateUntilSagaFinish(userSaga.handleExecSearchUser)),\n    takeEvery(UserActionTypes.EXEC_UPDATE_USER, loadingSaga.addLoadingStateUntilSagaFinish(userSaga.handleUpdateUser)),\n    userSaga.handleReceiveMessage(),\n    userSaga.handleGetCurrentRoomUsers()\n]\n\nconst userPositionSagas = [\n    userPositionSaga.handleReceiveCurrentUserPosition(),\n    takeEvery(UserPositionActionTypes.CHANGE_CURRENT_USER_POSITION, userPositionSaga.handleTellChangeUserPosition),\n    takeEvery(CurrentRoomStatusActionTypes.JOIN_ROOM, userPositionSaga.handleTellChangeUserPosition)\n]\n\nconst ErrorCodeSagas = [\n    takeEvery(ErrorCodeActionTypes.HANDLE_ERROR_CODE, errorSaga.handleError)\n]\n\nconst SoundSagas = [\n    takeEvery(CurrentRoomStatusActionTypes.JOIN_ROOM, soundSaga.playJoinRoomSound),\n    takeEvery(CurrentRoomStatusActionTypes.RECEIVE_JOIN_ROOM, soundSaga.playJoinRoomSound),\n    takeEvery(CurrentRoomStatusActionTypes.LEAVE_ROOM, soundSaga.playLeaveRoomSound),\n    takeEvery(CurrentRoomStatusActionTypes.RECEIVE_LEAVE_ROOM, soundSaga.playLeaveRoomSound),\n    takeEvery(CurrentRoomStatusActionTypes.ADD_MESSAGE, soundSaga.playAddMessageSound),\n    takeEvery(CurrentRoomStatusActionTypes.RECEIVE_MESSAGE, soundSaga.playReceiveMessageSound),\n\n    takeLatest(SoundActionTypes.START_BGM, soundSaga.playBGM),\n    takeLatest(CurrentRoomStatusActionTypes.LEAVE_ROOM, soundSaga.pauseBGM),\n    takeLatest(CurrentRoomStatusActionTypes.DISCONNECTED_FROM_SERVER, soundSaga.pauseBGM),\n\n    takeEvery(SoundActionTypes.EXEC_UPLOAD_BGM, loadingSaga.addLoadingStateUntilSagaFinish(soundSaga.uploadBGM)),\n    takeEvery(LogActionTypes.LOG_IN, soundSaga.fetchUserBgms),\n    \n    takeEvery(CurrentRoomStatusActionTypes.CHANGE_ROOM_BGM, soundSaga.playBGM),\n    takeEvery(CurrentRoomStatusActionTypes.RECEIVE_CHANGE_ROOM_BGM, soundSaga.playBGM),\n\n]\n\n//rootSaga\nexport default function* rootSaga(){\n    yield all([\n        ...logSagas,\n        ...messageImageSagas,\n        ...talkRoomSagas,\n        ...talkRoomMessageSagas,\n        ...userSagas,\n        ...ErrorCodeSagas,\n        ...SoundSagas,\n        ...userPositionSagas\n    ])\n}","import { ErrorCodeActionTypes } from \"./ErrorCodeActions\"\nimport createReducerFactory from \"../CreateReducerFactory\"\n\nconst initialState = {}\n\nconst errorCodeHandler = {}\nerrorCodeHandler[401] = (state) => {\n    return {\n        ...state,\n        loginUser : false\n    }\n}\nconst actionHandler = {}\nactionHandler[ErrorCodeActionTypes.HANDLE_ERROR_CODE] = (state, action) => {\n    const errorHandler = errorCodeHandler[action.errorCode]\n    if(errorHandler) {\n        return errorHandler(state)\n    }\n    return state\n}\n\n\nexport default {\n    createReducer : createReducerFactory(initialState, actionHandler)\n}","import ErrorCodeReducer from \"./ErrorCodeReducer\";\nimport ErrorCodeActions from \"./ErrorCodeActions\";\n\nexport default {\n    action : ErrorCodeActions,\n    reducer : ErrorCodeReducer\n}","import createReducerFactory from \"../CreateReducerFactory\"\nimport DataAccessor from \"../DataAccessor\"\n\nconst { TranslateModeActionTypes: TranslateModeActions } = require(\"./TranslateModeActions\")\n\nconst initialState = {\n    simple : {\n        modeId : 'simple',\n        modeName : 'Simple',\n        modeTitle : '【翻訳なし】',\n        placeholder : 'メッセージを入力してね',\n        description : '翻訳せず、書いたまま送信します。',\n        translate :　text => text\n    },\n    nomlishLv1 : {\n        modeId : 'nomlishLv1',\n        modeName : 'NomlishLv1',\n        modeTitle : '【ノムリッシュ翻訳Lv1】',\n        placeholder : '翻訳モード:ノムリッシュLv1',\n        description : '翻訳モード:ノムリッシュLv1',\n        translate : (text) => DataAccessor.get({\n            url :`${process.env.REACT_APP_NOMLISH_ADDRESS}/translate/1?text=${text}`\n        })\n        .then(response => response.data)\n        .catch(err=>{console.error(err)\n            return ''\n        })\n    },\n    nomlishLv2 : {\n        modeId : 'nomlishLv2',\n        modeName : 'NomlishLv2',\n        modeTitle: '【ノムリッシュ翻訳Lv2】',\n        placeholder : '翻訳モード:ノムリッシュLv2',\n        description : '翻訳モード:ノムリッシュLv2',\n        translate : (text) => DataAccessor.get({\n            url :`${process.env.REACT_APP_NOMLISH_ADDRESS}/translate/2?text=${text}`\n        })\n        .then(response => response.data)\n        .catch(err=>{console.error(err)\n            return ''\n        })\n    },\n    nomlishLv3 : {\n        modeId : 'nomlishLv3',\n        modeName : 'NomlishLv3',\n        modeTitle: '【ノムリッシュ翻訳Lv3】',\n        placeholder : '翻訳モード:ノムリッシュLv3',\n        description : '翻訳モード:ノムリッシュLv3',\n        translate : (text) => DataAccessor.get({\n            url :`${process.env.REACT_APP_NOMLISH_ADDRESS}/translate/3?text=${text}`\n        })\n        .then(response => response.data)\n        .catch(err=>{console.error(err)\n            return ''\n        })\n    },\n    nomlishLv4 : {\n        modeId : 'nomlishLv4',\n        modeName : 'NomlishLv4',\n        modeTitle: '【ノムリッシュ翻訳Lv4】',\n        placeholder : '翻訳モード:ノムリッシュLv4',\n        description : '翻訳モード:ノムリッシュLv4',\n        translate : (text) => DataAccessor.get({\n            url :`${process.env.REACT_APP_NOMLISH_ADDRESS}/translate/4?text=${text}`\n        })\n        .then(response => response.data)\n        .catch(err=>{console.error(err)\n            return ''\n        })\n    }\n}\n\nconst actionHandler = {}\nactionHandler[TranslateModeActions.CHANGE_TRANSLATE_MODE_DESCRIPTION] = (state,action) => {\n    const translateMode = state[action.translateMode] || {}\n    translateMode.descripition = action.description\n    return {\n        ...state,\n    }\n}\n\nexport default {\n    createReducer: createReducerFactory(initialState, actionHandler)\n}","import TranslateModeAction from \"./TranslateModeActions\";\nimport TranslateModeActions from \"./TranslateModeActions\";\nimport TranslateModeReducer from \"./TranslateModeReducer\";\n\nexport default {\n    action : TranslateModeActions,\n    reducer : TranslateModeReducer\n}","\nimport createReducerFactory from \"../CreateReducerFactory\"\nimport { SoundActionTypes } from \"./SoundActions\"\n\n\nconst initialState = {\n    0 : {\n        id:0,\n        src:''\n    }\n}\n\nconst actionHandler={}\nactionHandler[SoundActionTypes.ADD_BGM] = (state, action) => {\n    const newBgms = [action.bgms].flat()\n    const newState = newBgms.reduce((state, newBgm) => {\n        state[newBgm.id] = newBgm\n        return state\n    }, state)\n    return {\n        ...state,\n        ...newState\n    }\n}\n\nconst createReducer = createReducerFactory(initialState, actionHandler)\n\nexport default {\n    createReducer\n}\n\n","\nimport {createStore, combineReducers, applyMiddleware} from 'redux'\n\nimport TalkRoomMessageModule from './modules/currentRoomStatusModule/CurrentRoomStatusModule'\n\n\n//saga\nimport createSagaMiddleware from 'redux-saga'\nimport LogModule from './modules/logModule/LogModule'\nimport TalkRoomModule from './modules/talkRoomModule/TalkRoomModule'\nimport UserModule from './modules/userModule/UserModule'\nimport LoadingModule from './modules/loadingModule/LoadingModule'\nimport RootSaga from './modules/RootSaga'\nimport FormErrorModule from './modules/FormErrorModule/FormErrorModule'\nimport ErrorCodeModule from './modules/errorCodeModule/ErrorCodeModule'\nimport MessageImageModule from './modules/messageImageModule/MessageImageModule'\nimport UserPositionModule from './modules/userPositionModule/UserPositionModule'\nimport TranslateModule from './modules/translateModeModule/TranslateModule'\nimport SoundReducer from './modules/soundModule/SoundReducer'\n\n//middleware\nconst sagaMiddleware = createSagaMiddleware()\n//store setting\nconst store = createStore(\n    combineReducers({\n        currentRoomStatus : TalkRoomMessageModule.reducer.createMessageReducer, \n        logStatus : LogModule.reducer.creatReducer,\n        messageImages : MessageImageModule.reducer.createReducer,\n        bgms : SoundReducer.createReducer,\n        talkRooms : TalkRoomModule.reducer.createReducer,\n        loading   : LoadingModule.reducer.createReducer,\n        users     : UserModule.reducer.createReducer,\n        userPositions : UserPositionModule.reducer.createUserPositionReducer,\n        formErrors: FormErrorModule.reducer.createReducer,\n        errorCodes : ErrorCodeModule.reducer.createReducer,\n        translateModes : TranslateModule.reducer.createReducer,\n        \n    }), \n    applyMiddleware(sagaMiddleware)\n)\n\n//run sagas\nsagaMiddleware.run(RootSaga)\n\nexport default store;\n","const history = require(\"history\").createBrowserHistory()\nexport default history;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\n//reduxå\nimport {Provider} from 'react-redux'\nimport history from './modules/HistoryModule';\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App  history={history}/>\n    </Provider>, \n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const TranslateModeActionTypes = {\n    CHANGE_TRANSLATE_MODE_DESCRIPTION : 'CHANGE_TRANSLATE_MODE_DESCRIPTION'\n}\n\nexport default {\n    changeDescription : ({\n        translateMode,\n        description\n    }) => {\n        return {\n            type : TranslateModeActionTypes.CHANGE_TRANSLATE_MODE_DESCRIPTION,\n            translateMode,\n            description\n        }\n    }\n}"],"sourceRoot":""}